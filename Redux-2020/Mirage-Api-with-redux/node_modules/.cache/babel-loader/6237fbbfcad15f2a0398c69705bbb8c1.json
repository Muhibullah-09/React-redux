{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nexport const counterUpdate = createAsyncThunk(\"counter/counterUpdate\", async (value, thunkAPI) => {\n  const resposne = await fetch(\"http://localhost:3000/api/updatecounter\", {\n    method: \"post\",\n    body: {\n      name: \"hello\"\n    }\n  });\n  const data = await resposne.json();\n  return data;\n});\nexport const counterSlice = createSlice({\n  name: \"Counter\",\n  initialState: {\n    count: 0,\n    isLoading: false,\n    error: \"\"\n  },\n  reducers: {\n    increment: state => {\n      state.count++;\n    },\n    decrement: state => {\n      state.count--;\n    },\n    incrementByAmount: (state, action) => {\n      state.count += action.payload;\n    }\n  },\n  extraReducers: {\n    [counterUpdate.fulfilled]: (state, action) => {\n      state.count += action.payload;\n      state.isLoading = false;\n    },\n    [counterUpdate.pending]: state => {\n      state.isLoading = true;\n    },\n    [counterUpdate.rejected]: (state, action) => {\n      console.log(\"rejected \", action);\n      state.isLoading = false;\n      state.error = \"Error in Update counter\";\n    }\n  }\n});\nexport const {\n  increment,\n  decrement,\n  incrementByAmount\n} = counterSlice.actions;\nexport default counterSlice.reducer;","map":{"version":3,"sources":["/home/muhibullahkamali/GitHub/React-redux/Redux-2020/Mirage-Api-with-redux/src/store/CounterSlice.js"],"names":["createSlice","createAsyncThunk","counterUpdate","value","thunkAPI","resposne","fetch","method","body","name","data","json","counterSlice","initialState","count","isLoading","error","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","fulfilled","pending","rejected","console","log","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AAEA,OAAO,MAAMC,aAAa,GAAGD,gBAAgB,CACzC,uBADyC,EAEzC,OAAOE,KAAP,EAAcC,QAAd,KAA2B;AACvB,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,yCAAD,EACxB;AACIC,IAAAA,MAAM,EAAE,MADZ;AAEIC,IAAAA,IAAI,EAAE;AAAEC,MAAAA,IAAI,EAAE;AAAR;AAFV,GADwB,CAA5B;AAKA,QAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAT,EAAnB;AACA,SAAOD,IAAP;AACH,CAVwC,CAAtC;AAYP,OAAO,MAAME,YAAY,GAAGZ,WAAW,CAAC;AACpCS,EAAAA,IAAI,EAAE,SAD8B;AAEpCI,EAAAA,YAAY,EAAE;AACVC,IAAAA,KAAK,EAAE,CADG;AAEVC,IAAAA,SAAS,EAAE,KAFD;AAGVC,IAAAA,KAAK,EAAE;AAHG,GAFsB;AAOpCC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,SAAS,EAAGC,KAAD,IAAW;AAClBA,MAAAA,KAAK,CAACL,KAAN;AACH,KAHK;AAINM,IAAAA,SAAS,EAAGD,KAAD,IAAW;AAClBA,MAAAA,KAAK,CAACL,KAAN;AACH,KANK;AAONO,IAAAA,iBAAiB,EAAE,CAACF,KAAD,EAAQG,MAAR,KAAmB;AAClCH,MAAAA,KAAK,CAACL,KAAN,IAAeQ,MAAM,CAACC,OAAtB;AACH;AATK,GAP0B;AAkBpCC,EAAAA,aAAa,EAAE;AACX,KAACtB,aAAa,CAACuB,SAAf,GAA2B,CAACN,KAAD,EAAQG,MAAR,KAAmB;AAC1CH,MAAAA,KAAK,CAACL,KAAN,IAAeQ,MAAM,CAACC,OAAtB;AACAJ,MAAAA,KAAK,CAACJ,SAAN,GAAkB,KAAlB;AACH,KAJU;AAKX,KAACb,aAAa,CAACwB,OAAf,GAA0BP,KAAD,IAAW;AAChCA,MAAAA,KAAK,CAACJ,SAAN,GAAkB,IAAlB;AACH,KAPU;AAQX,KAACb,aAAa,CAACyB,QAAf,GAA0B,CAACR,KAAD,EAAQG,MAAR,KAAmB;AACzCM,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBP,MAAzB;AACAH,MAAAA,KAAK,CAACJ,SAAN,GAAkB,KAAlB;AACAI,MAAAA,KAAK,CAACH,KAAN,GAAc,yBAAd;AACH;AAZU;AAlBqB,CAAD,CAAhC;AAkCP,OAAO,MAAM;AAAEE,EAAAA,SAAF;AAAaE,EAAAA,SAAb;AAAwBC,EAAAA;AAAxB,IAA8CT,YAAY,CAACkB,OAAjE;AACP,eAAelB,YAAY,CAACmB,OAA5B","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\nexport const counterUpdate = createAsyncThunk(\n    \"counter/counterUpdate\",\n    async (value, thunkAPI) => {\n        const resposne = await fetch(\"http://localhost:3000/api/updatecounter\",\n            {\n                method: \"post\",\n                body: { name: \"hello\" }\n            });\n        const data = await resposne.json();\n        return data;\n    }\n);\nexport const counterSlice = createSlice({\n    name: \"Counter\",\n    initialState: {\n        count: 0,\n        isLoading: false,\n        error: \"\",\n    },\n    reducers: {\n        increment: (state) => {\n            state.count++\n        },\n        decrement: (state) => {\n            state.count--;\n        },\n        incrementByAmount: (state, action) => {\n            state.count += action.payload\n        }\n    },\n    extraReducers: {\n        [counterUpdate.fulfilled]: (state, action) => {\n            state.count += action.payload;\n            state.isLoading = false;\n        },\n        [counterUpdate.pending]: (state) => {\n            state.isLoading = true;\n        },\n        [counterUpdate.rejected]: (state, action) => {\n            console.log(\"rejected \", action);\n            state.isLoading = false;\n            state.error = \"Error in Update counter\";\n        },\n    }\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\nexport default counterSlice.reducer;"]},"metadata":{},"sourceType":"module"}
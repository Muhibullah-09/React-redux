{"ast":null,"code":"/**\n * Minimal Event interface implementation\n *\n * Original implementation by Sven Fuchs: https://gist.github.com/995028\n * Modifications and tests by Christian Johansen.\n *\n * @author Sven Fuchs (svenfuchs@artweb-design.de)\n * @author Christian Johansen (christian@cjohansen.no)\n * @license BSD\n *\n * Copyright (c) 2011 Sven Fuchs, Christian Johansen\n */\nvar _Event = function Event(type, bubbles, cancelable, target) {\n  this.type = type;\n  this.bubbles = bubbles;\n  this.cancelable = cancelable;\n  this.target = target;\n};\n\n_Event.prototype = {\n  stopPropagation: function () {},\n  preventDefault: function () {\n    this.defaultPrevented = true;\n  }\n};\n/*\n  Used to set the statusText property of an xhr object\n*/\n\nvar httpStatusCodes = {\n  100: \"Continue\",\n  101: \"Switching Protocols\",\n  200: \"OK\",\n  201: \"Created\",\n  202: \"Accepted\",\n  203: \"Non-Authoritative Information\",\n  204: \"No Content\",\n  205: \"Reset Content\",\n  206: \"Partial Content\",\n  300: \"Multiple Choice\",\n  301: \"Moved Permanently\",\n  302: \"Found\",\n  303: \"See Other\",\n  304: \"Not Modified\",\n  305: \"Use Proxy\",\n  307: \"Temporary Redirect\",\n  400: \"Bad Request\",\n  401: \"Unauthorized\",\n  402: \"Payment Required\",\n  403: \"Forbidden\",\n  404: \"Not Found\",\n  405: \"Method Not Allowed\",\n  406: \"Not Acceptable\",\n  407: \"Proxy Authentication Required\",\n  408: \"Request Timeout\",\n  409: \"Conflict\",\n  410: \"Gone\",\n  411: \"Length Required\",\n  412: \"Precondition Failed\",\n  413: \"Request Entity Too Large\",\n  414: \"Request-URI Too Long\",\n  415: \"Unsupported Media Type\",\n  416: \"Requested Range Not Satisfiable\",\n  417: \"Expectation Failed\",\n  422: \"Unprocessable Entity\",\n  500: \"Internal Server Error\",\n  501: \"Not Implemented\",\n  502: \"Bad Gateway\",\n  503: \"Service Unavailable\",\n  504: \"Gateway Timeout\",\n  505: \"HTTP Version Not Supported\"\n};\n/*\n  Cross-browser XML parsing. Used to turn\n  XML responses into Document objects\n  Borrowed from JSpec\n*/\n\nfunction parseXML(text) {\n  var xmlDoc;\n\n  if (typeof DOMParser != \"undefined\") {\n    var parser = new DOMParser();\n    xmlDoc = parser.parseFromString(text, \"text/xml\");\n  } else {\n    xmlDoc = new ActiveXObject(\"Microsoft.XMLDOM\");\n    xmlDoc.async = \"false\";\n    xmlDoc.loadXML(text);\n  }\n\n  return xmlDoc;\n}\n/*\n  Without mocking, the native XMLHttpRequest object will throw\n  an error when attempting to set these headers. We match this behavior.\n*/\n\n\nvar unsafeHeaders = {\n  \"Accept-Charset\": true,\n  \"Accept-Encoding\": true,\n  \"Connection\": true,\n  \"Content-Length\": true,\n  \"Cookie\": true,\n  \"Cookie2\": true,\n  \"Content-Transfer-Encoding\": true,\n  \"Date\": true,\n  \"Expect\": true,\n  \"Host\": true,\n  \"Keep-Alive\": true,\n  \"Referer\": true,\n  \"TE\": true,\n  \"Trailer\": true,\n  \"Transfer-Encoding\": true,\n  \"Upgrade\": true,\n  \"User-Agent\": true,\n  \"Via\": true\n};\n/*\n  Adds an \"event\" onto the fake xhr object\n  that just calls the same-named method. This is\n  in case a library adds callbacks for these events.\n*/\n\nfunction _addEventListener(eventName, xhr) {\n  xhr.addEventListener(eventName, function (event) {\n    var listener = xhr[\"on\" + eventName];\n\n    if (listener && typeof listener == \"function\") {\n      listener.call(event.target, event);\n    }\n  });\n}\n\nfunction EventedObject() {\n  this._eventListeners = {};\n  var events = [\"loadstart\", \"progress\", \"load\", \"abort\", \"loadend\"];\n\n  for (var i = events.length - 1; i >= 0; i--) {\n    _addEventListener(events[i], this);\n  }\n}\n\n;\nEventedObject.prototype = {\n  /*\n    Duplicates the behavior of native XMLHttpRequest's addEventListener function\n  */\n  addEventListener: function addEventListener(event, listener) {\n    this._eventListeners[event] = this._eventListeners[event] || [];\n\n    this._eventListeners[event].push(listener);\n  },\n\n  /*\n    Duplicates the behavior of native XMLHttpRequest's removeEventListener function\n  */\n  removeEventListener: function removeEventListener(event, listener) {\n    var listeners = this._eventListeners[event] || [];\n\n    for (var i = 0, l = listeners.length; i < l; ++i) {\n      if (listeners[i] == listener) {\n        return listeners.splice(i, 1);\n      }\n    }\n  },\n\n  /*\n    Duplicates the behavior of native XMLHttpRequest's dispatchEvent function\n  */\n  dispatchEvent: function dispatchEvent(event) {\n    var type = event.type;\n    var listeners = this._eventListeners[type] || [];\n\n    for (var i = 0; i < listeners.length; i++) {\n      if (typeof listeners[i] == \"function\") {\n        listeners[i].call(this, event);\n      } else {\n        listeners[i].handleEvent(event);\n      }\n    }\n\n    return !!event.defaultPrevented;\n  },\n\n  /*\n    Triggers an `onprogress` event with the given parameters.\n  */\n  _progress: function _progress(lengthComputable, loaded, total) {\n    var event = new _Event('progress');\n    event.target = this;\n    event.lengthComputable = lengthComputable;\n    event.loaded = loaded;\n    event.total = total;\n    this.dispatchEvent(event);\n  }\n};\n/*\n  Constructor for a fake window.XMLHttpRequest\n*/\n\nfunction FakeXMLHttpRequest() {\n  EventedObject.call(this);\n  this.readyState = FakeXMLHttpRequest.UNSENT;\n  this.requestHeaders = {};\n  this.requestBody = null;\n  this.status = 0;\n  this.statusText = \"\";\n  this.upload = new EventedObject();\n}\n\nFakeXMLHttpRequest.prototype = new EventedObject(); // These status codes are available on the native XMLHttpRequest\n// object, so we match that here in case a library is relying on them.\n\nFakeXMLHttpRequest.UNSENT = 0;\nFakeXMLHttpRequest.OPENED = 1;\nFakeXMLHttpRequest.HEADERS_RECEIVED = 2;\nFakeXMLHttpRequest.LOADING = 3;\nFakeXMLHttpRequest.DONE = 4;\nvar FakeXMLHttpRequestProto = {\n  UNSENT: 0,\n  OPENED: 1,\n  HEADERS_RECEIVED: 2,\n  LOADING: 3,\n  DONE: 4,\n  async: true,\n  withCredentials: false,\n\n  /*\n    Duplicates the behavior of native XMLHttpRequest's open function\n  */\n  open: function open(method, url, async, username, password) {\n    this.method = method;\n    this.url = url;\n    this.async = typeof async == \"boolean\" ? async : true;\n    this.username = username;\n    this.password = password;\n    this.responseText = null;\n    this.response = this.responseText;\n    this.responseXML = null;\n    this.responseURL = url;\n    this.requestHeaders = {};\n    this.sendFlag = false;\n\n    this._readyStateChange(FakeXMLHttpRequest.OPENED);\n  },\n\n  /*\n    Duplicates the behavior of native XMLHttpRequest's setRequestHeader function\n  */\n  setRequestHeader: function setRequestHeader(header, value) {\n    verifyState(this);\n\n    if (unsafeHeaders[header] || /^(Sec-|Proxy-)/.test(header)) {\n      throw new Error(\"Refused to set unsafe header \\\"\" + header + \"\\\"\");\n    }\n\n    if (this.requestHeaders[header]) {\n      this.requestHeaders[header] += \",\" + value;\n    } else {\n      this.requestHeaders[header] = value;\n    }\n  },\n\n  /*\n    Duplicates the behavior of native XMLHttpRequest's send function\n  */\n  send: function send(data) {\n    verifyState(this);\n\n    if (!/^(get|head)$/i.test(this.method)) {\n      var hasContentTypeHeader = false;\n      Object.keys(this.requestHeaders).forEach(function (key) {\n        if (key.toLowerCase() === 'content-type') {\n          hasContentTypeHeader = true;\n        }\n      });\n\n      if (!hasContentTypeHeader && !(data || '').toString().match('FormData')) {\n        this.requestHeaders[\"Content-Type\"] = \"text/plain;charset=UTF-8\";\n      }\n\n      this.requestBody = data;\n    }\n\n    this.errorFlag = false;\n    this.sendFlag = this.async;\n\n    this._readyStateChange(FakeXMLHttpRequest.OPENED);\n\n    if (typeof this.onSend == \"function\") {\n      this.onSend(this);\n    }\n\n    this.dispatchEvent(new _Event(\"loadstart\", false, false, this));\n  },\n\n  /*\n    Duplicates the behavior of native XMLHttpRequest's abort function\n  */\n  abort: function abort() {\n    this.aborted = true;\n    this.responseText = null;\n    this.response = this.responseText;\n    this.errorFlag = true;\n    this.requestHeaders = {};\n    this.dispatchEvent(new _Event(\"abort\", false, false, this));\n\n    if (this.readyState > FakeXMLHttpRequest.UNSENT && this.sendFlag) {\n      this._readyStateChange(FakeXMLHttpRequest.UNSENT);\n\n      this.sendFlag = false;\n    }\n\n    if (typeof this.onerror === \"function\") {\n      this.onerror();\n    }\n  },\n\n  /*\n    Duplicates the behavior of native XMLHttpRequest's getResponseHeader function\n  */\n  getResponseHeader: function getResponseHeader(header) {\n    if (this.readyState < FakeXMLHttpRequest.HEADERS_RECEIVED) {\n      return null;\n    }\n\n    if (/^Set-Cookie2?$/i.test(header)) {\n      return null;\n    }\n\n    header = header.toLowerCase();\n\n    for (var h in this.responseHeaders) {\n      if (h.toLowerCase() == header) {\n        return this.responseHeaders[h];\n      }\n    }\n\n    return null;\n  },\n\n  /*\n    Duplicates the behavior of native XMLHttpRequest's getAllResponseHeaders function\n  */\n  getAllResponseHeaders: function getAllResponseHeaders() {\n    if (this.readyState < FakeXMLHttpRequest.HEADERS_RECEIVED) {\n      return \"\";\n    }\n\n    var headers = \"\";\n\n    for (var header in this.responseHeaders) {\n      if (this.responseHeaders.hasOwnProperty(header) && !/^Set-Cookie2?$/i.test(header)) {\n        headers += header + \": \" + this.responseHeaders[header] + \"\\r\\n\";\n      }\n    }\n\n    return headers;\n  },\n\n  /*\n   Duplicates the behavior of native XMLHttpRequest's overrideMimeType function\n   */\n  overrideMimeType: function overrideMimeType(mimeType) {\n    if (typeof mimeType === \"string\") {\n      this.forceMimeType = mimeType.toLowerCase();\n    }\n  },\n\n  /*\n    Places a FakeXMLHttpRequest object into the passed\n    state.\n  */\n  _readyStateChange: function _readyStateChange(state) {\n    this.readyState = state;\n\n    if (typeof this.onreadystatechange == \"function\") {\n      this.onreadystatechange(new _Event(\"readystatechange\"));\n    }\n\n    this.dispatchEvent(new _Event(\"readystatechange\"));\n\n    if (this.readyState == FakeXMLHttpRequest.DONE) {\n      this.dispatchEvent(new _Event(\"load\", false, false, this));\n    }\n\n    if (this.readyState == FakeXMLHttpRequest.UNSENT || this.readyState == FakeXMLHttpRequest.DONE) {\n      this.dispatchEvent(new _Event(\"loadend\", false, false, this));\n    }\n  },\n\n  /*\n    Sets the FakeXMLHttpRequest object's response headers and\n    places the object into readyState 2\n  */\n  _setResponseHeaders: function _setResponseHeaders(headers) {\n    this.responseHeaders = {};\n\n    for (var header in headers) {\n      if (headers.hasOwnProperty(header)) {\n        this.responseHeaders[header] = headers[header];\n      }\n    }\n\n    if (this.forceMimeType) {\n      this.responseHeaders['Content-Type'] = this.forceMimeType;\n    }\n\n    if (this.async) {\n      this._readyStateChange(FakeXMLHttpRequest.HEADERS_RECEIVED);\n    } else {\n      this.readyState = FakeXMLHttpRequest.HEADERS_RECEIVED;\n    }\n  },\n\n  /*\n    Sets the FakeXMLHttpRequest object's response body and\n    if body text is XML, sets responseXML to parsed document\n    object\n  */\n  _setResponseBody: function _setResponseBody(body) {\n    verifyRequestSent(this);\n    verifyHeadersReceived(this);\n    verifyResponseBodyType(body);\n    var chunkSize = this.chunkSize || 10;\n    var index = 0;\n    this.responseText = \"\";\n    this.response = this.responseText;\n\n    do {\n      if (this.async) {\n        this._readyStateChange(FakeXMLHttpRequest.LOADING);\n      }\n\n      this.responseText += body.substring(index, index + chunkSize);\n      this.response = this.responseText;\n      index += chunkSize;\n    } while (index < body.length);\n\n    var type = this.getResponseHeader(\"Content-Type\");\n\n    if (this.responseText && (!type || /(text\\/xml)|(application\\/xml)|(\\+xml)/.test(type))) {\n      try {\n        this.responseXML = parseXML(this.responseText);\n      } catch (e) {// Unable to parse XML - no biggie\n      }\n    }\n\n    if (this.async) {\n      this._readyStateChange(FakeXMLHttpRequest.DONE);\n    } else {\n      this.readyState = FakeXMLHttpRequest.DONE;\n    }\n  },\n\n  /*\n    Forces a response on to the FakeXMLHttpRequest object.\n     This is the public API for faking responses. This function\n    takes a number status, headers object, and string body:\n     ```\n    xhr.respond(404, {Content-Type: 'text/plain'}, \"Sorry. This object was not found.\")\n     ```\n  */\n  respond: function respond(status, headers, body) {\n    this._setResponseHeaders(headers || {});\n\n    this.status = typeof status == \"number\" ? status : 200;\n    this.statusText = httpStatusCodes[this.status];\n\n    this._setResponseBody(body || \"\");\n  }\n};\n\nfor (var property in FakeXMLHttpRequestProto) {\n  FakeXMLHttpRequest.prototype[property] = FakeXMLHttpRequestProto[property];\n}\n\nfunction verifyState(xhr) {\n  if (xhr.readyState !== FakeXMLHttpRequest.OPENED) {\n    throw new Error(\"INVALID_STATE_ERR\");\n  }\n\n  if (xhr.sendFlag) {\n    throw new Error(\"INVALID_STATE_ERR\");\n  }\n}\n\nfunction verifyRequestSent(xhr) {\n  if (xhr.readyState == FakeXMLHttpRequest.DONE) {\n    throw new Error(\"Request done\");\n  }\n}\n\nfunction verifyHeadersReceived(xhr) {\n  if (xhr.async && xhr.readyState != FakeXMLHttpRequest.HEADERS_RECEIVED) {\n    throw new Error(\"No headers received\");\n  }\n}\n\nfunction verifyResponseBodyType(body) {\n  if (typeof body != \"string\") {\n    var error = new Error(\"Attempted to respond to fake XMLHttpRequest with \" + body + \", which is not a string.\");\n    error.name = \"InvalidBodyException\";\n    throw error;\n  }\n}\n\nexport default FakeXMLHttpRequest;","map":{"version":3,"sources":["/home/muhibullahkamali/GitHub/React-redux/Redux-2020/Mirage-Api-with-redux/node_modules/fake-xml-http-request/src/fake-xml-http-request.js"],"names":["_Event","Event","type","bubbles","cancelable","target","prototype","stopPropagation","preventDefault","defaultPrevented","httpStatusCodes","parseXML","text","xmlDoc","DOMParser","parser","parseFromString","ActiveXObject","async","loadXML","unsafeHeaders","_addEventListener","eventName","xhr","addEventListener","event","listener","call","EventedObject","_eventListeners","events","i","length","push","removeEventListener","listeners","l","splice","dispatchEvent","handleEvent","_progress","lengthComputable","loaded","total","FakeXMLHttpRequest","readyState","UNSENT","requestHeaders","requestBody","status","statusText","upload","OPENED","HEADERS_RECEIVED","LOADING","DONE","FakeXMLHttpRequestProto","withCredentials","open","method","url","username","password","responseText","response","responseXML","responseURL","sendFlag","_readyStateChange","setRequestHeader","header","value","verifyState","test","Error","send","data","hasContentTypeHeader","Object","keys","forEach","key","toLowerCase","toString","match","errorFlag","onSend","abort","aborted","onerror","getResponseHeader","h","responseHeaders","getAllResponseHeaders","headers","hasOwnProperty","overrideMimeType","mimeType","forceMimeType","state","onreadystatechange","_setResponseHeaders","_setResponseBody","body","verifyRequestSent","verifyHeadersReceived","verifyResponseBodyType","chunkSize","index","substring","e","respond","property","error","name"],"mappings":"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","sourcesContent":["/**\n * Minimal Event interface implementation\n *\n * Original implementation by Sven Fuchs: https://gist.github.com/995028\n * Modifications and tests by Christian Johansen.\n *\n * @author Sven Fuchs (svenfuchs@artweb-design.de)\n * @author Christian Johansen (christian@cjohansen.no)\n * @license BSD\n *\n * Copyright (c) 2011 Sven Fuchs, Christian Johansen\n */\n\nvar _Event = function Event(type, bubbles, cancelable, target) {\n  this.type = type;\n  this.bubbles = bubbles;\n  this.cancelable = cancelable;\n  this.target = target;\n};\n\n_Event.prototype = {\n  stopPropagation: function () {},\n  preventDefault: function () {\n    this.defaultPrevented = true;\n  }\n};\n\n/*\n  Used to set the statusText property of an xhr object\n*/\nvar httpStatusCodes = {\n  100: \"Continue\",\n  101: \"Switching Protocols\",\n  200: \"OK\",\n  201: \"Created\",\n  202: \"Accepted\",\n  203: \"Non-Authoritative Information\",\n  204: \"No Content\",\n  205: \"Reset Content\",\n  206: \"Partial Content\",\n  300: \"Multiple Choice\",\n  301: \"Moved Permanently\",\n  302: \"Found\",\n  303: \"See Other\",\n  304: \"Not Modified\",\n  305: \"Use Proxy\",\n  307: \"Temporary Redirect\",\n  400: \"Bad Request\",\n  401: \"Unauthorized\",\n  402: \"Payment Required\",\n  403: \"Forbidden\",\n  404: \"Not Found\",\n  405: \"Method Not Allowed\",\n  406: \"Not Acceptable\",\n  407: \"Proxy Authentication Required\",\n  408: \"Request Timeout\",\n  409: \"Conflict\",\n  410: \"Gone\",\n  411: \"Length Required\",\n  412: \"Precondition Failed\",\n  413: \"Request Entity Too Large\",\n  414: \"Request-URI Too Long\",\n  415: \"Unsupported Media Type\",\n  416: \"Requested Range Not Satisfiable\",\n  417: \"Expectation Failed\",\n  422: \"Unprocessable Entity\",\n  500: \"Internal Server Error\",\n  501: \"Not Implemented\",\n  502: \"Bad Gateway\",\n  503: \"Service Unavailable\",\n  504: \"Gateway Timeout\",\n  505: \"HTTP Version Not Supported\"\n};\n\n\n/*\n  Cross-browser XML parsing. Used to turn\n  XML responses into Document objects\n  Borrowed from JSpec\n*/\nfunction parseXML(text) {\n  var xmlDoc;\n\n  if (typeof DOMParser != \"undefined\") {\n    var parser = new DOMParser();\n    xmlDoc = parser.parseFromString(text, \"text/xml\");\n  } else {\n    xmlDoc = new ActiveXObject(\"Microsoft.XMLDOM\");\n    xmlDoc.async = \"false\";\n    xmlDoc.loadXML(text);\n  }\n\n  return xmlDoc;\n}\n\n/*\n  Without mocking, the native XMLHttpRequest object will throw\n  an error when attempting to set these headers. We match this behavior.\n*/\nvar unsafeHeaders = {\n  \"Accept-Charset\": true,\n  \"Accept-Encoding\": true,\n  \"Connection\": true,\n  \"Content-Length\": true,\n  \"Cookie\": true,\n  \"Cookie2\": true,\n  \"Content-Transfer-Encoding\": true,\n  \"Date\": true,\n  \"Expect\": true,\n  \"Host\": true,\n  \"Keep-Alive\": true,\n  \"Referer\": true,\n  \"TE\": true,\n  \"Trailer\": true,\n  \"Transfer-Encoding\": true,\n  \"Upgrade\": true,\n  \"User-Agent\": true,\n  \"Via\": true\n};\n\n/*\n  Adds an \"event\" onto the fake xhr object\n  that just calls the same-named method. This is\n  in case a library adds callbacks for these events.\n*/\nfunction _addEventListener(eventName, xhr){\n  xhr.addEventListener(eventName, function (event) {\n    var listener = xhr[\"on\" + eventName];\n\n    if (listener && typeof listener == \"function\") {\n      listener.call(event.target, event);\n    }\n  });\n}\n\nfunction EventedObject() {\n  this._eventListeners = {};\n  var events = [\"loadstart\", \"progress\", \"load\", \"abort\", \"loadend\"];\n  for (var i = events.length - 1; i >= 0; i--) {\n    _addEventListener(events[i], this);\n  }\n};\n\nEventedObject.prototype = {\n  /*\n    Duplicates the behavior of native XMLHttpRequest's addEventListener function\n  */\n  addEventListener: function addEventListener(event, listener) {\n    this._eventListeners[event] = this._eventListeners[event] || [];\n    this._eventListeners[event].push(listener);\n  },\n\n  /*\n    Duplicates the behavior of native XMLHttpRequest's removeEventListener function\n  */\n  removeEventListener: function removeEventListener(event, listener) {\n    var listeners = this._eventListeners[event] || [];\n\n    for (var i = 0, l = listeners.length; i < l; ++i) {\n      if (listeners[i] == listener) {\n        return listeners.splice(i, 1);\n      }\n    }\n  },\n\n  /*\n    Duplicates the behavior of native XMLHttpRequest's dispatchEvent function\n  */\n  dispatchEvent: function dispatchEvent(event) {\n    var type = event.type;\n    var listeners = this._eventListeners[type] || [];\n\n    for (var i = 0; i < listeners.length; i++) {\n      if (typeof listeners[i] == \"function\") {\n        listeners[i].call(this, event);\n      } else {\n        listeners[i].handleEvent(event);\n      }\n    }\n\n    return !!event.defaultPrevented;\n  },\n\n  /*\n    Triggers an `onprogress` event with the given parameters.\n  */\n  _progress: function _progress(lengthComputable, loaded, total) {\n    var event = new _Event('progress');\n    event.target = this;\n    event.lengthComputable = lengthComputable;\n    event.loaded = loaded;\n    event.total = total;\n    this.dispatchEvent(event);\n  }\n}\n\n/*\n  Constructor for a fake window.XMLHttpRequest\n*/\nfunction FakeXMLHttpRequest() {\n  EventedObject.call(this);\n  this.readyState = FakeXMLHttpRequest.UNSENT;\n  this.requestHeaders = {};\n  this.requestBody = null;\n  this.status = 0;\n  this.statusText = \"\";\n  this.upload = new EventedObject();\n}\n\nFakeXMLHttpRequest.prototype = new EventedObject();\n\n// These status codes are available on the native XMLHttpRequest\n// object, so we match that here in case a library is relying on them.\nFakeXMLHttpRequest.UNSENT = 0;\nFakeXMLHttpRequest.OPENED = 1;\nFakeXMLHttpRequest.HEADERS_RECEIVED = 2;\nFakeXMLHttpRequest.LOADING = 3;\nFakeXMLHttpRequest.DONE = 4;\n\nvar FakeXMLHttpRequestProto = {\n  UNSENT: 0,\n  OPENED: 1,\n  HEADERS_RECEIVED: 2,\n  LOADING: 3,\n  DONE: 4,\n  async: true,\n  withCredentials: false,\n\n  /*\n    Duplicates the behavior of native XMLHttpRequest's open function\n  */\n  open: function open(method, url, async, username, password) {\n    this.method = method;\n    this.url = url;\n    this.async = typeof async == \"boolean\" ? async : true;\n    this.username = username;\n    this.password = password;\n    this.responseText = null;\n    this.response = this.responseText;\n    this.responseXML = null;\n    this.responseURL = url;\n    this.requestHeaders = {};\n    this.sendFlag = false;\n    this._readyStateChange(FakeXMLHttpRequest.OPENED);\n  },\n\n  /*\n    Duplicates the behavior of native XMLHttpRequest's setRequestHeader function\n  */\n  setRequestHeader: function setRequestHeader(header, value) {\n    verifyState(this);\n\n    if (unsafeHeaders[header] || /^(Sec-|Proxy-)/.test(header)) {\n      throw new Error(\"Refused to set unsafe header \\\"\" + header + \"\\\"\");\n    }\n\n    if (this.requestHeaders[header]) {\n      this.requestHeaders[header] += \",\" + value;\n    } else {\n      this.requestHeaders[header] = value;\n    }\n  },\n\n  /*\n    Duplicates the behavior of native XMLHttpRequest's send function\n  */\n  send: function send(data) {\n    verifyState(this);\n\n    if (!/^(get|head)$/i.test(this.method)) {\n      var hasContentTypeHeader = false\n\n      Object.keys(this.requestHeaders).forEach(function (key) {\n        if (key.toLowerCase() === 'content-type') {\n          hasContentTypeHeader = true;\n        }\n      });\n\n      if (!hasContentTypeHeader && !(data || '').toString().match('FormData')) {\n        this.requestHeaders[\"Content-Type\"] = \"text/plain;charset=UTF-8\";\n      }\n\n      this.requestBody = data;\n    }\n\n    this.errorFlag = false;\n    this.sendFlag = this.async;\n    this._readyStateChange(FakeXMLHttpRequest.OPENED);\n\n    if (typeof this.onSend == \"function\") {\n      this.onSend(this);\n    }\n\n    this.dispatchEvent(new _Event(\"loadstart\", false, false, this));\n  },\n\n  /*\n    Duplicates the behavior of native XMLHttpRequest's abort function\n  */\n  abort: function abort() {\n    this.aborted = true;\n    this.responseText = null;\n    this.response = this.responseText;\n    this.errorFlag = true;\n    this.requestHeaders = {};\n\n    this.dispatchEvent(new _Event(\"abort\", false, false, this));\n\n    if (this.readyState > FakeXMLHttpRequest.UNSENT && this.sendFlag) {\n      this._readyStateChange(FakeXMLHttpRequest.UNSENT);\n      this.sendFlag = false;\n    }\n\n    if (typeof this.onerror === \"function\") {\n      this.onerror();\n    }\n  },\n\n  /*\n    Duplicates the behavior of native XMLHttpRequest's getResponseHeader function\n  */\n  getResponseHeader: function getResponseHeader(header) {\n    if (this.readyState < FakeXMLHttpRequest.HEADERS_RECEIVED) {\n      return null;\n    }\n\n    if (/^Set-Cookie2?$/i.test(header)) {\n      return null;\n    }\n\n    header = header.toLowerCase();\n\n    for (var h in this.responseHeaders) {\n      if (h.toLowerCase() == header) {\n        return this.responseHeaders[h];\n      }\n    }\n\n    return null;\n  },\n\n  /*\n    Duplicates the behavior of native XMLHttpRequest's getAllResponseHeaders function\n  */\n  getAllResponseHeaders: function getAllResponseHeaders() {\n    if (this.readyState < FakeXMLHttpRequest.HEADERS_RECEIVED) {\n      return \"\";\n    }\n\n    var headers = \"\";\n\n    for (var header in this.responseHeaders) {\n      if (this.responseHeaders.hasOwnProperty(header) && !/^Set-Cookie2?$/i.test(header)) {\n        headers += header + \": \" + this.responseHeaders[header] + \"\\r\\n\";\n      }\n    }\n\n    return headers;\n  },\n\n  /*\n   Duplicates the behavior of native XMLHttpRequest's overrideMimeType function\n   */\n  overrideMimeType: function overrideMimeType(mimeType) {\n    if (typeof mimeType === \"string\") {\n      this.forceMimeType = mimeType.toLowerCase();\n    }\n  },\n\n\n  /*\n    Places a FakeXMLHttpRequest object into the passed\n    state.\n  */\n  _readyStateChange: function _readyStateChange(state) {\n    this.readyState = state;\n\n    if (typeof this.onreadystatechange == \"function\") {\n      this.onreadystatechange(new _Event(\"readystatechange\"));\n    }\n\n    this.dispatchEvent(new _Event(\"readystatechange\"));\n\n    if (this.readyState == FakeXMLHttpRequest.DONE) {\n      this.dispatchEvent(new _Event(\"load\", false, false, this));\n    }\n    if (this.readyState == FakeXMLHttpRequest.UNSENT || this.readyState == FakeXMLHttpRequest.DONE) {\n      this.dispatchEvent(new _Event(\"loadend\", false, false, this));\n    }\n  },\n\n\n  /*\n    Sets the FakeXMLHttpRequest object's response headers and\n    places the object into readyState 2\n  */\n  _setResponseHeaders: function _setResponseHeaders(headers) {\n    this.responseHeaders = {};\n\n    for (var header in headers) {\n      if (headers.hasOwnProperty(header)) {\n          this.responseHeaders[header] = headers[header];\n      }\n    }\n\n    if (this.forceMimeType) {\n      this.responseHeaders['Content-Type'] = this.forceMimeType;\n    }\n\n    if (this.async) {\n      this._readyStateChange(FakeXMLHttpRequest.HEADERS_RECEIVED);\n    } else {\n      this.readyState = FakeXMLHttpRequest.HEADERS_RECEIVED;\n    }\n  },\n\n  /*\n    Sets the FakeXMLHttpRequest object's response body and\n    if body text is XML, sets responseXML to parsed document\n    object\n  */\n  _setResponseBody: function _setResponseBody(body) {\n    verifyRequestSent(this);\n    verifyHeadersReceived(this);\n    verifyResponseBodyType(body);\n\n    var chunkSize = this.chunkSize || 10;\n    var index = 0;\n    this.responseText = \"\";\n    this.response = this.responseText;\n\n    do {\n      if (this.async) {\n        this._readyStateChange(FakeXMLHttpRequest.LOADING);\n      }\n\n      this.responseText += body.substring(index, index + chunkSize);\n      this.response = this.responseText;\n      index += chunkSize;\n    } while (index < body.length);\n\n    var type = this.getResponseHeader(\"Content-Type\");\n\n    if (this.responseText && (!type || /(text\\/xml)|(application\\/xml)|(\\+xml)/.test(type))) {\n      try {\n        this.responseXML = parseXML(this.responseText);\n      } catch (e) {\n        // Unable to parse XML - no biggie\n      }\n    }\n\n    if (this.async) {\n      this._readyStateChange(FakeXMLHttpRequest.DONE);\n    } else {\n      this.readyState = FakeXMLHttpRequest.DONE;\n    }\n  },\n\n  /*\n    Forces a response on to the FakeXMLHttpRequest object.\n\n    This is the public API for faking responses. This function\n    takes a number status, headers object, and string body:\n\n    ```\n    xhr.respond(404, {Content-Type: 'text/plain'}, \"Sorry. This object was not found.\")\n\n    ```\n  */\n  respond: function respond(status, headers, body) {\n    this._setResponseHeaders(headers || {});\n    this.status = typeof status == \"number\" ? status : 200;\n    this.statusText = httpStatusCodes[this.status];\n    this._setResponseBody(body || \"\");\n  }\n};\n\nfor (var property in FakeXMLHttpRequestProto) {\n  FakeXMLHttpRequest.prototype[property] = FakeXMLHttpRequestProto[property];\n}\n\nfunction verifyState(xhr) {\n  if (xhr.readyState !== FakeXMLHttpRequest.OPENED) {\n    throw new Error(\"INVALID_STATE_ERR\");\n  }\n\n  if (xhr.sendFlag) {\n    throw new Error(\"INVALID_STATE_ERR\");\n  }\n}\n\n\nfunction verifyRequestSent(xhr) {\n    if (xhr.readyState == FakeXMLHttpRequest.DONE) {\n        throw new Error(\"Request done\");\n    }\n}\n\nfunction verifyHeadersReceived(xhr) {\n    if (xhr.async && xhr.readyState != FakeXMLHttpRequest.HEADERS_RECEIVED) {\n        throw new Error(\"No headers received\");\n    }\n}\n\nfunction verifyResponseBodyType(body) {\n    if (typeof body != \"string\") {\n        var error = new Error(\"Attempted to respond to fake XMLHttpRequest with \" +\n                             body + \", which is not a string.\");\n        error.name = \"InvalidBodyException\";\n        throw error;\n    }\n}\nexport default FakeXMLHttpRequest;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var createObject = Object.create;\n\nfunction createMap() {\n  var map = createObject(null);\n  map[\"__\"] = undefined;\n  delete map[\"__\"];\n  return map;\n}\n\nvar Target = function Target(path, matcher, delegate) {\n  this.path = path;\n  this.matcher = matcher;\n  this.delegate = delegate;\n};\n\nTarget.prototype.to = function to(target, callback) {\n  var delegate = this.delegate;\n\n  if (delegate && delegate.willAddRoute) {\n    target = delegate.willAddRoute(this.matcher.target, target);\n  }\n\n  this.matcher.add(this.path, target);\n\n  if (callback) {\n    if (callback.length === 0) {\n      throw new Error(\"You must have an argument in the function passed to `to`\");\n    }\n\n    this.matcher.addChild(this.path, target, callback, this.delegate);\n  }\n};\n\nvar Matcher = function Matcher(target) {\n  this.routes = createMap();\n  this.children = createMap();\n  this.target = target;\n};\n\nMatcher.prototype.add = function add(path, target) {\n  this.routes[path] = target;\n};\n\nMatcher.prototype.addChild = function addChild(path, target, callback, delegate) {\n  var matcher = new Matcher(target);\n  this.children[path] = matcher;\n  var match = generateMatch(path, matcher, delegate);\n\n  if (delegate && delegate.contextEntered) {\n    delegate.contextEntered(target, match);\n  }\n\n  callback(match);\n};\n\nfunction generateMatch(startingPath, matcher, delegate) {\n  function match(path, callback) {\n    var fullPath = startingPath + path;\n\n    if (callback) {\n      callback(generateMatch(fullPath, matcher, delegate));\n    } else {\n      return new Target(fullPath, matcher, delegate);\n    }\n  }\n\n  return match;\n}\n\nfunction addRoute(routeArray, path, handler) {\n  var len = 0;\n\n  for (var i = 0; i < routeArray.length; i++) {\n    len += routeArray[i].path.length;\n  }\n\n  path = path.substr(len);\n  var route = {\n    path: path,\n    handler: handler\n  };\n  routeArray.push(route);\n}\n\nfunction eachRoute(baseRoute, matcher, callback, binding) {\n  var routes = matcher.routes;\n  var paths = Object.keys(routes);\n\n  for (var i = 0; i < paths.length; i++) {\n    var path = paths[i];\n    var routeArray = baseRoute.slice();\n    addRoute(routeArray, path, routes[path]);\n    var nested = matcher.children[path];\n\n    if (nested) {\n      eachRoute(routeArray, nested, callback, binding);\n    } else {\n      callback.call(binding, routeArray);\n    }\n  }\n}\n\nvar map = function (callback, addRouteCallback) {\n  var matcher = new Matcher();\n  callback(generateMatch(\"\", matcher, this.delegate));\n  eachRoute([], matcher, function (routes) {\n    if (addRouteCallback) {\n      addRouteCallback(this, routes);\n    } else {\n      this.add(routes);\n    }\n  }, this);\n}; // Normalizes percent-encoded values in `path` to upper-case and decodes percent-encoded\n// values that are not reserved (i.e., unicode characters, emoji, etc). The reserved\n// chars are \"/\" and \"%\".\n// Safe to call multiple times on the same path.\n// Normalizes percent-encoded values in `path` to upper-case and decodes percent-encoded\n\n\nfunction normalizePath(path) {\n  return path.split(\"/\").map(normalizeSegment).join(\"/\");\n} // We want to ensure the characters \"%\" and \"/\" remain in percent-encoded\n// form when normalizing paths, so replace them with their encoded form after\n// decoding the rest of the path\n\n\nvar SEGMENT_RESERVED_CHARS = /%|\\//g;\n\nfunction normalizeSegment(segment) {\n  if (segment.length < 3 || segment.indexOf(\"%\") === -1) {\n    return segment;\n  }\n\n  return decodeURIComponent(segment).replace(SEGMENT_RESERVED_CHARS, encodeURIComponent);\n} // We do not want to encode these characters when generating dynamic path segments\n// See https://tools.ietf.org/html/rfc3986#section-3.3\n// sub-delims: \"!\", \"$\", \"&\", \"'\", \"(\", \")\", \"*\", \"+\", \",\", \";\", \"=\"\n// others allowed by RFC 3986: \":\", \"@\"\n//\n// First encode the entire path segment, then decode any of the encoded special chars.\n//\n// The chars \"!\", \"'\", \"(\", \")\", \"*\" do not get changed by `encodeURIComponent`,\n// so the possible encoded chars are:\n// ['%24', '%26', '%2B', '%2C', '%3B', '%3D', '%3A', '%40'].\n\n\nvar PATH_SEGMENT_ENCODINGS = /%(?:2(?:4|6|B|C)|3(?:B|D|A)|40)/g;\n\nfunction encodePathSegment(str) {\n  return encodeURIComponent(str).replace(PATH_SEGMENT_ENCODINGS, decodeURIComponent);\n}\n\nvar escapeRegex = /(\\/|\\.|\\*|\\+|\\?|\\||\\(|\\)|\\[|\\]|\\{|\\}|\\\\)/g;\nvar isArray = Array.isArray;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction getParam(params, key) {\n  if (typeof params !== \"object\" || params === null) {\n    throw new Error(\"You must pass an object as the second argument to `generate`.\");\n  }\n\n  if (!hasOwnProperty.call(params, key)) {\n    throw new Error(\"You must provide param `\" + key + \"` to `generate`.\");\n  }\n\n  var value = params[key];\n  var str = typeof value === \"string\" ? value : \"\" + value;\n\n  if (str.length === 0) {\n    throw new Error(\"You must provide a param `\" + key + \"`.\");\n  }\n\n  return str;\n}\n\nvar eachChar = [];\n\neachChar[0\n/* Static */\n] = function (segment, currentState) {\n  var state = currentState;\n  var value = segment.value;\n\n  for (var i = 0; i < value.length; i++) {\n    var ch = value.charCodeAt(i);\n    state = state.put(ch, false, false);\n  }\n\n  return state;\n};\n\neachChar[1\n/* Dynamic */\n] = function (_, currentState) {\n  return currentState.put(47\n  /* SLASH */\n  , true, true);\n};\n\neachChar[2\n/* Star */\n] = function (_, currentState) {\n  return currentState.put(-1\n  /* ANY */\n  , false, true);\n};\n\neachChar[4\n/* Epsilon */\n] = function (_, currentState) {\n  return currentState;\n};\n\nvar regex = [];\n\nregex[0\n/* Static */\n] = function (segment) {\n  return segment.value.replace(escapeRegex, \"\\\\$1\");\n};\n\nregex[1\n/* Dynamic */\n] = function () {\n  return \"([^/]+)\";\n};\n\nregex[2\n/* Star */\n] = function () {\n  return \"(.+)\";\n};\n\nregex[4\n/* Epsilon */\n] = function () {\n  return \"\";\n};\n\nvar generate = [];\n\ngenerate[0\n/* Static */\n] = function (segment) {\n  return segment.value;\n};\n\ngenerate[1\n/* Dynamic */\n] = function (segment, params) {\n  var value = getParam(params, segment.value);\n\n  if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS) {\n    return encodePathSegment(value);\n  } else {\n    return value;\n  }\n};\n\ngenerate[2\n/* Star */\n] = function (segment, params) {\n  return getParam(params, segment.value);\n};\n\ngenerate[4\n/* Epsilon */\n] = function () {\n  return \"\";\n};\n\nvar EmptyObject = Object.freeze({});\nvar EmptyArray = Object.freeze([]); // The `names` will be populated with the paramter name for each dynamic/star\n// segment. `shouldDecodes` will be populated with a boolean for each dyanamic/star\n// segment, indicating whether it should be decoded during recognition.\n\nfunction parse(segments, route, types) {\n  // normalize route as not starting with a \"/\". Recognition will\n  // also normalize.\n  if (route.length > 0 && route.charCodeAt(0) === 47\n  /* SLASH */\n  ) {\n      route = route.substr(1);\n    }\n\n  var parts = route.split(\"/\");\n  var names = undefined;\n  var shouldDecodes = undefined;\n\n  for (var i = 0; i < parts.length; i++) {\n    var part = parts[i];\n    var flags = 0;\n    var type = 0;\n\n    if (part === \"\") {\n      type = 4\n      /* Epsilon */\n      ;\n    } else if (part.charCodeAt(0) === 58\n    /* COLON */\n    ) {\n        type = 1\n        /* Dynamic */\n        ;\n      } else if (part.charCodeAt(0) === 42\n    /* STAR */\n    ) {\n        type = 2\n        /* Star */\n        ;\n      } else {\n      type = 0\n      /* Static */\n      ;\n    }\n\n    flags = 2 << type;\n\n    if (flags & 12\n    /* Named */\n    ) {\n        part = part.slice(1);\n        names = names || [];\n        names.push(part);\n        shouldDecodes = shouldDecodes || [];\n        shouldDecodes.push((flags & 4\n        /* Decoded */\n        ) !== 0);\n      }\n\n    if (flags & 14\n    /* Counted */\n    ) {\n        types[type]++;\n      }\n\n    segments.push({\n      type: type,\n      value: normalizeSegment(part)\n    });\n  }\n\n  return {\n    names: names || EmptyArray,\n    shouldDecodes: shouldDecodes || EmptyArray\n  };\n}\n\nfunction isEqualCharSpec(spec, char, negate) {\n  return spec.char === char && spec.negate === negate;\n} // A State has a character specification and (`charSpec`) and a list of possible\n// subsequent states (`nextStates`).\n//\n// If a State is an accepting state, it will also have several additional\n// properties:\n//\n// * `regex`: A regular expression that is used to extract parameters from paths\n//   that reached this accepting state.\n// * `handlers`: Information on how to convert the list of captures into calls\n//   to registered handlers with the specified parameters\n// * `types`: How many static, dynamic or star segments in this route. Used to\n//   decide which route to use if multiple registered routes match a path.\n//\n// Currently, State is implemented naively by looping over `nextStates` and\n// comparing a character specification against a character. A more efficient\n// implementation would use a hash of keys pointing at one or more next states.\n\n\nvar State = function State(states, id, char, negate, repeat) {\n  this.states = states;\n  this.id = id;\n  this.char = char;\n  this.negate = negate;\n  this.nextStates = repeat ? id : null;\n  this.pattern = \"\";\n  this._regex = undefined;\n  this.handlers = undefined;\n  this.types = undefined;\n};\n\nState.prototype.regex = function regex$1() {\n  if (!this._regex) {\n    this._regex = new RegExp(this.pattern);\n  }\n\n  return this._regex;\n};\n\nState.prototype.get = function get(char, negate) {\n  var this$1 = this;\n  var nextStates = this.nextStates;\n\n  if (nextStates === null) {\n    return;\n  }\n\n  if (isArray(nextStates)) {\n    for (var i = 0; i < nextStates.length; i++) {\n      var child = this$1.states[nextStates[i]];\n\n      if (isEqualCharSpec(child, char, negate)) {\n        return child;\n      }\n    }\n  } else {\n    var child$1 = this.states[nextStates];\n\n    if (isEqualCharSpec(child$1, char, negate)) {\n      return child$1;\n    }\n  }\n};\n\nState.prototype.put = function put(char, negate, repeat) {\n  var state; // If the character specification already exists in a child of the current\n  // state, just return that state.\n\n  if (state = this.get(char, negate)) {\n    return state;\n  } // Make a new state for the character spec\n\n\n  var states = this.states;\n  state = new State(states, states.length, char, negate, repeat);\n  states[states.length] = state; // Insert the new state as a child of the current state\n\n  if (this.nextStates == null) {\n    this.nextStates = state.id;\n  } else if (isArray(this.nextStates)) {\n    this.nextStates.push(state.id);\n  } else {\n    this.nextStates = [this.nextStates, state.id];\n  } // Return the new state\n\n\n  return state;\n}; // Find a list of child states matching the next character\n\n\nState.prototype.match = function match(ch) {\n  var this$1 = this;\n  var nextStates = this.nextStates;\n\n  if (!nextStates) {\n    return [];\n  }\n\n  var returned = [];\n\n  if (isArray(nextStates)) {\n    for (var i = 0; i < nextStates.length; i++) {\n      var child = this$1.states[nextStates[i]];\n\n      if (isMatch(child, ch)) {\n        returned.push(child);\n      }\n    }\n  } else {\n    var child$1 = this.states[nextStates];\n\n    if (isMatch(child$1, ch)) {\n      returned.push(child$1);\n    }\n  }\n\n  return returned;\n};\n\nfunction isMatch(spec, char) {\n  return spec.negate ? spec.char !== char && spec.char !== -1\n  /* ANY */\n  : spec.char === char || spec.char === -1\n  /* ANY */\n  ;\n} // This is a somewhat naive strategy, but should work in a lot of cases\n// A better strategy would properly resolve /posts/:id/new and /posts/edit/:id.\n//\n// This strategy generally prefers more static and less dynamic matching.\n// Specifically, it\n//\n//  * prefers fewer stars to more, then\n//  * prefers using stars for less of the match to more, then\n//  * prefers fewer dynamic segments to more, then\n//  * prefers more static segments to more\n\n\nfunction sortSolutions(states) {\n  return states.sort(function (a, b) {\n    var ref = a.types || [0, 0, 0];\n    var astatics = ref[0];\n    var adynamics = ref[1];\n    var astars = ref[2];\n    var ref$1 = b.types || [0, 0, 0];\n    var bstatics = ref$1[0];\n    var bdynamics = ref$1[1];\n    var bstars = ref$1[2];\n\n    if (astars !== bstars) {\n      return astars - bstars;\n    }\n\n    if (astars) {\n      if (astatics !== bstatics) {\n        return bstatics - astatics;\n      }\n\n      if (adynamics !== bdynamics) {\n        return bdynamics - adynamics;\n      }\n    }\n\n    if (adynamics !== bdynamics) {\n      return adynamics - bdynamics;\n    }\n\n    if (astatics !== bstatics) {\n      return bstatics - astatics;\n    }\n\n    return 0;\n  });\n}\n\nfunction recognizeChar(states, ch) {\n  var nextStates = [];\n\n  for (var i = 0, l = states.length; i < l; i++) {\n    var state = states[i];\n    nextStates = nextStates.concat(state.match(ch));\n  }\n\n  return nextStates;\n}\n\nvar RecognizeResults = function RecognizeResults(queryParams) {\n  this.length = 0;\n  this.queryParams = queryParams || {};\n};\n\nRecognizeResults.prototype.splice = Array.prototype.splice;\nRecognizeResults.prototype.slice = Array.prototype.slice;\nRecognizeResults.prototype.push = Array.prototype.push;\n\nfunction findHandler(state, originalPath, queryParams) {\n  var handlers = state.handlers;\n  var regex = state.regex();\n\n  if (!regex || !handlers) {\n    throw new Error(\"state not initialized\");\n  }\n\n  var captures = originalPath.match(regex);\n  var currentCapture = 1;\n  var result = new RecognizeResults(queryParams);\n  result.length = handlers.length;\n\n  for (var i = 0; i < handlers.length; i++) {\n    var handler = handlers[i];\n    var names = handler.names;\n    var shouldDecodes = handler.shouldDecodes;\n    var params = EmptyObject;\n    var isDynamic = false;\n\n    if (names !== EmptyArray && shouldDecodes !== EmptyArray) {\n      for (var j = 0; j < names.length; j++) {\n        isDynamic = true;\n        var name = names[j];\n        var capture = captures && captures[currentCapture++];\n\n        if (params === EmptyObject) {\n          params = {};\n        }\n\n        if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS && shouldDecodes[j]) {\n          params[name] = capture && decodeURIComponent(capture);\n        } else {\n          params[name] = capture;\n        }\n      }\n    }\n\n    result[i] = {\n      handler: handler.handler,\n      params: params,\n      isDynamic: isDynamic\n    };\n  }\n\n  return result;\n}\n\nfunction decodeQueryParamPart(part) {\n  // http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1\n  part = part.replace(/\\+/gm, \"%20\");\n  var result;\n\n  try {\n    result = decodeURIComponent(part);\n  } catch (error) {\n    result = \"\";\n  }\n\n  return result;\n}\n\nvar RouteRecognizer = function RouteRecognizer() {\n  this.names = createMap();\n  var states = [];\n  var state = new State(states, 0, -1\n  /* ANY */\n  , true, false);\n  states[0] = state;\n  this.states = states;\n  this.rootState = state;\n};\n\nRouteRecognizer.prototype.add = function add(routes, options) {\n  var currentState = this.rootState;\n  var pattern = \"^\";\n  var types = [0, 0, 0];\n  var handlers = new Array(routes.length);\n  var allSegments = [];\n  var isEmpty = true;\n  var j = 0;\n\n  for (var i = 0; i < routes.length; i++) {\n    var route = routes[i];\n    var ref = parse(allSegments, route.path, types);\n    var names = ref.names;\n    var shouldDecodes = ref.shouldDecodes; // preserve j so it points to the start of newly added segments\n\n    for (; j < allSegments.length; j++) {\n      var segment = allSegments[j];\n\n      if (segment.type === 4\n      /* Epsilon */\n      ) {\n          continue;\n        }\n\n      isEmpty = false; // Add a \"/\" for the new segment\n\n      currentState = currentState.put(47\n      /* SLASH */\n      , false, false);\n      pattern += \"/\"; // Add a representation of the segment to the NFA and regex\n\n      currentState = eachChar[segment.type](segment, currentState);\n      pattern += regex[segment.type](segment);\n    }\n\n    handlers[i] = {\n      handler: route.handler,\n      names: names,\n      shouldDecodes: shouldDecodes\n    };\n  }\n\n  if (isEmpty) {\n    currentState = currentState.put(47\n    /* SLASH */\n    , false, false);\n    pattern += \"/\";\n  }\n\n  currentState.handlers = handlers;\n  currentState.pattern = pattern + \"$\";\n  currentState.types = types;\n  var name;\n\n  if (typeof options === \"object\" && options !== null && options.as) {\n    name = options.as;\n  }\n\n  if (name) {\n    // if (this.names[name]) {\n    //   throw new Error(\"You may not add a duplicate route named `\" + name + \"`.\");\n    // }\n    this.names[name] = {\n      segments: allSegments,\n      handlers: handlers\n    };\n  }\n};\n\nRouteRecognizer.prototype.handlersFor = function handlersFor(name) {\n  var route = this.names[name];\n\n  if (!route) {\n    throw new Error(\"There is no route named \" + name);\n  }\n\n  var result = new Array(route.handlers.length);\n\n  for (var i = 0; i < route.handlers.length; i++) {\n    var handler = route.handlers[i];\n    result[i] = handler;\n  }\n\n  return result;\n};\n\nRouteRecognizer.prototype.hasRoute = function hasRoute(name) {\n  return !!this.names[name];\n};\n\nRouteRecognizer.prototype.generate = function generate$1(name, params) {\n  var route = this.names[name];\n  var output = \"\";\n\n  if (!route) {\n    throw new Error(\"There is no route named \" + name);\n  }\n\n  var segments = route.segments;\n\n  for (var i = 0; i < segments.length; i++) {\n    var segment = segments[i];\n\n    if (segment.type === 4\n    /* Epsilon */\n    ) {\n        continue;\n      }\n\n    output += \"/\";\n    output += generate[segment.type](segment, params);\n  }\n\n  if (output.charAt(0) !== \"/\") {\n    output = \"/\" + output;\n  }\n\n  if (params && params.queryParams) {\n    output += this.generateQueryString(params.queryParams);\n  }\n\n  return output;\n};\n\nRouteRecognizer.prototype.generateQueryString = function generateQueryString(params) {\n  var pairs = [];\n  var keys = Object.keys(params);\n  keys.sort();\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var value = params[key];\n\n    if (value == null) {\n      continue;\n    }\n\n    var pair = encodeURIComponent(key);\n\n    if (isArray(value)) {\n      for (var j = 0; j < value.length; j++) {\n        var arrayPair = key + \"[]\" + \"=\" + encodeURIComponent(value[j]);\n        pairs.push(arrayPair);\n      }\n    } else {\n      pair += \"=\" + encodeURIComponent(value);\n      pairs.push(pair);\n    }\n  }\n\n  if (pairs.length === 0) {\n    return \"\";\n  }\n\n  return \"?\" + pairs.join(\"&\");\n};\n\nRouteRecognizer.prototype.parseQueryString = function parseQueryString(queryString) {\n  var pairs = queryString.split(\"&\");\n  var queryParams = {};\n\n  for (var i = 0; i < pairs.length; i++) {\n    var pair = pairs[i].split(\"=\"),\n        key = decodeQueryParamPart(pair[0]),\n        keyLength = key.length,\n        isArray = false,\n        value = void 0;\n\n    if (pair.length === 1) {\n      value = \"true\";\n    } else {\n      // Handle arrays\n      if (keyLength > 2 && key.slice(keyLength - 2) === \"[]\") {\n        isArray = true;\n        key = key.slice(0, keyLength - 2);\n\n        if (!queryParams[key]) {\n          queryParams[key] = [];\n        }\n      }\n\n      value = pair[1] ? decodeQueryParamPart(pair[1]) : \"\";\n    }\n\n    if (isArray) {\n      queryParams[key].push(value);\n    } else {\n      queryParams[key] = value;\n    }\n  }\n\n  return queryParams;\n};\n\nRouteRecognizer.prototype.recognize = function recognize(path) {\n  var results;\n  var states = [this.rootState];\n  var queryParams = {};\n  var isSlashDropped = false;\n  var hashStart = path.indexOf(\"#\");\n\n  if (hashStart !== -1) {\n    path = path.substr(0, hashStart);\n  }\n\n  var queryStart = path.indexOf(\"?\");\n\n  if (queryStart !== -1) {\n    var queryString = path.substr(queryStart + 1, path.length);\n    path = path.substr(0, queryStart);\n    queryParams = this.parseQueryString(queryString);\n  }\n\n  if (path.charAt(0) !== \"/\") {\n    path = \"/\" + path;\n  }\n\n  var originalPath = path;\n\n  if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS) {\n    path = normalizePath(path);\n  } else {\n    path = decodeURI(path);\n    originalPath = decodeURI(originalPath);\n  }\n\n  var pathLen = path.length;\n\n  if (pathLen > 1 && path.charAt(pathLen - 1) === \"/\") {\n    path = path.substr(0, pathLen - 1);\n    originalPath = originalPath.substr(0, originalPath.length - 1);\n    isSlashDropped = true;\n  }\n\n  for (var i = 0; i < path.length; i++) {\n    states = recognizeChar(states, path.charCodeAt(i));\n\n    if (!states.length) {\n      break;\n    }\n  }\n\n  var solutions = [];\n\n  for (var i$1 = 0; i$1 < states.length; i$1++) {\n    if (states[i$1].handlers) {\n      solutions.push(states[i$1]);\n    }\n  }\n\n  states = sortSolutions(solutions);\n  var state = solutions[0];\n\n  if (state && state.handlers) {\n    // if a trailing slash was dropped and a star segment is the last segment\n    // specified, put the trailing slash back\n    if (isSlashDropped && state.pattern && state.pattern.slice(-5) === \"(.+)$\") {\n      originalPath = originalPath + \"/\";\n    }\n\n    results = findHandler(state, originalPath, queryParams);\n  }\n\n  return results;\n};\n\nRouteRecognizer.VERSION = \"0.3.4\"; // Set to false to opt-out of encoding and decoding path segments.\n// See https://github.com/tildeio/route-recognizer/pull/55\n\nRouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS = true;\nRouteRecognizer.Normalizer = {\n  normalizeSegment: normalizeSegment,\n  normalizePath: normalizePath,\n  encodePathSegment: encodePathSegment\n};\nRouteRecognizer.prototype.map = map;\nexport default RouteRecognizer;","map":{"version":3,"sources":["route-recognizer/util.ts","route-recognizer/dsl.ts","route-recognizer/normalizer.ts","route-recognizer.ts"],"names":["const","let","this","child","i"],"mappings":"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","sourcesContent":["const createObject = Object.create;\nexport function createMap<T>() {\n  const map: { [key: string]: T | undefined } = createObject(null);\n  map[\"__\"] = undefined;\n  delete map[\"__\"];\n  return map;\n}\n","import { createMap } from \"./util\";\n\nexport interface Delegate {\n  contextEntered?(context: string, route: MatchDSL): void;\n  willAddRoute?(context: string | undefined, route: string): string;\n}\n\nexport type Opaque = {} | void | null | undefined;\n\nexport interface Route {\n  path: string;\n  handler: Opaque;\n  queryParams?: string[];\n}\n\nexport interface RouteRecognizer {\n  delegate: Delegate | undefined;\n  add(routes: Route[]): void;\n}\n\nexport interface MatchCallback {\n  (match: MatchDSL): void;\n}\n\nexport interface MatchDSL {\n  (path: string): ToDSL;\n  (path: string, callback: MatchCallback): void;\n}\n\nexport interface ToDSL {\n  to(name: string, callback?: MatchCallback): void;\n}\n\nclass Target implements ToDSL {\n  path: string;\n  matcher: Matcher;\n  delegate: Delegate | undefined;\n\n  constructor(path: string, matcher: Matcher, delegate: Delegate | undefined) {\n    this.path = path;\n    this.matcher = matcher;\n    this.delegate = delegate;\n  }\n\n  to(target: string, callback: MatchCallback) {\n    let delegate = this.delegate;\n\n    if (delegate && delegate.willAddRoute) {\n      target = delegate.willAddRoute(this.matcher.target, target);\n    }\n\n    this.matcher.add(this.path, target);\n\n    if (callback) {\n      if (callback.length === 0) { throw new Error(\"You must have an argument in the function passed to `to`\"); }\n      this.matcher.addChild(this.path, target, callback, this.delegate);\n    }\n  }\n}\n\nexport class Matcher {\n  routes: {\n    [path: string]: string | undefined;\n  };\n  children: {\n    [path: string]: Matcher | undefined;\n  };\n  target: string | undefined;\n\n  constructor(target?: string) {\n    this.routes = createMap<string>();\n    this.children = createMap<Matcher>();\n    this.target = target;\n  }\n\n  add(path: string, target: string) {\n    this.routes[path] = target;\n  }\n\n  addChild(path: string, target: string, callback: MatchCallback, delegate: Delegate | undefined) {\n    let matcher = new Matcher(target);\n    this.children[path] = matcher;\n\n    let match = generateMatch(path, matcher, delegate);\n\n    if (delegate && delegate.contextEntered) {\n      delegate.contextEntered(target, match);\n    }\n\n    callback(match);\n  }\n}\n\nfunction generateMatch(startingPath: string, matcher: Matcher, delegate: Delegate | undefined): MatchDSL {\n  function match(path: string): ToDSL;\n  function match(path: string, callback: MatchCallback): void;\n  function match(path: string, callback?: MatchCallback): ToDSL | void {\n    let fullPath = startingPath + path;\n    if (callback) {\n      callback(generateMatch(fullPath, matcher, delegate));\n    } else {\n      return new Target(fullPath, matcher, delegate);\n    }\n  };\n  return match;\n}\n\nfunction addRoute(routeArray: Route[], path: string, handler: any) {\n  let len = 0;\n  for (let i = 0; i < routeArray.length; i++) {\n    len += routeArray[i].path.length;\n  }\n\n  path = path.substr(len);\n  let route = { path: path, handler: handler };\n  routeArray.push(route);\n}\n\nfunction eachRoute<T>(baseRoute: Route[], matcher: Matcher, callback: (this: T, routes: Route[]) => void, binding: T) {\n  let routes = matcher.routes;\n  let paths = Object.keys(routes);\n  for (let i = 0; i < paths.length; i++) {\n    let path = paths[i];\n    let routeArray = baseRoute.slice();\n    addRoute(routeArray, path, routes[path]);\n    let nested = matcher.children[path];\n    if (nested) {\n      eachRoute(routeArray, nested, callback, binding);\n    } else {\n      callback.call(binding, routeArray);\n    }\n  }\n}\n\nexport default function <T extends RouteRecognizer>(this: T, callback: MatchCallback, addRouteCallback?: (routeRecognizer: T, routes: Route[]) => void) {\n  let matcher = new Matcher();\n\n  callback(generateMatch(\"\", matcher, this.delegate));\n\n  eachRoute([], matcher, function(routes: Route[]) {\n    if (addRouteCallback) { addRouteCallback(this, routes); }\n    else { this.add(routes); }\n  }, this);\n}\n","// Normalizes percent-encoded values in `path` to upper-case and decodes percent-encoded\n// values that are not reserved (i.e., unicode characters, emoji, etc). The reserved\n// chars are \"/\" and \"%\".\n// Safe to call multiple times on the same path.\nexport function normalizePath(path: string): string {\n  return path.split(\"/\")\n             .map(normalizeSegment)\n             .join(\"/\");\n}\n\n// We want to ensure the characters \"%\" and \"/\" remain in percent-encoded\n// form when normalizing paths, so replace them with their encoded form after\n// decoding the rest of the path\nconst SEGMENT_RESERVED_CHARS = /%|\\//g;\nexport function normalizeSegment(segment: string) {\n  if (segment.length < 3 || segment.indexOf(\"%\") === -1) return segment;\n  return decodeURIComponent(segment).replace(SEGMENT_RESERVED_CHARS, encodeURIComponent);\n}\n\n// We do not want to encode these characters when generating dynamic path segments\n// See https://tools.ietf.org/html/rfc3986#section-3.3\n// sub-delims: \"!\", \"$\", \"&\", \"'\", \"(\", \")\", \"*\", \"+\", \",\", \";\", \"=\"\n// others allowed by RFC 3986: \":\", \"@\"\n//\n// First encode the entire path segment, then decode any of the encoded special chars.\n//\n// The chars \"!\", \"'\", \"(\", \")\", \"*\" do not get changed by `encodeURIComponent`,\n// so the possible encoded chars are:\n// ['%24', '%26', '%2B', '%2C', '%3B', '%3D', '%3A', '%40'].\nconst PATH_SEGMENT_ENCODINGS = /%(?:2(?:4|6|B|C)|3(?:B|D|A)|40)/g;\n\nexport function encodePathSegment(str: string) {\n  return encodeURIComponent(str).replace(PATH_SEGMENT_ENCODINGS, decodeURIComponent);\n}\n","import { createMap } from \"./route-recognizer/util\";\nimport map, { Delegate, Route, Opaque, MatchCallback } from \"./route-recognizer/dsl\";\nimport { normalizePath, normalizeSegment, encodePathSegment } from \"./route-recognizer/normalizer\";\nexport { Delegate, MatchCallback } from './route-recognizer/dsl';\n\nconst enum CHARS {\n  ANY = -1,\n  STAR = 42,\n  SLASH = 47,\n  COLON = 58\n}\n\nconst escapeRegex = /(\\/|\\.|\\*|\\+|\\?|\\||\\(|\\)|\\[|\\]|\\{|\\}|\\\\)/g;\n\nconst isArray = Array.isArray;\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction getParam(params: Params | null | undefined, key: string): string {\n  if (typeof params !== \"object\" || params === null) {\n    throw new Error(\"You must pass an object as the second argument to `generate`.\");\n  }\n\n  if (!hasOwnProperty.call(params, key)) {\n    throw new Error(\"You must provide param `\" + key + \"` to `generate`.\");\n  }\n\n  let value = params[key];\n  let str = typeof value === \"string\" ? value : \"\" + value;\n  if (str.length === 0) {\n    throw new Error(\"You must provide a param `\" + key + \"`.\");\n  }\n  return str;\n}\n\nconst enum SegmentType {\n  Static  = 0,\n  Dynamic = 1,\n  Star    = 2,\n  Epsilon = 4\n}\n\nconst enum SegmentFlags {\n  Static  = 2 << SegmentType.Static,\n  Dynamic = 2 << SegmentType.Dynamic,\n  Star    = 2 << SegmentType.Star,\n  Epsilon = 2 << SegmentType.Epsilon,\n  Named = Dynamic | Star,\n  Decoded = Dynamic,\n  Counted = Static | Dynamic | Star\n}\n\nconst eachChar: ((segment: Segment, currentState: State) => State)[] = [];\neachChar[SegmentType.Static] = function (segment: Segment, currentState: State) {\n  let state = currentState;\n  let value = segment.value;\n  for (let i = 0; i < value.length; i++) {\n    let ch = value.charCodeAt(i);\n    state = state.put(ch, false, false);\n  }\n  return state;\n};\neachChar[SegmentType.Dynamic] = function (_: Segment, currentState: State) {\n  return currentState.put(CHARS.SLASH, true, true);\n};\neachChar[SegmentType.Star] = function (_: Segment, currentState: State) {\n  return currentState.put(CHARS.ANY, false, true);\n};\neachChar[SegmentType.Epsilon] = function (_: Segment, currentState: State) {\n  return currentState;\n};\n\nconst regex: ((segment: Segment) => string)[] = [];\nregex[SegmentType.Static] = function (segment: Segment) {\n  return segment.value.replace(escapeRegex, \"\\\\$1\");\n};\nregex[SegmentType.Dynamic] = function () {\n  return \"([^/]+)\";\n};\nregex[SegmentType.Star] = function () {\n  return \"(.+)\";\n};\nregex[SegmentType.Epsilon] = function () {\n  return \"\";\n};\n\nconst generate: ((segment: Segment, params?: Params | null) => string)[] = [];\ngenerate[SegmentType.Static] = function (segment: Segment) {\n  return segment.value;\n};\ngenerate[SegmentType.Dynamic] = function (segment: Segment, params?: Params) {\n  let value = getParam(params, segment.value);\n  if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS) {\n    return encodePathSegment(value);\n  } else {\n    return value;\n  }\n};\ngenerate[SegmentType.Star] = function (segment: Segment, params?: Params) {\n  return getParam(params, segment.value);\n};\ngenerate[SegmentType.Epsilon] = function () {\n  return \"\";\n};\n\n// A Segment represents a segment in the original route description.\n// Each Segment type provides an `eachChar` and `regex` method.\n//\n// The `eachChar` method invokes the callback with one or more character\n// specifications. A character specification consumes one or more input\n// characters.\n//\n// The `regex` method returns a regex fragment for the segment. If the\n// segment is a dynamic of star segment, the regex fragment also includes\n// a capture.\n//\n// A character specification contains:\n//\n// * `validChars`: a String with a list of all valid characters, or\n// * `invalidChars`: a String with a list of all invalid characters\n// * `repeat`: true if the character specification can repeat\ninterface Segment {\n  type: SegmentType;\n  value: string;\n}\n\nexport interface Params {\n  [key: string]: Opaque;\n  [key: number]: Opaque;\n  queryParams?: QueryParams | null;\n}\n\ninterface PopulatedParsedHandlers {\n  names: string[];\n  shouldDecodes: any[];\n}\n\nconst EmptyObject = Object.freeze({});\ntype EmptyObject = Readonly<{}>\n\nconst EmptyArray = Object.freeze([]) as ReadonlyArray<any>;\ntype EmptyArray = ReadonlyArray<any>;\n\ninterface EmptyParsedHandlers {\n  names: EmptyArray;\n  shouldDecodes: EmptyArray;\n}\n\ntype ParsedHandler = PopulatedParsedHandlers | EmptyParsedHandlers;\n\n// The `names` will be populated with the paramter name for each dynamic/star\n// segment. `shouldDecodes` will be populated with a boolean for each dyanamic/star\n// segment, indicating whether it should be decoded during recognition.\nfunction parse(segments: Segment[], route: string, types: [number, number, number]) {\n  // normalize route as not starting with a \"/\". Recognition will\n  // also normalize.\n  if (route.length > 0 && route.charCodeAt(0) === CHARS.SLASH) { route = route.substr(1); }\n\n  let parts = route.split(\"/\");\n  let names: void | string[] = undefined;\n  let shouldDecodes: void | any[] = undefined;\n\n  for (let i = 0; i < parts.length; i++) {\n    let part = parts[i];\n    let flags: SegmentFlags = 0;\n    let type: SegmentType = 0;\n\n    if (part === \"\") {\n      type = SegmentType.Epsilon;\n    } else if (part.charCodeAt(0) === CHARS.COLON) {\n      type = SegmentType.Dynamic;\n    } else if (part.charCodeAt(0) === CHARS.STAR) {\n      type = SegmentType.Star;\n    }  else {\n      type = SegmentType.Static;\n    }\n\n    flags = 2 << type;\n\n    if (flags & SegmentFlags.Named) {\n      part = part.slice(1);\n      names = names || [];\n      names.push(part);\n\n      shouldDecodes = shouldDecodes || [];\n      shouldDecodes.push((flags & SegmentFlags.Decoded) !== 0);\n    }\n\n    if (flags & SegmentFlags.Counted) {\n      types[type]++;\n    }\n\n    segments.push({\n      type,\n      value: normalizeSegment(part)\n    });\n  }\n\n  return {\n    names: names || EmptyArray,\n    shouldDecodes: shouldDecodes || EmptyArray,\n  } as ParsedHandler;\n}\n\nfunction isEqualCharSpec(spec: CharSpec, char: number, negate: boolean) {\n  return spec.char === char && spec.negate === negate;\n}\n\ninterface EmptyHandler {\n  handler: Opaque;\n  names: EmptyArray;\n  shouldDecodes: EmptyArray;\n}\n\ninterface PopulatedHandler {\n  handler: Opaque;\n  names: string [];\n  shouldDecodes: boolean[];\n}\n\ntype Handler = EmptyHandler | PopulatedHandler;\n\n// A State has a character specification and (`charSpec`) and a list of possible\n// subsequent states (`nextStates`).\n//\n// If a State is an accepting state, it will also have several additional\n// properties:\n//\n// * `regex`: A regular expression that is used to extract parameters from paths\n//   that reached this accepting state.\n// * `handlers`: Information on how to convert the list of captures into calls\n//   to registered handlers with the specified parameters\n// * `types`: How many static, dynamic or star segments in this route. Used to\n//   decide which route to use if multiple registered routes match a path.\n//\n// Currently, State is implemented naively by looping over `nextStates` and\n// comparing a character specification against a character. A more efficient\n// implementation would use a hash of keys pointing at one or more next states.\nclass State implements CharSpec {\n  states: State[];\n  id: number;\n  negate: boolean;\n  char: number;\n  nextStates: number[] | number | null;\n  pattern: string;\n  _regex: RegExp | undefined;\n  handlers: Handler[] | undefined;\n  types: [number, number, number] | undefined;\n\n  constructor(states: State[], id: number, char: number, negate: boolean, repeat: boolean) {\n    this.states = states;\n    this.id = id;\n    this.char = char;\n    this.negate = negate;\n    this.nextStates = repeat ? id : null;\n    this.pattern = \"\";\n    this._regex = undefined;\n    this.handlers = undefined;\n    this.types = undefined;\n  }\n\n  regex(): RegExp {\n    if (!this._regex) {\n      this._regex = new RegExp(this.pattern);\n    }\n    return this._regex;\n  }\n\n  get(char: number, negate: boolean): State | void {\n    let nextStates = this.nextStates;\n    if (nextStates === null) return;\n    if (isArray(nextStates)) {\n      for (let i = 0; i < nextStates.length; i++) {\n        let child = this.states[nextStates[i]];\n        if (isEqualCharSpec(child, char, negate)) {\n          return child;\n        }\n      }\n    } else {\n      let child = this.states[nextStates];\n      if (isEqualCharSpec(child, char, negate)) {\n        return child;\n      }\n    }\n  }\n\n  put(char: number, negate: boolean, repeat: boolean) {\n    let state: State | void;\n\n    // If the character specification already exists in a child of the current\n    // state, just return that state.\n    if (state = this.get(char, negate)) { return state; }\n\n    // Make a new state for the character spec\n    let states = this.states;\n    state = new State(states, states.length, char, negate, repeat);\n    states[states.length] = state;\n\n    // Insert the new state as a child of the current state\n    if (this.nextStates == null) {\n      this.nextStates = state.id;\n    } else if (isArray(this.nextStates)) {\n      this.nextStates.push(state.id);\n    } else {\n      this.nextStates = [this.nextStates, state.id];\n    }\n\n    // Return the new state\n    return state;\n  }\n\n  // Find a list of child states matching the next character\n  match(ch: number): State[] {\n    let nextStates = this.nextStates;\n    if (!nextStates) return [];\n\n    let returned: State[] = [];\n    if (isArray(nextStates)) {\n      for (let i = 0; i < nextStates.length; i++) {\n        let child = this.states[nextStates[i]];\n\n        if (isMatch(child, ch)) {\n          returned.push(child);\n        }\n      }\n    } else {\n      let child = this.states[nextStates];\n      if (isMatch(child, ch)) {\n        returned.push(child);\n      }\n    }\n    return returned;\n  }\n}\n\nfunction isMatch(spec: CharSpec, char: number) {\n  return spec.negate ? spec.char !== char && spec.char !== CHARS.ANY : spec.char === char || spec.char === CHARS.ANY;\n}\n\n// This is a somewhat naive strategy, but should work in a lot of cases\n// A better strategy would properly resolve /posts/:id/new and /posts/edit/:id.\n//\n// This strategy generally prefers more static and less dynamic matching.\n// Specifically, it\n//\n//  * prefers fewer stars to more, then\n//  * prefers using stars for less of the match to more, then\n//  * prefers fewer dynamic segments to more, then\n//  * prefers more static segments to more\nfunction sortSolutions(states: State[]) {\n  return states.sort(function(a, b) {\n    let [ astatics, adynamics, astars ] = a.types || [0, 0, 0];\n    let [ bstatics, bdynamics, bstars ] = b.types || [0, 0, 0];\n    if (astars !== bstars) { return astars - bstars; }\n\n    if (astars) {\n      if (astatics !== bstatics) { return bstatics - astatics; }\n      if (adynamics !== bdynamics) { return bdynamics - adynamics; }\n    }\n\n    if (adynamics !== bdynamics) { return adynamics - bdynamics; }\n    if (astatics !== bstatics) { return bstatics - astatics; }\n\n    return 0;\n  });\n}\n\nfunction recognizeChar(states: State[], ch: number) {\n  let nextStates: State[] = [];\n\n  for (let i = 0, l = states.length; i < l; i++) {\n    let state = states[i];\n\n    nextStates = nextStates.concat(state.match(ch));\n  }\n\n  return nextStates;\n}\n\n\nexport interface QueryParams {\n  [param: string]: any[] | any | null | undefined;\n}\n\nexport interface Result {\n  handler: Opaque;\n  params: Params;\n  isDynamic: boolean;\n}\n\nexport interface Results extends ArrayLike<Result | undefined> {\n  queryParams: QueryParams;\n  slice(start?: number, end?: number): Result[];\n  splice(start: number, deleteCount: number, ...items: Result[]): Result[];\n  push(...results: Result[]): number;\n}\n\nclass RecognizeResults implements Results {\n  queryParams: QueryParams;\n  length = 0;\n  [index: number]: Result | undefined;\n  splice: (start: number, deleteCount: number, ...items: Result[]) => Result[];\n  slice: (start?: number, end?: number) => Result[];\n  push: (...results: Result[]) => number;\n\n  constructor(queryParams?: QueryParams) {\n    this.queryParams = queryParams || {};\n  }\n};\n\nRecognizeResults.prototype.splice = Array.prototype.splice;\nRecognizeResults.prototype.slice =  Array.prototype.slice;\nRecognizeResults.prototype.push = Array.prototype.push;\n\nfunction findHandler(state: State, originalPath: string, queryParams: QueryParams): Results {\n  let handlers = state.handlers;\n  let regex: RegExp = state.regex();\n  if (!regex || !handlers) throw new Error(\"state not initialized\");\n  let captures: RegExpMatchArray | null = originalPath.match(regex);\n  let currentCapture = 1;\n  let result = new RecognizeResults(queryParams);\n\n  result.length = handlers.length;\n\n  for (let i = 0; i < handlers.length; i++) {\n    let handler = handlers[i];\n    let names = handler.names;\n    let shouldDecodes = handler.shouldDecodes;\n    let params: EmptyObject | Params = EmptyObject;\n\n    let isDynamic = false;\n\n    if (names !== EmptyArray && shouldDecodes !== EmptyArray) {\n      for (let j = 0; j < names.length; j++) {\n        isDynamic = true;\n        let name = names[j];\n        let capture = captures && captures[currentCapture++];\n\n        if (params === EmptyObject) {\n          params = {};\n        }\n\n        if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS && shouldDecodes[j]) {\n          (<Params>params)[name] = capture && decodeURIComponent(capture);\n        } else {\n          (<Params>params)[name] = capture;\n        }\n      }\n    }\n\n    result[i] = {\n      handler: handler.handler,\n      params,\n      isDynamic\n    };\n  }\n\n  return result;\n}\n\nfunction decodeQueryParamPart(part: string): string {\n  // http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1\n  part = part.replace(/\\+/gm, \"%20\");\n  let result;\n  try {\n    result = decodeURIComponent(part);\n  } catch (error) {result = \"\"; }\n  return result;\n}\n\ninterface NamedRoute {\n  segments: Segment[];\n  handlers: Handler[];\n}\n\nclass RouteRecognizer {\n  private states: State[];\n  private rootState: State;\n  private names: {\n    [name: string]: NamedRoute | undefined;\n  } = createMap<NamedRoute>();\n  map: (context: MatchCallback, addCallback?: (router: this, routes: Route[]) => void) => void;\n  delegate: Delegate | undefined;\n\n  constructor() {\n    let states: State[] = [];\n    let state = new State(states, 0, CHARS.ANY, true, false);\n    states[0] = state;\n    this.states = states;\n    this.rootState = state;\n  }\n\n  static VERSION = \"0.3.4\";\n  // Set to false to opt-out of encoding and decoding path segments.\n  // See https://github.com/tildeio/route-recognizer/pull/55\n  static ENCODE_AND_DECODE_PATH_SEGMENTS = true;\n  static Normalizer = {\n    normalizeSegment, normalizePath, encodePathSegment\n  };\n\n  add(routes: Route[], options?: { as: string }) {\n    let currentState = this.rootState;\n    let pattern = \"^\";\n    let types: [number, number, number] = [0, 0, 0];\n    let handlers: Handler[] = new Array(routes.length);\n    let allSegments: Segment[] = [];\n\n    let isEmpty = true;\n    let j = 0;\n    for (let i = 0; i < routes.length; i++) {\n      let route = routes[i];\n      let { names, shouldDecodes } = parse(allSegments, route.path, types);\n\n      // preserve j so it points to the start of newly added segments\n      for (; j < allSegments.length; j++) {\n        let segment = allSegments[j];\n\n        if (segment.type === SegmentType.Epsilon) { continue; }\n\n        isEmpty = false;\n\n        // Add a \"/\" for the new segment\n        currentState = currentState.put(CHARS.SLASH, false, false);\n        pattern += \"/\";\n\n        // Add a representation of the segment to the NFA and regex\n        currentState = eachChar[segment.type](segment, currentState);\n        pattern += regex[segment.type](segment);\n      }\n      handlers[i] = {\n        handler: route.handler,\n        names,\n        shouldDecodes\n      };\n    }\n\n    if (isEmpty) {\n        currentState = currentState.put(CHARS.SLASH, false, false);\n      pattern += \"/\";\n    }\n\n    currentState.handlers = handlers;\n    currentState.pattern = pattern + \"$\";\n    currentState.types = types;\n\n    let name: string | undefined;\n    if (typeof options === \"object\" && options !== null && options.as) {\n      name = options.as;\n    }\n\n    if (name) {\n      // if (this.names[name]) {\n      //   throw new Error(\"You may not add a duplicate route named `\" + name + \"`.\");\n      // }\n\n      this.names[name] = {\n        segments: allSegments,\n        handlers\n      };\n    }\n  }\n\n  handlersFor(name: string) {\n    let route = this.names[name];\n\n    if (!route) { throw new Error(\"There is no route named \" + name); }\n\n    let result = new Array(route.handlers.length);\n\n    for (let i = 0; i < route.handlers.length; i++) {\n      let handler = route.handlers[i];\n      result[i] = handler;\n    }\n\n    return result;\n  }\n\n  hasRoute(name: string) {\n    return !!this.names[name];\n  }\n\n  generate(name: string, params?: Params | null) {\n    let route = this.names[name];\n    let output = \"\";\n    if (!route) { throw new Error(\"There is no route named \" + name); }\n\n    let segments: Segment[] = route.segments;\n\n    for (let i = 0; i < segments.length; i++) {\n      let segment: Segment = segments[i];\n\n      if (segment.type === SegmentType.Epsilon) {\n        continue;\n      }\n\n      output += \"/\";\n      output += generate[segment.type](segment, params);\n    }\n\n    if (output.charAt(0) !== \"/\") { output = \"/\" + output; }\n\n    if (params && params.queryParams) {\n      output += this.generateQueryString(params.queryParams);\n    }\n\n    return output;\n  }\n\n  generateQueryString(params: QueryParams) {\n    let pairs: string[] = [];\n    let keys: string[] = Object.keys(params);\n    keys.sort();\n    for (let i = 0; i < keys.length; i++) {\n      let key = keys[i];\n      let value = params[key];\n      if (value == null) {\n        continue;\n      }\n      let pair = encodeURIComponent(key);\n      if (isArray(value)) {\n        for (let j = 0; j < value.length; j++) {\n          let arrayPair = key + \"[]\" + \"=\" + encodeURIComponent(value[j]);\n          pairs.push(arrayPair);\n        }\n      } else {\n        pair += \"=\" + encodeURIComponent(value);\n        pairs.push(pair);\n      }\n    }\n\n    if (pairs.length === 0) { return \"\"; }\n\n    return \"?\" + pairs.join(\"&\");\n  }\n\n  parseQueryString(queryString: string): QueryParams {\n    let pairs = queryString.split(\"&\");\n    let queryParams: QueryParams = {};\n    for (let i = 0; i < pairs.length; i++) {\n      let pair      = pairs[i].split(\"=\"),\n          key       = decodeQueryParamPart(pair[0]),\n          keyLength = key.length,\n          isArray = false,\n          value;\n      if (pair.length === 1) {\n        value = \"true\";\n      } else {\n        // Handle arrays\n        if (keyLength > 2 && key.slice(keyLength - 2) === \"[]\") {\n          isArray = true;\n          key = key.slice(0, keyLength - 2);\n          if (!queryParams[key]) {\n            queryParams[key] = [];\n          }\n        }\n        value = pair[1] ? decodeQueryParamPart(pair[1]) : \"\";\n      }\n      if (isArray) {\n        (<string[]>queryParams[key]).push(value);\n      } else {\n        queryParams[key] = value;\n      }\n    }\n    return queryParams;\n  }\n\n  recognize(path: string): Results | undefined {\n    let results: Results | undefined;\n    let states: State[] = [ this.rootState ];\n    let queryParams = {};\n    let isSlashDropped = false;\n    let hashStart = path.indexOf(\"#\");\n    if (hashStart !== -1) {\n      path = path.substr(0, hashStart);\n    }\n\n    let queryStart = path.indexOf(\"?\");\n    if (queryStart !== -1) {\n      let queryString = path.substr(queryStart + 1, path.length);\n      path = path.substr(0, queryStart);\n      queryParams = this.parseQueryString(queryString);\n    }\n\n    if (path.charAt(0) !== \"/\") { path = \"/\" + path; }\n    let originalPath = path;\n\n    if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS) {\n      path = normalizePath(path);\n    } else {\n      path = decodeURI(path);\n      originalPath = decodeURI(originalPath);\n    }\n\n    let pathLen = path.length;\n    if (pathLen > 1 && path.charAt(pathLen - 1) === \"/\") {\n      path = path.substr(0, pathLen - 1);\n      originalPath = originalPath.substr(0, originalPath.length - 1);\n      isSlashDropped = true;\n    }\n\n    for (let i = 0; i < path.length; i++) {\n      states = recognizeChar(states, path.charCodeAt(i));\n      if (!states.length) { break; }\n    }\n\n    let solutions: State[] = [];\n    for (let i = 0; i < states.length; i++) {\n      if (states[i].handlers) { solutions.push(states[i]); }\n    }\n\n    states = sortSolutions(solutions);\n\n    let state = solutions[0];\n\n    if (state && state.handlers) {\n      // if a trailing slash was dropped and a star segment is the last segment\n      // specified, put the trailing slash back\n      if (isSlashDropped && state.pattern && state.pattern.slice(-5) === \"(.+)$\") {\n        originalPath = originalPath + \"/\";\n      }\n      results = findHandler(state, originalPath, queryParams);\n    }\n\n    return results;\n  }\n}\n\nRouteRecognizer.prototype.map = map;\n\nexport default RouteRecognizer;\n\ninterface CharSpec {\n  negate: boolean;\n  char: number;\n}\n"]},"metadata":{},"sourceType":"module"}
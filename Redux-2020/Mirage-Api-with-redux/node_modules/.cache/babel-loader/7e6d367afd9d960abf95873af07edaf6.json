{"ast":null,"code":"import isPlainObject from 'lodash.isplainobject';\nimport isFunction from 'lodash.isfunction';\nimport mapValues from 'lodash.mapvalues';\nimport uniq from 'lodash.uniq';\nimport flatten from 'lodash.flatten';\nimport '@miragejs/pretender-node-polyfill/before';\nimport Pretender from 'pretender';\nimport '@miragejs/pretender-node-polyfill/after';\nimport { camelize as camelize$1, dasherize as dasherize$1, underscore as underscore$1, capitalize as capitalize$1, singularize, pluralize } from 'inflected';\nimport lowerFirst from 'lodash.lowerfirst';\nimport isEqual from 'lodash.isequal';\nimport map from 'lodash.map';\nimport cloneDeep from 'lodash.clonedeep';\nimport invokeMap from 'lodash.invokemap';\nimport compact from 'lodash.compact';\nimport has from 'lodash.has';\nimport values from 'lodash.values';\nimport isEmpty from 'lodash.isempty';\nimport get from 'lodash.get';\nimport uniqBy from 'lodash.uniqby';\nimport forIn from 'lodash.forin';\nimport pick from 'lodash.pick';\nimport assign from 'lodash.assign';\nimport find from 'lodash.find';\nimport isInteger from 'lodash.isinteger';\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n} // jscs:disable disallowVar, requireArrayDestructuring\n\n/**\n  @hide\n*/\n\n\nfunction referenceSort(edges) {\n  var nodes = uniq(flatten(edges));\n  var cursor = nodes.length;\n  var sorted = new Array(cursor);\n  var visited = {};\n  var i = cursor;\n\n  var visit = function visit(node, i, predecessors) {\n    if (predecessors.indexOf(node) >= 0) {\n      throw new Error(\"Cyclic dependency in properties \".concat(JSON.stringify(predecessors)));\n    }\n\n    if (visited[i]) {\n      return;\n    } else {\n      visited[i] = true;\n    }\n\n    var outgoing = edges.filter(function (edge) {\n      return edge && edge[0] === node;\n    });\n    i = outgoing.length;\n\n    if (i) {\n      var preds = predecessors.concat(node);\n\n      do {\n        var pair = outgoing[--i];\n        var child = pair[1];\n\n        if (child) {\n          visit(child, nodes.indexOf(child), preds);\n        }\n      } while (i);\n    }\n\n    sorted[--cursor] = node;\n  };\n\n  while (i--) {\n    if (!visited[i]) {\n      visit(nodes[i], i, []);\n    }\n  }\n\n  return sorted.reverse();\n}\n\nvar Factory = function Factory() {\n  this.build = function (sequence) {\n    var _this = this;\n\n    var object = {};\n    var topLevelAttrs = Object.assign({}, this.attrs);\n    delete topLevelAttrs.afterCreate;\n    Object.keys(topLevelAttrs).forEach(function (attr) {\n      if (Factory.isTrait.call(_this, attr)) {\n        delete topLevelAttrs[attr];\n      }\n    });\n    var keys = sortAttrs(topLevelAttrs, sequence);\n    keys.forEach(function (key) {\n      var buildAttrs, _buildSingleValue;\n\n      buildAttrs = function buildAttrs(attrs) {\n        return mapValues(attrs, _buildSingleValue);\n      };\n\n      _buildSingleValue = function buildSingleValue(value) {\n        if (Array.isArray(value)) {\n          return value.map(_buildSingleValue);\n        } else if (isPlainObject(value)) {\n          return buildAttrs(value);\n        } else if (isFunction(value)) {\n          return value.call(topLevelAttrs, sequence);\n        } else {\n          return value;\n        }\n      };\n\n      var value = topLevelAttrs[key];\n\n      if (isFunction(value)) {\n        object[key] = value.call(object, sequence);\n      } else {\n        object[key] = _buildSingleValue(value);\n      }\n    });\n    return object;\n  };\n};\n\nFactory.extend = function (attrs) {\n  // Merge the new attributes with existing ones. If conflict, new ones win.\n  var newAttrs = Object.assign({}, this.attrs, attrs);\n\n  var Subclass = function Subclass() {\n    this.attrs = newAttrs;\n    Factory.call(this);\n  }; // Copy extend\n\n\n  Subclass.extend = Factory.extend;\n  Subclass.extractAfterCreateCallbacks = Factory.extractAfterCreateCallbacks;\n  Subclass.isTrait = Factory.isTrait; // Store a reference on the class for future subclasses\n\n  Subclass.attrs = newAttrs;\n  return Subclass;\n};\n\nFactory.extractAfterCreateCallbacks = function () {\n  var _this2 = this;\n\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      traits = _ref.traits;\n\n  var afterCreateCallbacks = [];\n  var attrs = this.attrs || {};\n  var traitCandidates;\n\n  if (attrs.afterCreate) {\n    afterCreateCallbacks.push(attrs.afterCreate);\n  }\n\n  if (Array.isArray(traits)) {\n    traitCandidates = traits;\n  } else {\n    traitCandidates = Object.keys(attrs);\n  }\n\n  traitCandidates.filter(function (attr) {\n    return _this2.isTrait(attr) && attrs[attr].extension.afterCreate;\n  }).forEach(function (attr) {\n    afterCreateCallbacks.push(attrs[attr].extension.afterCreate);\n  });\n  return afterCreateCallbacks;\n};\n\nFactory.isTrait = function (attrName) {\n  var attrs = this.attrs;\n  return isPlainObject(attrs[attrName]) && attrs[attrName].__isTrait__ === true;\n};\n\nfunction sortAttrs(attrs, sequence) {\n  var Temp = function Temp() {};\n\n  var obj = new Temp();\n  var refs = [];\n  var property;\n  Object.keys(attrs).forEach(function (key) {\n    var value;\n    Object.defineProperty(obj.constructor.prototype, key, {\n      get: function get() {\n        refs.push([property, key]);\n        return value;\n      },\n      set: function set(newValue) {\n        value = newValue;\n      },\n      enumerable: false,\n      configurable: true\n    });\n  });\n  Object.keys(attrs).forEach(function (key) {\n    var value = attrs[key];\n\n    if (typeof value !== \"function\") {\n      obj[key] = value;\n    }\n  });\n  Object.keys(attrs).forEach(function (key) {\n    var value = attrs[key];\n    property = key;\n\n    if (typeof value === \"function\") {\n      obj[key] = value.call(obj, sequence);\n    }\n\n    refs.push([key]);\n  });\n  return referenceSort(refs);\n}\n\nfunction isNumber(n) {\n  return (+n).toString() === n.toString();\n}\n/**\n  By default Mirage uses autoincrementing numbers starting with `1` as IDs for records. This can be customized by implementing one or more IdentityManagers for your application.\n\n  An IdentityManager is a class that's responsible for generating unique identifiers. You can define a custom identity manager for your entire application, as well as on a per-model basis.\n\n  A custom IdentityManager must implement these methods:\n\n  - `fetch`, which must return an identifier not yet used\n  - `set`, which is called with an `id` of a record being insert into Mirage's database\n  - `reset`, which should reset database to initial state\n\n  Check out the advanced guide on Mocking UUIDs to see a complete example of a custom IdentityManager.\n\n  @class IdentityManager\n  @constructor\n  @public\n*/\n\n\nvar IdentityManager = /*#__PURE__*/function () {\n  function IdentityManager() {\n    _classCallCheck(this, IdentityManager);\n\n    this._nextId = 1;\n    this._ids = {};\n  }\n  /**\n    @method get\n    @hide\n    @private\n  */\n\n\n  _createClass(IdentityManager, [{\n    key: \"get\",\n    value: function get() {\n      return this._nextId;\n    }\n    /**\n      Registers `uniqueIdentifier` as used.\n       This method should throw is `uniqueIdentifier` has already been taken.\n       @method set\n      @param {String|Number} uniqueIdentifier\n      @public\n    */\n\n  }, {\n    key: \"set\",\n    value: function set(uniqueIdentifier) {\n      if (this._ids[uniqueIdentifier]) {\n        throw new Error(\"Attempting to use the ID \".concat(uniqueIdentifier, \", but it's already been used\"));\n      }\n\n      if (isNumber(uniqueIdentifier) && +uniqueIdentifier >= this._nextId) {\n        this._nextId = +uniqueIdentifier + 1;\n      }\n\n      this._ids[uniqueIdentifier] = true;\n    }\n    /**\n      @method inc\n      @hide\n      @private\n    */\n\n  }, {\n    key: \"inc\",\n    value: function inc() {\n      var nextValue = this.get() + 1;\n      this._nextId = nextValue;\n      return nextValue;\n    }\n    /**\n      Returns the next unique identifier.\n       @method fetch\n      @return {String} Unique identifier\n      @public\n    */\n\n  }, {\n    key: \"fetch\",\n    value: function fetch() {\n      var id = this.get();\n      this._ids[id] = true;\n      this.inc();\n      return id.toString();\n    }\n    /**\n      Resets the identity manager, marking all unique identifiers as available.\n       @method reset\n      @public\n    */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this._nextId = 1;\n      this._ids = {};\n    }\n  }]);\n\n  return IdentityManager;\n}();\n/**\n  @hide\n*/\n\n\nvar association = function association() {\n  var __isAssociation__ = true;\n\n  for (var _len = arguments.length, traitsAndOverrides = new Array(_len), _key = 0; _key < _len; _key++) {\n    traitsAndOverrides[_key] = arguments[_key];\n  }\n\n  return {\n    __isAssociation__: __isAssociation__,\n    traitsAndOverrides: traitsAndOverrides\n  };\n};\n\nvar trait = function trait(extension) {\n  var __isTrait__ = true;\n  return {\n    extension: extension,\n    __isTrait__: __isTrait__\n  };\n};\n\nvar warn = console.warn; // eslint-disable-line no-console\n\n/**\n  You can use this class when you want more control over your route handlers response.\n\n  Pass the `code`, `headers` and `data` into the constructor and return an instance from any route handler.\n\n  ```js\n  import { Response } from 'miragejs';\n\n  this.get('/users', () => {\n    return new Response(400, { some: 'header' }, { errors: [ 'name cannot be blank'] });\n  });\n  ```\n*/\n\nvar Response = /*#__PURE__*/function () {\n  function Response(code) {\n    var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var data = arguments.length > 2 ? arguments[2] : undefined;\n\n    _classCallCheck(this, Response);\n\n    this.code = code;\n    this.headers = headers; // Default data for \"undefined 204\" responses to empty string (no content)\n\n    if (code === 204) {\n      if (data !== undefined && data !== \"\") {\n        warn(\"Mirage: One of your route handlers is returning a custom\\n          204 Response that has data, but this is a violation of the HTTP spec\\n          and could lead to unexpected behavior. 204 responses should have no\\n          content (an empty string) as their body.\");\n      } else {\n        this.data = \"\";\n      } // Default data for \"empty untyped\" responses to empty JSON object\n\n    } else if ((data === undefined || data === \"\") && !Object.prototype.hasOwnProperty.call(this.headers, \"Content-Type\")) {\n      this.data = {};\n    } else {\n      this.data = data;\n    } // Default \"untyped\" responses to application/json\n\n\n    if (code !== 204 && !Object.prototype.hasOwnProperty.call(this.headers, \"Content-Type\")) {\n      this.headers[\"Content-Type\"] = \"application/json\";\n    }\n  }\n\n  _createClass(Response, [{\n    key: \"toRackResponse\",\n    value: function toRackResponse() {\n      return [this.code, this.headers, this.data];\n    }\n  }]);\n\n  return Response;\n}();\n\nvar camelizeCache = {};\nvar dasherizeCache = {};\nvar underscoreCache = {};\nvar capitalizeCache = {};\n/**\n * @param {String} word\n * @hide\n */\n\nfunction camelize(word) {\n  if (typeof camelizeCache[word] !== \"string\") {\n    var camelizedWord = camelize$1(underscore(word), false);\n    /*\n     The `ember-inflector` package's version of camelize lower-cases the first\n     word after a slash, e.g.\n          camelize('my-things/nice-watch'); // 'myThings/niceWatch'\n      The `inflected` package doesn't, so we make that change here to not break\n     existing functionality. (This affects the name of the schema collections.)\n    */\n\n    var camelized = camelizedWord.split(\"/\").map(lowerFirst).join(\"/\");\n    camelizeCache[word] = camelized;\n  }\n\n  return camelizeCache[word];\n}\n/**\n * @param {String} word\n * @hide\n */\n\n\nfunction dasherize(word) {\n  if (typeof dasherizeCache[word] !== \"string\") {\n    var dasherized = dasherize$1(underscore(word));\n    dasherizeCache[word] = dasherized;\n  }\n\n  return dasherizeCache[word];\n}\n\nfunction underscore(word) {\n  if (typeof underscoreCache[word] !== \"string\") {\n    var underscored = underscore$1(word);\n    underscoreCache[word] = underscored;\n  }\n\n  return underscoreCache[word];\n}\n\nfunction capitalize(word) {\n  if (typeof capitalizeCache[word] !== \"string\") {\n    var capitalized = capitalize$1(word);\n    capitalizeCache[word] = capitalized;\n  }\n\n  return capitalizeCache[word];\n}\n/**\n  @hide\n*/\n\n\nfunction isAssociation(object) {\n  return isPlainObject(object) && object.__isAssociation__ === true;\n}\n/* eslint no-console: 0 */\n\n\nvar errorProps = [\"description\", \"fileName\", \"lineNumber\", \"message\", \"name\", \"number\", \"stack\"];\n/**\n  @hide\n*/\n\nfunction assert(bool, text) {\n  if (typeof bool === \"string\" && !text) {\n    // console.error(`Mirage: ${bool}`);\n    throw new MirageError(bool);\n  }\n\n  if (!bool) {\n    // console.error(`Mirage: ${text}`);\n    throw new MirageError(text.replace(/^ +/gm, \"\") || \"Assertion failed\");\n  }\n}\n/**\n  @public\n  @hide\n  Copied from ember-metal/error\n*/\n\n\nfunction MirageError(message, stack) {\n  var tmp = Error(message);\n\n  if (stack) {\n    tmp.stack = stack;\n  }\n\n  for (var idx = 0; idx < errorProps.length; idx++) {\n    var prop = errorProps[idx];\n\n    if ([\"description\", \"message\", \"stack\"].indexOf(prop) > -1) {\n      this[prop] = \"Mirage: \".concat(tmp[prop]);\n    } else {\n      this[prop] = tmp[prop];\n    }\n  }\n}\n\nMirageError.prototype = Object.create(Error.prototype);\n/**\n  Associations represent relationships between your Models.\n\n  The `hasMany` and `belongsTo` helpers are how you actually define relationships:\n  \n  ```js\n  import { Server, Model, hasMany, belongsTo }\n\n  new Server({\n    models: {\n      user: Model.extend({\n        comments: hasMany()\n      }),\n      comments: Model.extend({\n        user: belongsTo()\n      })\n    }\n  })\n  ```\n\n  View [the Relationships](https://miragejs.com/docs/main-concepts/relationships/) guide to learn more about setting up relationships.\n\n  Each usage of the helper registers an Association (either a `HasMany` association or `BelongsTo` association) with your server's `Schema`. You can access these associations using either the `schema.associationsFor()` method, or the `associations` property on individual model instances.\n\n  You can then introspect the associations to do things like dynamically build up your JSON response in your serializers.\n\n  @class Association\n  @constructor\n  @public\n*/\n\nvar Association = /*#__PURE__*/function () {\n  function Association(modelName, opts) {\n    _classCallCheck(this, Association);\n    /**\n      The modelName of the associated model.\n       For example, given this configuration\n      \n      ```js\n      new Server({\n        models: {\n          user: Model,\n          comment: Model.extend({\n            user: belongsTo()\n          })\n        }\n      })\n      ```\n       the association's `modelName` would be `user`.\n       Note that an association's `modelName` and the `name` can be different. This is because Mirage supports multiple relationships of the same type:\n       ```js\n      new Server({\n        models: {\n          user: Model,\n          comment: Model.extend({\n            author: belongsTo('user'),\n            reviewer: belongsTo('user')\n          })\n        }\n      })\n      ```\n       For both these relationships, the `modelName` is `user`, but the first association has a `name` of `author` while the second has a `name` of `reviewer`.\n       @property\n      @type {String}\n      @public\n    */\n\n\n    this.modelName = undefined; // hack to add ESDOC info. Any better way?\n\n    if (_typeof(modelName) === \"object\") {\n      // Received opts only\n      this.modelName = undefined;\n      this.opts = modelName;\n    } else {\n      // The modelName of the association. (Might not be passed in - set later\n      // by schema).\n      this.modelName = modelName ? dasherize(modelName) : \"\";\n      this.opts = opts || {};\n    }\n    /**\n      The name of the association, which comes from the property name that was used to define it.\n       For example, given this server definition\n      \n      ```js\n      new Server({\n        models: {\n          user: Model,\n          comment: Model.extend({\n            author: belongsTo('user')\n          })\n        }\n      })\n      ```\n       the association's `name` would be `author`.\n      \n      The name is used by Mirage to define foreign keys on the model (`comment.authorId` in this case), among other things.\n       @property\n      @type {String}\n      @public\n    */\n\n\n    this.name = \"\"; // The modelName that owns this association\n\n    this.ownerModelName = \"\";\n  }\n  /**\n     A setter for schema, since we don't have a reference at constuction time.\n      @method setSchema\n     @public\n     @hide\n  */\n\n\n  _createClass(Association, [{\n    key: \"setSchema\",\n    value: function setSchema(schema) {\n      this.schema = schema;\n    }\n    /**\n       Returns a Boolean that's true if the association is self-referential, i.e. if a model has an association with itself.\n        For example, given\n        ```js\n       new Server({\n         models: {\n           user: Model.extend({\n             friends: hasMany('user')\n           })\n         }\n       })\n       ```\n        then\n        ```js\n       server.schema.associationsFor('user').friends.isReflexive // true\n       ```\n        @method isReflexive\n       @return {Boolean}\n       @public\n    */\n\n  }, {\n    key: \"isReflexive\",\n    value: function isReflexive() {\n      var isExplicitReflexive = !!(this.modelName === this.ownerModelName && this.opts.inverse);\n      var isImplicitReflexive = !!(this.opts.inverse === undefined && this.ownerModelName === this.modelName);\n      return isExplicitReflexive || isImplicitReflexive;\n    }\n    /**\n       Returns a Boolean that's true if the association is polymorphic:\n        For example, given\n        ```js\n       new Server({\n         models: {\n           comment: Model.extend({\n             commentable: belongsTo({ polymorphic: true })\n           })\n         }\n       })\n       ```\n        then\n        ```js\n       server.schema.associationsFor('comment').commentable.isPolymorphic // true\n       ```\n        Check out [the guides on polymorphic associations](https://miragejs.com/docs/main-concepts/relationships/#polymorphic) to learn more.\n        @accessor isPolymorphic\n       @type {Boolean}\n       @public\n    */\n\n  }, {\n    key: \"isPolymorphic\",\n    get: function get() {\n      return this.opts.polymorphic;\n    }\n    /**\n      Returns either the string `\"hasMany\"` or `\"belongsTo\"`, based on the association type.\n    \n      @accessor\n      @type {String}\n      @public\n     */\n\n  }, {\n    key: \"type\",\n    get: function get() {\n      throw new Error(\"Subclasses of Association must implement a getter for type\");\n    }\n    /**\n      Returns the name used for the association's foreign key.\n       ```js\n      let server = new Server({\n        models: {\n          user: Model,\n          post: Model.extend({\n            fineAuthor: belongsTo(\"user\"),\n            comments: hasMany()\n          }),\n          comment: Model\n        }\n      });\n       let associations = server.associationsFor('post')\n       associations.fineAuthor.foreignKey // fineAuthorId\n      associations.comments.foreignKey // commentIds\n      ```\n    \n      @accessor\n      @type {String}\n      @public\n     */\n\n  }, {\n    key: \"foreignKey\",\n    get: function get() {\n      return this.getForeignKey();\n    }\n    /**\n      @hide\n    */\n\n  }, {\n    key: \"identifier\",\n    get: function get() {\n      throw new Error(\"Subclasses of Association must implement a getter for identifier\");\n    }\n  }]);\n\n  return Association;\n}();\n\nvar identifierCache = {};\n/**\n * The belongsTo association adds a fk to the owner of the association\n *\n * @class BelongsTo\n * @extends Association\n * @constructor\n * @public\n * @hide\n */\n\nvar BelongsTo = /*#__PURE__*/function (_Association) {\n  _inherits(BelongsTo, _Association);\n\n  var _super = _createSuper(BelongsTo);\n\n  function BelongsTo() {\n    _classCallCheck(this, BelongsTo);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(BelongsTo, [{\n    key: \"getForeignKeyArray\",\n\n    /**\n     * @method getForeignKeyArray\n     * @return {Array} Array of camelized name of the model owning the association\n     * and foreign key for the association\n     * @public\n     */\n    value: function getForeignKeyArray() {\n      return [camelize(this.ownerModelName), this.getForeignKey()];\n    }\n    /**\n     * @method getForeignKey\n     * @return {String} Foreign key for the association\n     * @public\n     */\n\n  }, {\n    key: \"getForeignKey\",\n    value: function getForeignKey() {\n      // we reuse identifierCache because it's the same logic as get identifier\n      if (typeof identifierCache[this.name] !== \"string\") {\n        var foreignKey = \"\".concat(camelize(this.name), \"Id\");\n        identifierCache[this.name] = foreignKey;\n      }\n\n      return identifierCache[this.name];\n    }\n    /**\n     * Registers belongs-to association defined by given key on given model,\n     * defines getters / setters for associated parent and associated parent's id,\n     * adds methods for creating unsaved parent record and creating a saved one\n     *\n     * @method addMethodsToModelClass\n     * @param {Function} ModelClass\n     * @param {String} key the named key for the association\n     * @public\n     */\n\n  }, {\n    key: \"addMethodsToModelClass\",\n    value: function addMethodsToModelClass(ModelClass, key) {\n      var modelPrototype = ModelClass.prototype;\n      var association = this;\n      var foreignKey = this.getForeignKey();\n\n      var associationHash = _defineProperty({}, key, this);\n\n      modelPrototype.belongsToAssociations = Object.assign(modelPrototype.belongsToAssociations, associationHash); // update belongsToAssociationFks\n\n      Object.keys(modelPrototype.belongsToAssociations).forEach(function (key) {\n        var value = modelPrototype.belongsToAssociations[key];\n        modelPrototype.belongsToAssociationFks[value.getForeignKey()] = value;\n      }); // Add to target's dependent associations array\n\n      this.schema.addDependentAssociation(this, this.modelName); // TODO: look how this is used. Are these necessary, seems like they could be gotten from the above?\n      // Or we could use a single data structure to store this information?\n\n      modelPrototype.associationKeys.add(key);\n      modelPrototype.associationIdKeys.add(foreignKey);\n      Object.defineProperty(modelPrototype, foreignKey, {\n        /*\n          object.parentId\n            - returns the associated parent's id\n        */\n        get: function get() {\n          this._tempAssociations = this._tempAssociations || {};\n          var tempParent = this._tempAssociations[key];\n          var id;\n\n          if (tempParent === null) {\n            id = null;\n          } else {\n            if (association.isPolymorphic) {\n              if (tempParent) {\n                id = {\n                  id: tempParent.id,\n                  type: tempParent.modelName\n                };\n              } else {\n                id = this.attrs[foreignKey];\n              }\n            } else {\n              if (tempParent) {\n                id = tempParent.id;\n              } else {\n                id = this.attrs[foreignKey];\n              }\n            }\n          }\n\n          return id;\n        },\n\n        /*\n          object.parentId = (parentId)\n            - sets the associated parent via id\n        */\n        set: function set(id) {\n          var tempParent;\n\n          if (id === null) {\n            tempParent = null;\n          } else if (id !== undefined) {\n            if (association.isPolymorphic) {\n              assert(_typeof(id) === \"object\", \"You're setting an ID on the polymorphic association '\".concat(association.name, \"' but you didn't pass in an object. Polymorphic IDs need to be in the form { type, id }.\"));\n              tempParent = association.schema[association.schema.toCollectionName(id.type)].find(id.id);\n            } else {\n              tempParent = association.schema[association.schema.toCollectionName(association.modelName)].find(id);\n              assert(tempParent, \"Couldn't find \".concat(association.modelName, \" with id = \").concat(id));\n            }\n          }\n\n          this[key] = tempParent;\n        }\n      });\n      Object.defineProperty(modelPrototype, key, {\n        /*\n          object.parent\n            - returns the associated parent\n        */\n        get: function get() {\n          this._tempAssociations = this._tempAssociations || {};\n          var tempParent = this._tempAssociations[key];\n          var foreignKeyId = this[foreignKey];\n          var model = null;\n\n          if (tempParent) {\n            model = tempParent;\n          } else if (foreignKeyId !== null) {\n            if (association.isPolymorphic) {\n              model = association.schema[association.schema.toCollectionName(foreignKeyId.type)].find(foreignKeyId.id);\n            } else {\n              model = association.schema[association.schema.toCollectionName(association.modelName)].find(foreignKeyId);\n            }\n          }\n\n          return model;\n        },\n\n        /*\n          object.parent = (parentModel)\n            - sets the associated parent via model\n           I want to jot some notes about hasInverseFor. There used to be an\n          association.inverse() check, but adding polymorphic associations\n          complicated this. `comment.commentable`, you can't easily check for an\n          inverse since `comments: hasMany()` could be on any model.\n           Instead of making it very complex and looking for an inverse on the\n          association in isoaltion, it was much simpler to ask the model being\n          passed in if it had an inverse for the setting model and with its\n          association.\n        */\n        set: function set(model) {\n          this._tempAssociations = this._tempAssociations || {};\n          this._tempAssociations[key] = model;\n\n          if (model && model.hasInverseFor(association)) {\n            var inverse = model.inverseFor(association);\n            model.associate(this, inverse);\n          }\n        }\n      });\n      /*\n        object.newParent\n          - creates a new unsaved associated parent\n         TODO: document polymorphic\n      */\n\n      modelPrototype[\"new\".concat(capitalize(key))] = function () {\n        var modelName, attrs;\n\n        if (association.isPolymorphic) {\n          modelName = arguments.length <= 0 ? undefined : arguments[0];\n          attrs = arguments.length <= 1 ? undefined : arguments[1];\n        } else {\n          modelName = association.modelName;\n          attrs = arguments.length <= 0 ? undefined : arguments[0];\n        }\n\n        var parent = association.schema[association.schema.toCollectionName(modelName)][\"new\"](attrs);\n        this[key] = parent;\n        return parent;\n      };\n      /*\n        object.createParent\n          - creates a new saved associated parent, and immediately persists both models\n         TODO: document polymorphic\n      */\n\n\n      modelPrototype[\"create\".concat(capitalize(key))] = function () {\n        var modelName, attrs;\n\n        if (association.isPolymorphic) {\n          modelName = arguments.length <= 0 ? undefined : arguments[0];\n          attrs = arguments.length <= 1 ? undefined : arguments[1];\n        } else {\n          modelName = association.modelName;\n          attrs = arguments.length <= 0 ? undefined : arguments[0];\n        }\n\n        var parent = association.schema[association.schema.toCollectionName(modelName)].create(attrs);\n        this[key] = parent;\n        this.save();\n        return parent.reload();\n      };\n    }\n    /**\n     *\n     *\n     * @public\n     */\n\n  }, {\n    key: \"disassociateAllDependentsFromTarget\",\n    value: function disassociateAllDependentsFromTarget(model) {\n      var _this = this;\n\n      var owner = this.ownerModelName;\n      var fk;\n\n      if (this.isPolymorphic) {\n        fk = {\n          type: model.modelName,\n          id: model.id\n        };\n      } else {\n        fk = model.id;\n      }\n\n      var dependents = this.schema[this.schema.toCollectionName(owner)].where(function (potentialOwner) {\n        var id = potentialOwner[_this.getForeignKey()];\n\n        if (!id) {\n          return false;\n        }\n\n        if (_typeof(id) === \"object\") {\n          return id.type === fk.type && id.id === fk.id;\n        } else {\n          return id === fk;\n        }\n      });\n      dependents.models.forEach(function (dependent) {\n        dependent.disassociate(model, _this);\n        dependent.save();\n      });\n    }\n  }, {\n    key: \"identifier\",\n    get: function get() {\n      if (typeof identifierCache[this.name] !== \"string\") {\n        var identifier = \"\".concat(camelize(this.name), \"Id\");\n        identifierCache[this.name] = identifier;\n      }\n\n      return identifierCache[this.name];\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return \"belongsTo\";\n    }\n  }]);\n\n  return BelongsTo;\n}(Association);\n\nfunction duplicate(data) {\n  if (Array.isArray(data)) {\n    return data.map(duplicate);\n  } else {\n    return Object.assign({}, data);\n  }\n}\n/**\n  Mirage's `Db` has many `DbCollections`, which are equivalent to tables from traditional databases. They store specific types of data, for example `users` and `posts`.\n\n  `DbCollections` have names, like `users`, which you use to access the collection from the `Db` object.\n\n  Suppose you had a `user` model defined, and the following data had been inserted into your database (either through factories or fixtures):\n\n  ```js\n  export default [\n    { id: 1, name: 'Zelda' },\n    { id: 2, name: 'Link' }\n  ];\n  ```\n\n  Then `db.contacts` would return this array.\n\n  @class DbCollection\n  @constructor\n  @public\n */\n\n\nvar DbCollection = /*#__PURE__*/function () {\n  function DbCollection(name, initialData, IdentityManager) {\n    _classCallCheck(this, DbCollection);\n\n    this.name = name;\n    this._records = [];\n    this.identityManager = new IdentityManager();\n\n    if (initialData) {\n      this.insert(initialData);\n    }\n  }\n  /**\n   * Returns a copy of the data, to prevent inadvertent data manipulation.\n   * @method all\n   * @public\n   * @hide\n   */\n\n\n  _createClass(DbCollection, [{\n    key: \"all\",\n    value: function all() {\n      return duplicate(this._records);\n    }\n    /**\n      Inserts `data` into the collection. `data` can be a single object\n      or an array of objects. Returns the inserted record.\n       ```js\n      // Insert a single record\n      let link = db.users.insert({ name: 'Link', age: 173 });\n       link;  // { id: 1, name: 'Link', age: 173 }\n       // Insert an array\n      let users = db.users.insert([\n        { name: 'Zelda', age: 142 },\n        { name: 'Epona', age: 58 },\n      ]);\n       users;  // [ { id: 2, name: 'Zelda', age: 142 }, { id: 3, name: 'Epona', age: 58 } ]\n      ```\n       @method insert\n      @param data\n      @public\n     */\n\n  }, {\n    key: \"insert\",\n    value: function insert(data) {\n      var _this = this;\n\n      if (!Array.isArray(data)) {\n        return this._insertRecord(data);\n      } else {\n        return map(data, function (attrs) {\n          return _this._insertRecord(attrs);\n        });\n      }\n    }\n    /**\n      Returns a single record from the `collection` if `ids` is a single\n      id, or an array of records if `ids` is an array of ids. Note\n      each id can be an int or a string, but integer ids as strings\n      (e.g. the string “1”) will be treated as integers.\n       ```js\n      // Given users = [{id: 1, name: 'Link'}, {id: 2, name: 'Zelda'}]\n       db.users.find(1);      // {id: 1, name: 'Link'}\n      db.users.find([1, 2]); // [{id: 1, name: 'Link'}, {id: 2, name: 'Zelda'}]\n      ```\n       @method find\n      @param ids\n      @public\n     */\n\n  }, {\n    key: \"find\",\n    value: function find(ids) {\n      if (Array.isArray(ids)) {\n        var records = this._findRecords(ids).filter(Boolean).map(duplicate); // Return a copy\n\n\n        return records;\n      } else {\n        var record = this._findRecord(ids);\n\n        if (!record) {\n          return null;\n        } // Return a copy\n\n\n        return duplicate(record);\n      }\n    }\n    /**\n      Returns the first model from `collection` that matches the\n      key-value pairs in the `query` object. Note that a string\n      comparison is used. `query` is a POJO.\n       ```js\n      // Given users = [ { id: 1, name: 'Link' }, { id: 2, name: 'Zelda' } ]\n      db.users.findBy({ name: 'Link' }); // { id: 1, name: 'Link' }\n      ```\n       @method find\n      @param query\n      @public\n     */\n\n  }, {\n    key: \"findBy\",\n    value: function findBy(query) {\n      var record = this._findRecordBy(query);\n\n      if (!record) {\n        return null;\n      } // Return a copy\n\n\n      return duplicate(record);\n    }\n    /**\n      Returns an array of models from `collection` that match the\n      key-value pairs in the `query` object. Note that a string\n      comparison is used. `query` is a POJO.\n       ```js\n      // Given users = [ { id: 1, name: 'Link' }, { id: 2, name: 'Zelda' } ]\n       db.users.where({ name: 'Zelda' }); // [ { id: 2, name: 'Zelda' } ]\n      ```\n       @method where\n      @param query\n      @public\n     */\n\n  }, {\n    key: \"where\",\n    value: function where(query) {\n      return this._findRecordsWhere(query).map(duplicate);\n    }\n    /**\n      Finds the first record matching the provided _query_ in\n      `collection`, or creates a new record using a merge of the\n      `query` and optional `attributesForCreate`.\n       Often times you may have a pattern like the following in your API stub:\n       ```js\n      // Given users = [\n      //   { id: 1, name: 'Link' },\n      //   { id: 2, name: 'Zelda' }\n      // ]\n       // Create Link if he doesn't yet exist\n      let records = db.users.where({ name: 'Link' });\n      let record;\n       if (records.length > 0) {\n        record = records[0];\n      } else {\n        record = db.users.insert({ name: 'Link' });\n      }\n      ```\n       You can now replace this with the following:\n       ```js\n      let record = db.users.firstOrCreate({ name: 'Link' });\n      ```\n       An extended example using *attributesForCreate*:\n       ```js\n      let record = db.users.firstOrCreate({ name: 'Link' }, { evil: false });\n      ```\n       @method firstOrCreate\n      @param query\n      @param attributesForCreate\n      @public\n     */\n\n  }, {\n    key: \"firstOrCreate\",\n    value: function firstOrCreate(query) {\n      var attributesForCreate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var queryResult = this.where(query);\n\n      var _queryResult = _slicedToArray(queryResult, 1),\n          record = _queryResult[0];\n\n      if (record) {\n        return record;\n      } else {\n        var mergedAttributes = Object.assign(attributesForCreate, query);\n        var createdRecord = this.insert(mergedAttributes);\n        return createdRecord;\n      }\n    }\n    /**\n      Updates one or more records in the collection.\n       If *attrs* is the only arg present, updates all records in the collection according to the key-value pairs in *attrs*.\n       If *target* is present, restricts updates to those that match *target*. If *target* is a number or string, finds a single record whose id is *target* to update. If *target* is a POJO, queries *collection* for records that match the key-value pairs in *target*, and updates their *attrs*.\n       Returns the updated record or records.\n       ```js\n      // Given users = [\n      //   {id: 1, name: 'Link'},\n      //   {id: 2, name: 'Zelda'}\n      // ]\n       db.users.update({name: 'Ganon'}); // db.users = [{id: 1, name: 'Ganon'}, {id: 2, name: 'Ganon'}]\n      db.users.update(1, {name: 'Young Link'}); // db.users = [{id: 1, name: 'Young Link'}, {id: 2, name: 'Zelda'}]\n      db.users.update({name: 'Link'}, {name: 'Epona'}); // db.users = [{id: 1, name: 'Epona'}, {id: 2, name: 'Zelda'}]\n      ```\n       @method update\n      @param target\n      @param attrs\n      @public\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(target, attrs) {\n      var _this2 = this;\n\n      var records;\n\n      if (typeof attrs === \"undefined\") {\n        attrs = target;\n        var changedRecords = [];\n\n        this._records.forEach(function (record) {\n          var oldRecord = Object.assign({}, record);\n\n          _this2._updateRecord(record, attrs);\n\n          if (!isEqual(oldRecord, record)) {\n            changedRecords.push(record);\n          }\n        });\n\n        return changedRecords;\n      } else if (typeof target === \"number\" || typeof target === \"string\") {\n        var id = target;\n\n        var record = this._findRecord(id);\n\n        this._updateRecord(record, attrs);\n\n        return record;\n      } else if (Array.isArray(target)) {\n        var ids = target;\n        records = this._findRecords(ids);\n        records.forEach(function (record) {\n          _this2._updateRecord(record, attrs);\n        });\n        return records;\n      } else if (_typeof(target) === \"object\") {\n        var query = target;\n        records = this._findRecordsWhere(query);\n        records.forEach(function (record) {\n          _this2._updateRecord(record, attrs);\n        });\n        return records;\n      }\n    }\n    /**\n      Removes one or more records in *collection*.\n       If *target* is undefined, removes all records. If *target* is a number or string, removes a single record using *target* as id. If *target* is a POJO, queries *collection* for records that match the key-value pairs in *target*, and removes them from the collection.\n       ```js\n      // Given users = [\n      //   {id: 1, name: 'Link'},\n      //   {id: 2, name: 'Zelda'}\n      // ]\n       db.users.remove(); // db.users = []\n      db.users.remove(1); // db.users = [{id: 2, name: 'Zelda'}]\n      db.users.remove({name: 'Zelda'}); // db.users = [{id: 1, name: 'Link'}]\n      ```\n       @method remove\n      @param target\n      @public\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(target) {\n      var _this3 = this;\n\n      var records;\n\n      if (typeof target === \"undefined\") {\n        this._records = [];\n        this.identityManager.reset();\n      } else if (typeof target === \"number\" || typeof target === \"string\") {\n        var record = this._findRecord(target);\n\n        var index = this._records.indexOf(record);\n\n        this._records.splice(index, 1);\n      } else if (Array.isArray(target)) {\n        records = this._findRecords(target);\n        records.forEach(function (record) {\n          var index = _this3._records.indexOf(record);\n\n          _this3._records.splice(index, 1);\n        });\n      } else if (_typeof(target) === \"object\") {\n        records = this._findRecordsWhere(target);\n        records.forEach(function (record) {\n          var index = _this3._records.indexOf(record);\n\n          _this3._records.splice(index, 1);\n        });\n      }\n    }\n    /*\n      Private methods.\n       These return the actual db objects, whereas the public\n      API query methods return copies.\n    */\n\n    /**\n      @method _findRecord\n      @param id\n      @private\n      @hide\n     */\n\n  }, {\n    key: \"_findRecord\",\n    value: function _findRecord(id) {\n      id = id.toString();\n      return this._records.find(function (obj) {\n        return obj.id === id;\n      });\n    }\n    /**\n      @method _findRecordBy\n      @param query\n      @private\n      @hide\n     */\n\n  }, {\n    key: \"_findRecordBy\",\n    value: function _findRecordBy(query) {\n      return this._findRecordsWhere(query)[0];\n    }\n    /**\n      @method _findRecords\n      @param ids\n      @private\n      @hide\n     */\n\n  }, {\n    key: \"_findRecords\",\n    value: function _findRecords(ids) {\n      return ids.map(this._findRecord, this);\n    }\n    /**\n      @method _findRecordsWhere\n      @param query\n      @private\n      @hide\n     */\n\n  }, {\n    key: \"_findRecordsWhere\",\n    value: function _findRecordsWhere(query) {\n      var records = this._records;\n\n      function defaultQueryFunction(record) {\n        var keys = Object.keys(query);\n        return keys.every(function (key) {\n          return String(record[key]) === String(query[key]);\n        });\n      }\n\n      var queryFunction = _typeof(query) === \"object\" ? defaultQueryFunction : query;\n      return records.filter(queryFunction);\n    }\n    /**\n      @method _insertRecord\n      @param data\n      @private\n      @hide\n     */\n\n  }, {\n    key: \"_insertRecord\",\n    value: function _insertRecord(data) {\n      var attrs = duplicate(data);\n\n      if (attrs && (attrs.id === undefined || attrs.id === null)) {\n        attrs.id = this.identityManager.fetch(attrs);\n      } else {\n        attrs.id = attrs.id.toString();\n        this.identityManager.set(attrs.id);\n      }\n\n      this._records.push(attrs);\n\n      return duplicate(attrs);\n    }\n    /**\n      @method _updateRecord\n      @param record\n      @param attrs\n      @private\n      @hide\n     */\n\n  }, {\n    key: \"_updateRecord\",\n    value: function _updateRecord(record, attrs) {\n      var targetId = attrs && Object.prototype.hasOwnProperty.call(attrs, \"id\") ? attrs.id.toString() : null;\n      var currentId = record.id;\n\n      if (targetId && currentId !== targetId) {\n        throw new Error(\"Updating the ID of a record is not permitted\");\n      }\n\n      for (var attr in attrs) {\n        if (attr === \"id\") {\n          continue;\n        }\n\n        record[attr] = attrs[attr];\n      }\n    }\n  }]);\n\n  return DbCollection;\n}();\n/**\n  Your Mirage server has a database which you can interact with in your route handlers. You’ll typically use models to interact with your database data, but you can always reach into the db directly in the event you want more control.\n\n  Access the db from your route handlers via `schema.db`.\n\n  You can access individual DbCollections by using `schema.db.name`:\n\n  ```js\n  schema.db.users  // would return, e.g., [ { id: 1, name: 'Yehuda' }, { id: 2, name: 'Tom '} ]\n  ```\n\n  @class Db\n  @constructor\n  @public\n */\n\n\nvar Db = /*#__PURE__*/function () {\n  function Db(initialData, identityManagers) {\n    _classCallCheck(this, Db);\n\n    this._collections = [];\n    this.registerIdentityManagers(identityManagers);\n\n    if (initialData) {\n      this.loadData(initialData);\n    }\n  }\n  /**\n    Loads an object of data into Mirage's database.\n     The keys of the object correspond to the DbCollections, and the values are arrays of records.\n     ```js\n    server.db.loadData({\n      users: [\n        { name: 'Yehuda' },\n        { name: 'Tom' }\n      ]\n    });\n    ```\n     As with `db.collection.insert`, IDs will automatically be created for records that don't have them.\n     @method loadData\n    @param {Object} data - Data to load\n    @public\n   */\n\n\n  _createClass(Db, [{\n    key: \"loadData\",\n    value: function loadData(data) {\n      for (var key in data) {\n        this.createCollection(key, cloneDeep(data[key]));\n      }\n    }\n    /**\n     Logs out the contents of the Db.\n      ```js\n     server.db.dump() // { users: [ name: 'Yehuda', ...\n     ```\n      @method dump\n     @public\n     */\n\n  }, {\n    key: \"dump\",\n    value: function dump() {\n      return this._collections.reduce(function (data, collection) {\n        data[collection.name] = collection.all();\n        return data;\n      }, {});\n    }\n    /**\n      Add an empty collection named _name_ to your database. Typically you won’t need to do this yourself, since collections are automatically created for any models you have defined.\n       @method createCollection\n      @param name\n      @param initialData (optional)\n      @public\n     */\n\n  }, {\n    key: \"createCollection\",\n    value: function createCollection(name, initialData) {\n      if (!this[name]) {\n        var _IdentityManager = this.identityManagerFor(name);\n\n        var newCollection = new DbCollection(name, initialData, _IdentityManager); // Public API has a convenient array interface. It comes at the cost of\n        // returning a copy of all records to avoid accidental mutations.\n\n        Object.defineProperty(this, name, {\n          get: function get() {\n            var recordsCopy = newCollection.all();\n            [\"insert\", \"find\", \"findBy\", \"where\", \"update\", \"remove\", \"firstOrCreate\"].forEach(function (method) {\n              recordsCopy[method] = function () {\n                return newCollection[method].apply(newCollection, arguments);\n              };\n            });\n            return recordsCopy;\n          }\n        }); // Private API does not have the array interface. This means internally, only\n        // db-collection methods can be used. This is so records aren't copied redundantly\n        // internally, which leads to accidental O(n^2) operations (e.g., createList).\n\n        Object.defineProperty(this, \"_\".concat(name), {\n          get: function get() {\n            var recordsCopy = [];\n            [\"insert\", \"find\", \"findBy\", \"where\", \"update\", \"remove\", \"firstOrCreate\"].forEach(function (method) {\n              recordsCopy[method] = function () {\n                return newCollection[method].apply(newCollection, arguments);\n              };\n            });\n            return recordsCopy;\n          }\n        });\n\n        this._collections.push(newCollection);\n      } else if (initialData) {\n        this[name].insert(initialData);\n      }\n\n      return this;\n    }\n    /**\n      @method createCollections\n      @param ...collections\n      @public\n      @hide\n     */\n\n  }, {\n    key: \"createCollections\",\n    value: function createCollections() {\n      var _this = this;\n\n      for (var _len = arguments.length, collections = new Array(_len), _key = 0; _key < _len; _key++) {\n        collections[_key] = arguments[_key];\n      }\n\n      collections.forEach(function (c) {\n        return _this.createCollection(c);\n      });\n    }\n    /**\n      Removes all data from Mirage's database.\n       @method emptyData\n      @public\n     */\n\n  }, {\n    key: \"emptyData\",\n    value: function emptyData() {\n      this._collections.forEach(function (c) {\n        return c.remove();\n      });\n    }\n    /**\n      @method identityManagerFor\n      @param name\n      @public\n      @hide\n     */\n\n  }, {\n    key: \"identityManagerFor\",\n    value: function identityManagerFor(name) {\n      return this._identityManagers[this._container.inflector.singularize(name)] || this._identityManagers.application || IdentityManager;\n    }\n    /**\n      @method registerIdentityManagers\n      @public\n      @hide\n     */\n\n  }, {\n    key: \"registerIdentityManagers\",\n    value: function registerIdentityManagers(identityManagers) {\n      this._identityManagers = identityManagers || {};\n    }\n  }]);\n\n  return Db;\n}();\n/**\n  Collections represent arrays of models. They are returned by a hasMany association, or by one of the ModelClass query methods:\n\n  ```js\n  let posts = user.blogPosts;\n  let posts = schema.blogPosts.all();\n  let posts = schema.blogPosts.find([1, 2, 4]);\n  let posts = schema.blogPosts.where({ published: true });\n  ```\n\n  Note that there is also a `PolymorphicCollection` class that is identical to `Collection`, except it can contain a heterogeneous array of models. Thus, it has no `modelName` property. This lets serializers and other parts of the system interact with it differently.\n\n  @class Collection\n  @constructor\n  @public\n*/\n\n\nvar Collection = /*#__PURE__*/function () {\n  function Collection(modelName) {\n    var models = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    _classCallCheck(this, Collection);\n\n    assert(modelName && typeof modelName === \"string\", \"You must pass a `modelName` into a Collection\");\n    /**\n      The dasherized model name this Collection represents.\n       ```js\n      let posts = user.blogPosts;\n       posts.modelName; // \"blog-post\"\n      ```\n       The model name is separate from the actual models, since Collections can be empty.\n       @property modelName\n      @type {String}\n      @public\n    */\n\n    this.modelName = modelName;\n    /**\n      The underlying plain JavaScript array of Models in this Collection.\n       ```js\n      posts.models // [ post:1, post:2, ... ]\n      ```\n       While Collections have many array-ish methods like `filter` and `sort`, it\n      can be useful to work with the plain array if you want to work with methods\n      like `map`, or use the `[]` accessor.\n       For example, in testing you might want to assert against a model from the\n      collection:\n       ```js\n      let newPost = user.posts.models[0].title;\n       assert.equal(newPost, \"My first post\");\n      ```\n       @property models\n      @type {Array}\n      @public\n    */\n\n    this.models = models;\n  }\n  /**\n    The number of models in the collection.\n     ```js\n    user.posts.length; // 2\n    ```\n     @property length\n    @type {Integer}\n    @public\n  */\n\n\n  _createClass(Collection, [{\n    key: \"update\",\n\n    /**\n       Updates each model in the collection, and immediately persists all changes to the db.\n        ```js\n       let posts = user.blogPosts;\n        posts.update('published', true); // the db was updated for all posts\n       ```\n        @method update\n       @param key\n       @param val\n       @return this\n       @public\n     */\n    value: function update() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      invokeMap.apply(void 0, [this.models, \"update\"].concat(args));\n      return this;\n    }\n    /**\n       Saves all models in the collection.\n        ```js\n       let posts = user.blogPosts;\n        posts.models[0].published = true;\n        posts.save(); // all posts saved to db\n       ```\n        @method save\n       @return this\n       @public\n     */\n\n  }, {\n    key: \"save\",\n    value: function save() {\n      invokeMap(this.models, \"save\");\n      return this;\n    }\n    /**\n      Reloads each model in the collection.\n       ```js\n      let posts = author.blogPosts;\n       // ...\n       posts.reload(); // reloads data for each post from the db\n      ```\n       @method reload\n      @return this\n      @public\n    */\n\n  }, {\n    key: \"reload\",\n    value: function reload() {\n      invokeMap(this.models, \"reload\");\n      return this;\n    }\n    /**\n      Destroys the db record for all models in the collection.\n       ```js\n      let posts = user.blogPosts;\n       posts.destroy(); // all posts removed from db\n      ```\n       @method destroy\n      @return this\n      @public\n    */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      invokeMap(this.models, \"destroy\");\n      return this;\n    }\n    /**\n      Adds a model to this collection.\n       ```js\n      posts.length; // 1\n       posts.add(newPost);\n       posts.length; // 2\n      ```\n       @method add\n      @param {Model} model\n      @return this\n      @public\n    */\n\n  }, {\n    key: \"add\",\n    value: function add(model) {\n      this.models.push(model);\n      return this;\n    }\n    /**\n      Removes a model from this collection.\n       ```js\n      posts.length; // 5\n       let firstPost = posts.models[0];\n      posts.remove(firstPost);\n      posts.save();\n       posts.length; // 4\n      ```\n       @method remove\n      @param {Model} model\n      @return this\n      @public\n    */\n\n  }, {\n    key: \"remove\",\n    value: function remove(model) {\n      var match = this.models.find(function (m) {\n        return m.toString() === model.toString();\n      });\n\n      if (match) {\n        var i = this.models.indexOf(match);\n        this.models.splice(i, 1);\n      }\n\n      return this;\n    }\n    /**\n      Checks if the Collection includes the given model.\n       ```js\n      posts.includes(newPost);\n      ```\n       Works by checking if the given model name and id exists in the Collection,\n      making it a bit more flexible than strict object equality.\n       ```js\n      let post = server.create('post');\n      let programming = server.create('tag', { text: 'Programming' });\n       visit(`/posts/${post.id}`);\n      click('.tag-selector');\n      click('.tag:contains(Programming)');\n       post.reload();\n      assert.ok(post.tags.includes(programming));\n      ```\n       @method includes\n      @return {Boolean}\n      @public\n    */\n\n  }, {\n    key: \"includes\",\n    value: function includes(model) {\n      return this.models.some(function (m) {\n        return m.toString() === model.toString();\n      });\n    }\n    /**\n      Returns a new Collection with its models filtered according to the provided [callback function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).\n       ```js\n      let publishedPosts = user.posts.filter(post => post.isPublished);\n      ```\n      @method filter\n      @param {Function} f\n      @return {Collection}\n      @public\n    */\n\n  }, {\n    key: \"filter\",\n    value: function filter(f) {\n      var filteredModels = this.models.filter(f);\n      return new Collection(this.modelName, filteredModels);\n    }\n    /**\n       Returns a new Collection with its models sorted according to the provided [compare function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#Parameters).\n        ```js\n       let postsByTitleAsc = user.posts.sort((a, b) => {\n         return b.title < a.title;\n       });\n       ```\n        @method sort\n       @param {Function} f\n       @return {Collection}\n       @public\n     */\n\n  }, {\n    key: \"sort\",\n    value: function sort(f) {\n      var sortedModels = this.models.concat().sort(f);\n      return new Collection(this.modelName, sortedModels);\n    }\n    /**\n      Returns a new Collection with a subset of its models selected from `begin` to `end`.\n       ```js\n      let firstThreePosts = user.posts.slice(0, 3);\n      ```\n       @method slice\n      @param {Integer} begin\n      @param {Integer} end\n      @return {Collection}\n      @public\n    */\n\n  }, {\n    key: \"slice\",\n    value: function slice() {\n      var _this$models;\n\n      var slicedModels = (_this$models = this.models).slice.apply(_this$models, arguments);\n\n      return new Collection(this.modelName, slicedModels);\n    }\n    /**\n      Modifies the Collection by merging the models from another collection.\n       ```js\n      user.posts.mergeCollection(newPosts);\n      user.posts.save();\n      ```\n       @method mergeCollection\n      @param {Collection} collection\n      @return this\n      @public\n     */\n\n  }, {\n    key: \"mergeCollection\",\n    value: function mergeCollection(collection) {\n      this.models = this.models.concat(collection.models);\n      return this;\n    }\n    /**\n       Simple string representation of the collection and id.\n        ```js\n       user.posts.toString(); // collection:post(post:1,post:4)\n       ```\n        @method toString\n       @return {String}\n       @public\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"collection:\".concat(this.modelName, \"(\").concat(this.models.map(function (m) {\n        return m.id;\n      }).join(\",\"), \")\");\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.models.length;\n    }\n  }]);\n\n  return Collection;\n}();\n/**\n * An array of models, returned from one of the schema query\n * methods (all, find, where). Knows how to update and destroy its models.\n *\n * Identical to Collection except it can contain a heterogeneous array of\n * models. Thus, it has no `modelName` property. This lets serializers and\n * other parts of the system interact with it differently.\n *\n * @class PolymorphicCollection\n * @constructor\n * @public\n * @hide\n */\n\n\nvar PolymorphicCollection = /*#__PURE__*/function () {\n  function PolymorphicCollection() {\n    var models = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n    _classCallCheck(this, PolymorphicCollection);\n\n    this.models = models;\n  }\n  /**\n   * Number of models in the collection.\n   *\n   * @property length\n   * @type Number\n   * @public\n   */\n\n\n  _createClass(PolymorphicCollection, [{\n    key: \"update\",\n\n    /**\n     * Updates each model in the collection (persisting immediately to the db).\n     * @method update\n     * @param key\n     * @param val\n     * @return this\n     * @public\n     */\n    value: function update() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      invokeMap.apply(void 0, [this.models, \"update\"].concat(args));\n      return this;\n    }\n    /**\n     * Destroys the db record for all models in the collection.\n     * @method destroy\n     * @return this\n     * @public\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      invokeMap(this.models, \"destroy\");\n      return this;\n    }\n    /**\n     * Saves all models in the collection.\n     * @method save\n     * @return this\n     * @public\n     */\n\n  }, {\n    key: \"save\",\n    value: function save() {\n      invokeMap(this.models, \"save\");\n      return this;\n    }\n    /**\n     * Reloads each model in the collection.\n     * @method reload\n     * @return this\n     * @public\n     */\n\n  }, {\n    key: \"reload\",\n    value: function reload() {\n      invokeMap(this.models, \"reload\");\n      return this;\n    }\n    /**\n     * Adds a model to this collection\n     *\n     * @method add\n     * @return this\n     * @public\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(model) {\n      this.models.push(model);\n      return this;\n    }\n    /**\n     * Removes a model to this collection\n     *\n     * @method remove\n     * @return this\n     * @public\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(model) {\n      var match = this.models.find(function (m) {\n        return isEqual(m.attrs, model.attrs);\n      });\n\n      if (match) {\n        var i = this.models.indexOf(match);\n        this.models.splice(i, 1);\n      }\n\n      return this;\n    }\n    /**\n     * Checks if the collection includes the model\n     *\n     * @method includes\n     * @return boolean\n     * @public\n     */\n\n  }, {\n    key: \"includes\",\n    value: function includes(model) {\n      return this.models.some(function (m) {\n        return isEqual(m.attrs, model.attrs);\n      });\n    }\n    /**\n     * @method filter\n     * @param f\n     * @return {Collection}\n     * @public\n     */\n\n  }, {\n    key: \"filter\",\n    value: function filter(f) {\n      var filteredModels = this.models.filter(f);\n      return new PolymorphicCollection(filteredModels);\n    }\n    /**\n     * @method sort\n     * @param f\n     * @return {Collection}\n     * @public\n     */\n\n  }, {\n    key: \"sort\",\n    value: function sort(f) {\n      var sortedModels = this.models.concat().sort(f);\n      return new PolymorphicCollection(sortedModels);\n    }\n    /**\n     * @method slice\n     * @param {Integer} begin\n     * @param {Integer} end\n     * @return {Collection}\n     * @public\n     */\n\n  }, {\n    key: \"slice\",\n    value: function slice() {\n      var _this$models;\n\n      var slicedModels = (_this$models = this.models).slice.apply(_this$models, arguments);\n\n      return new PolymorphicCollection(slicedModels);\n    }\n    /**\n     * @method mergeCollection\n     * @param collection\n     * @return this\n     * @public\n     */\n\n  }, {\n    key: \"mergeCollection\",\n    value: function mergeCollection(collection) {\n      this.models = this.models.concat(collection.models);\n      return this;\n    }\n    /**\n     * Simple string representation of the collection and id.\n     * @method toString\n     * @return {String}\n     * @public\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"collection:\".concat(this.modelName, \"(\").concat(this.models.map(function (m) {\n        return m.id;\n      }).join(\",\"), \")\");\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.models.length;\n    }\n  }]);\n\n  return PolymorphicCollection;\n}();\n\nvar identifierCache$1 = {};\n/**\n * @class HasMany\n * @extends Association\n * @constructor\n * @public\n * @hide\n */\n\nvar HasMany = /*#__PURE__*/function (_Association) {\n  _inherits(HasMany, _Association);\n\n  var _super = _createSuper(HasMany);\n\n  function HasMany() {\n    _classCallCheck(this, HasMany);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(HasMany, [{\n    key: \"getForeignKeyArray\",\n\n    /**\n     * @method getForeignKeyArray\n     * @return {Array} Array of camelized model name of associated objects\n     * and foreign key for the object owning the association\n     * @public\n     */\n    value: function getForeignKeyArray() {\n      return [camelize(this.ownerModelName), this.getForeignKey()];\n    }\n    /**\n     * @method getForeignKey\n     * @return {String} Foreign key for the object owning the association\n     * @public\n     */\n\n  }, {\n    key: \"getForeignKey\",\n    value: function getForeignKey() {\n      // we reuse identifierCache because it's the same logic as get identifier\n      if (typeof identifierCache$1[this.name] !== \"string\") {\n        var foreignKey = \"\".concat(this._container.inflector.singularize(camelize(this.name)), \"Ids\");\n        identifierCache$1[this.name] = foreignKey;\n      }\n\n      return identifierCache$1[this.name];\n    }\n    /**\n     * Registers has-many association defined by given key on given model,\n     * defines getters / setters for associated records and associated records' ids,\n     * adds methods for creating unsaved child records and creating saved ones\n     *\n     * @method addMethodsToModelClass\n     * @param {Function} ModelClass\n     * @param {String} key\n     * @public\n     */\n\n  }, {\n    key: \"addMethodsToModelClass\",\n    value: function addMethodsToModelClass(ModelClass, key) {\n      var modelPrototype = ModelClass.prototype;\n      var association = this;\n      var foreignKey = this.getForeignKey();\n\n      var associationHash = _defineProperty({}, key, this);\n\n      modelPrototype.hasManyAssociations = Object.assign(modelPrototype.hasManyAssociations, associationHash); // update hasManyAssociationFks\n\n      Object.keys(modelPrototype.hasManyAssociations).forEach(function (key) {\n        var value = modelPrototype.hasManyAssociations[key];\n        modelPrototype.hasManyAssociationFks[value.getForeignKey()] = value;\n      }); // Add to target's dependent associations array\n\n      this.schema.addDependentAssociation(this, this.modelName); // TODO: look how this is used. Are these necessary, seems like they could be gotten from the above?\n      // Or we could use a single data structure to store this information?\n\n      modelPrototype.associationKeys.add(key);\n      modelPrototype.associationIdKeys.add(foreignKey);\n      Object.defineProperty(modelPrototype, foreignKey, {\n        /*\n          object.childrenIds\n            - returns an array of the associated children's ids\n        */\n        get: function get() {\n          this._tempAssociations = this._tempAssociations || {};\n          var tempChildren = this._tempAssociations[key];\n          var ids = [];\n\n          if (tempChildren) {\n            if (association.isPolymorphic) {\n              ids = tempChildren.models.map(function (model) {\n                return {\n                  type: model.modelName,\n                  id: model.id\n                };\n              });\n            } else {\n              ids = tempChildren.models.map(function (model) {\n                return model.id;\n              });\n            }\n          } else {\n            ids = this.attrs[foreignKey] || [];\n          }\n\n          return ids;\n        },\n\n        /*\n          object.childrenIds = ([childrenIds...])\n            - sets the associated children (via id)\n        */\n        set: function set(ids) {\n          var tempChildren;\n\n          if (ids === null) {\n            tempChildren = [];\n          } else if (ids !== undefined) {\n            assert(Array.isArray(ids), \"You must pass an array in when setting \".concat(foreignKey, \" on \").concat(this));\n\n            if (association.isPolymorphic) {\n              assert(ids.every(function (el) {\n                return _typeof(el) === \"object\" && _typeof(el.type) !== undefined && _typeof(el.id) !== undefined;\n              }), \"You must pass in an array of polymorphic identifiers (objects of shape { type, id }) when setting \".concat(foreignKey, \" on \").concat(this));\n              var models = ids.map(function (_ref) {\n                var type = _ref.type,\n                    id = _ref.id;\n                return association.schema[association.schema.toCollectionName(type)].find(id);\n              });\n              tempChildren = new PolymorphicCollection(models);\n            } else {\n              tempChildren = association.schema[association.schema.toCollectionName(association.modelName)].find(ids);\n            }\n          }\n\n          this[key] = tempChildren;\n        }\n      });\n      Object.defineProperty(modelPrototype, key, {\n        /*\n          object.children\n            - returns an array of associated children\n        */\n        get: function get() {\n          this._tempAssociations = this._tempAssociations || {};\n          var collection = null;\n\n          if (this._tempAssociations[key]) {\n            collection = this._tempAssociations[key];\n          } else {\n            if (association.isPolymorphic) {\n              if (this[foreignKey]) {\n                var polymorphicIds = this[foreignKey];\n                var models = polymorphicIds.map(function (_ref2) {\n                  var type = _ref2.type,\n                      id = _ref2.id;\n                  return association.schema[association.schema.toCollectionName(type)].find(id);\n                });\n                collection = new PolymorphicCollection(models);\n              } else {\n                collection = new PolymorphicCollection(association.modelName);\n              }\n            } else {\n              if (this[foreignKey]) {\n                collection = association.schema[association.schema.toCollectionName(association.modelName)].find(this[foreignKey]);\n              } else {\n                collection = new Collection(association.modelName);\n              }\n            }\n\n            this._tempAssociations[key] = collection;\n          }\n\n          return collection;\n        },\n\n        /*\n          object.children = [model1, model2, ...]\n            - sets the associated children (via array of models or Collection)\n        */\n        set: function set(models) {\n          var _this = this;\n\n          if (models instanceof Collection || models instanceof PolymorphicCollection) {\n            models = models.models;\n          }\n\n          models = models ? compact(models) : [];\n          this._tempAssociations = this._tempAssociations || {};\n          var collection;\n\n          if (association.isPolymorphic) {\n            collection = new PolymorphicCollection(models);\n          } else {\n            collection = new Collection(association.modelName, models);\n          }\n\n          this._tempAssociations[key] = collection;\n          models.forEach(function (model) {\n            if (model.hasInverseFor(association)) {\n              var inverse = model.inverseFor(association);\n              model.associate(_this, inverse);\n            }\n          });\n        }\n      });\n      /*\n        object.newChild\n          - creates a new unsaved associated child\n      */\n\n      modelPrototype[\"new\".concat(capitalize(camelize(this._container.inflector.singularize(association.name))))] = function () {\n        var modelName, attrs;\n\n        if (association.isPolymorphic) {\n          modelName = arguments.length <= 0 ? undefined : arguments[0];\n          attrs = arguments.length <= 1 ? undefined : arguments[1];\n        } else {\n          modelName = association.modelName;\n          attrs = arguments.length <= 0 ? undefined : arguments[0];\n        }\n\n        var child = association.schema[association.schema.toCollectionName(modelName)][\"new\"](attrs);\n        var children = this[key].models;\n        children.push(child);\n        this[key] = children;\n        return child;\n      };\n      /*\n        object.createChild\n          - creates a new saved associated child, and immediately persists both models\n         TODO: forgot why this[key].add(child) doesn't work, most likely\n        because these external APIs trigger saving cascades. Should probably\n        have an internal method like this[key]._add.\n      */\n\n\n      modelPrototype[\"create\".concat(capitalize(camelize(this._container.inflector.singularize(association.name))))] = function () {\n        var modelName, attrs;\n\n        if (association.isPolymorphic) {\n          modelName = arguments.length <= 0 ? undefined : arguments[0];\n          attrs = arguments.length <= 1 ? undefined : arguments[1];\n        } else {\n          modelName = association.modelName;\n          attrs = arguments.length <= 0 ? undefined : arguments[0];\n        }\n\n        var child = association.schema[association.schema.toCollectionName(modelName)].create(attrs);\n        var children = this[key].models;\n        children.push(child);\n        this[key] = children;\n        this.save();\n        return child.reload();\n      };\n    }\n    /**\n     *\n     *\n     * @public\n     */\n\n  }, {\n    key: \"disassociateAllDependentsFromTarget\",\n    value: function disassociateAllDependentsFromTarget(model) {\n      var _this2 = this;\n\n      var owner = this.ownerModelName;\n      var fk;\n\n      if (this.isPolymorphic) {\n        fk = {\n          type: model.modelName,\n          id: model.id\n        };\n      } else {\n        fk = model.id;\n      }\n\n      var dependents = this.schema[this.schema.toCollectionName(owner)].where(function (potentialOwner) {\n        var currentIds = potentialOwner[_this2.getForeignKey()]; // Need this check because currentIds could be null\n\n\n        return currentIds && currentIds.find(function (id) {\n          if (_typeof(id) === \"object\") {\n            return id.type === fk.type && id.id === fk.id;\n          } else {\n            return id === fk;\n          }\n        });\n      });\n      dependents.models.forEach(function (dependent) {\n        dependent.disassociate(model, _this2);\n        dependent.save();\n      });\n    }\n  }, {\n    key: \"identifier\",\n    get: function get() {\n      if (typeof identifierCache$1[this.name] !== \"string\") {\n        var identifier = \"\".concat(camelize(this._container.inflector.singularize(this.name)), \"Ids\");\n        identifierCache$1[this.name] = identifier;\n      }\n\n      return identifierCache$1[this.name];\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return \"hasMany\";\n    }\n  }]);\n\n  return HasMany;\n}(Association);\n\nvar pathModelClassCache = {};\n/**\n  @hide\n*/\n\nvar BaseRouteHandler = /*#__PURE__*/function () {\n  function BaseRouteHandler() {\n    _classCallCheck(this, BaseRouteHandler);\n  }\n\n  _createClass(BaseRouteHandler, [{\n    key: \"getModelClassFromPath\",\n    value: function getModelClassFromPath(fullPath) {\n      if (!fullPath) {\n        return;\n      }\n\n      if (typeof pathModelClassCache[fullPath] !== \"string\") {\n        var path = fullPath.split(\"/\");\n        var lastPath;\n\n        for (var i = path.length - 1; i >= 0; i--) {\n          var segment = path[i];\n\n          if (segment.length && segment[0] !== \":\") {\n            lastPath = segment;\n            break;\n          }\n        }\n\n        pathModelClassCache[fullPath] = dasherize(camelize(this._container.inflector.singularize(lastPath)));\n      }\n\n      return pathModelClassCache[fullPath];\n    }\n  }, {\n    key: \"_getIdForRequest\",\n    value: function _getIdForRequest(request, jsonApiDoc) {\n      var id;\n\n      if (request && request.params && request.params.id) {\n        id = request.params.id;\n      } else if (jsonApiDoc && jsonApiDoc.data && jsonApiDoc.data.id) {\n        id = jsonApiDoc.data.id;\n      }\n\n      return id;\n    }\n  }, {\n    key: \"_getJsonApiDocForRequest\",\n    value: function _getJsonApiDocForRequest(request, modelName) {\n      var body;\n\n      if (request && request.requestBody) {\n        body = JSON.parse(request.requestBody);\n      }\n\n      return this.serializerOrRegistry.normalize(body, modelName);\n    }\n  }, {\n    key: \"_getAttrsForRequest\",\n    value: function _getAttrsForRequest(request, modelName) {\n      var _this = this;\n\n      var json = this._getJsonApiDocForRequest(request, modelName);\n\n      var id = this._getIdForRequest(request, json);\n\n      var attrs = {};\n      assert(json.data && (json.data.attributes || json.data.type || json.data.relationships), \"You're using a shorthand or #normalizedRequestAttrs, but your serializer's normalize function did not return a valid JSON:API document. Consult the docs for the normalize hook on the Serializer class.\");\n\n      if (json.data.attributes) {\n        attrs = Object.keys(json.data.attributes).reduce(function (sum, key) {\n          sum[camelize(key)] = json.data.attributes[key];\n          return sum;\n        }, {});\n      }\n\n      if (json.data.relationships) {\n        Object.keys(json.data.relationships).forEach(function (relationshipName) {\n          var relationship = json.data.relationships[relationshipName];\n\n          var modelClass = _this.schema.modelClassFor(modelName);\n\n          var association = modelClass.associationFor(camelize(relationshipName));\n          var valueForRelationship;\n          assert(association, \"You're passing the relationship '\".concat(relationshipName, \"' to the '\").concat(modelName, \"' model via a \").concat(request.method, \" to '\").concat(request.url, \"', but you did not define the '\").concat(relationshipName, \"' association on the '\").concat(modelName, \"' model.\"));\n\n          if (association.isPolymorphic) {\n            valueForRelationship = relationship.data;\n          } else if (association instanceof HasMany) {\n            valueForRelationship = relationship.data && relationship.data.map(function (rel) {\n              return rel.id;\n            });\n          } else {\n            valueForRelationship = relationship.data && relationship.data.id;\n          }\n\n          attrs[association.identifier] = valueForRelationship;\n        }, {});\n      }\n\n      if (id) {\n        attrs.id = id;\n      }\n\n      return attrs;\n    }\n  }, {\n    key: \"_getAttrsForFormRequest\",\n    value: function _getAttrsForFormRequest(_ref) {\n      var requestBody = _ref.requestBody;\n      var attrs;\n      var urlEncodedParts = [];\n      assert(requestBody && typeof requestBody === \"string\", \"You're using the helper method #normalizedFormData, but the request body is empty or not a valid url encoded string.\");\n      urlEncodedParts = requestBody.split(\"&\");\n      attrs = urlEncodedParts.reduce(function (a, urlEncodedPart) {\n        var _urlEncodedPart$split = urlEncodedPart.split(\"=\"),\n            _urlEncodedPart$split2 = _slicedToArray(_urlEncodedPart$split, 2),\n            key = _urlEncodedPart$split2[0],\n            value = _urlEncodedPart$split2[1];\n\n        a[key] = decodeURIComponent(value.replace(/\\+/g, \" \"));\n        return a;\n      }, {});\n      return attrs;\n    }\n  }]);\n\n  return BaseRouteHandler;\n}();\n/**\n * @hide\n */\n\n\nvar FunctionRouteHandler = /*#__PURE__*/function (_BaseRouteHandler) {\n  _inherits(FunctionRouteHandler, _BaseRouteHandler);\n\n  var _super = _createSuper(FunctionRouteHandler);\n\n  function FunctionRouteHandler(schema, serializerOrRegistry, userFunction, path, server) {\n    var _this;\n\n    _classCallCheck(this, FunctionRouteHandler);\n\n    _this = _super.call(this, server);\n    _this.schema = schema;\n    _this.serializerOrRegistry = serializerOrRegistry;\n    _this.userFunction = userFunction;\n    _this.path = path;\n    return _this;\n  }\n\n  _createClass(FunctionRouteHandler, [{\n    key: \"handle\",\n    value: function handle(request) {\n      return this.userFunction(this.schema, request);\n    }\n  }, {\n    key: \"setRequest\",\n    value: function setRequest(request) {\n      this.request = request;\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize(response, serializerType) {\n      var serializer;\n\n      if (serializerType) {\n        serializer = this.serializerOrRegistry.serializerFor(serializerType, {\n          explicit: true\n        });\n      } else {\n        serializer = this.serializerOrRegistry;\n      }\n\n      return serializer.serialize(response, this.request);\n    }\n  }, {\n    key: \"normalizedRequestAttrs\",\n    value: function normalizedRequestAttrs() {\n      var modelName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var path = this.path,\n          request = this.request,\n          requestHeaders = this.request.requestHeaders;\n      var attrs;\n      var lowerCaseHeaders = {};\n\n      for (var header in requestHeaders) {\n        lowerCaseHeaders[header.toLowerCase()] = requestHeaders[header];\n      }\n\n      if (/x-www-form-urlencoded/.test(lowerCaseHeaders[\"content-type\"])) {\n        attrs = this._getAttrsForFormRequest(request);\n      } else {\n        if (modelName) {\n          assert(dasherize(modelName) === modelName, \"You called normalizedRequestAttrs('\".concat(modelName, \"'), but normalizedRequestAttrs was intended to be used with the dasherized version of the model type. Please change this to normalizedRequestAttrs('\").concat(dasherize(modelName), \"').\"));\n        } else {\n          modelName = this.getModelClassFromPath(path);\n        }\n\n        assert(this.schema.hasModelForModelName(modelName), \"You're using a shorthand or the #normalizedRequestAttrs helper but the detected model of '\".concat(modelName, \"' does not exist. You might need to pass in the correct modelName as the first argument to #normalizedRequestAttrs.\"));\n        attrs = this._getAttrsForRequest(request, modelName);\n      }\n\n      return attrs;\n    }\n  }]);\n\n  return FunctionRouteHandler;\n}(BaseRouteHandler);\n/**\n * @hide\n */\n\n\nvar ObjectRouteHandler = /*#__PURE__*/function () {\n  function ObjectRouteHandler(schema, serializerOrRegistry, object) {\n    _classCallCheck(this, ObjectRouteHandler);\n\n    this.schema = schema;\n    this.serializerOrRegistry = serializerOrRegistry;\n    this.object = object;\n  }\n\n  _createClass(ObjectRouteHandler, [{\n    key: \"handle\",\n    value: function handle()\n    /* request */\n    {\n      return this.object;\n    }\n  }]);\n\n  return ObjectRouteHandler;\n}();\n/**\n  @hide\n*/\n\n\nvar BaseShorthandRouteHandler = /*#__PURE__*/function (_BaseRouteHandler) {\n  _inherits(BaseShorthandRouteHandler, _BaseRouteHandler);\n\n  var _super = _createSuper(BaseShorthandRouteHandler);\n\n  function BaseShorthandRouteHandler(schema, serializerOrRegistry, shorthand, path) {\n    var _this;\n\n    var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n\n    _classCallCheck(this, BaseShorthandRouteHandler);\n\n    _this = _super.call(this);\n    shorthand = shorthand || _this.getModelClassFromPath(path);\n    _this.schema = schema;\n    _this.serializerOrRegistry = serializerOrRegistry;\n    _this.shorthand = shorthand;\n    _this.options = options;\n    var type = Array.isArray(shorthand) ? \"array\" : _typeof(shorthand);\n\n    if (type === \"string\") {\n      var modelClass = _this.schema[_this.schema.toCollectionName(shorthand)];\n\n      _this.handle = function (request) {\n        return _this.handleStringShorthand(request, modelClass);\n      };\n    } else if (type === \"array\") {\n      var modelClasses = shorthand.map(function (modelName) {\n        return _this.schema[_this.schema.toCollectionName(modelName)];\n      });\n\n      _this.handle = function (request) {\n        return _this.handleArrayShorthand(request, modelClasses);\n      };\n    }\n\n    return _this;\n  } // handleStringShorthand() {\n  //\n  // }\n  //\n  // handleArrayShorthand() {\n  //\n  // }\n\n\n  return BaseShorthandRouteHandler;\n}(BaseRouteHandler);\n/**\n * @hide\n */\n\n\nvar GetShorthandRouteHandler = /*#__PURE__*/function (_BaseShorthandRouteHa) {\n  _inherits(GetShorthandRouteHandler, _BaseShorthandRouteHa);\n\n  var _super = _createSuper(GetShorthandRouteHandler);\n\n  function GetShorthandRouteHandler() {\n    _classCallCheck(this, GetShorthandRouteHandler);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(GetShorthandRouteHandler, [{\n    key: \"handleStringShorthand\",\n\n    /*\n      Retrieve a model/collection from the db.\n       Examples:\n        this.get('/contacts', 'contact');\n        this.get('/contacts/:id', 'contact');\n    */\n    value: function handleStringShorthand(request, modelClass) {\n      var modelName = this.shorthand;\n      var camelizedModelName = camelize(modelName);\n      assert(modelClass, \"The route handler for \".concat(request.url, \" is trying to access the \").concat(camelizedModelName, \" model, but that model doesn't exist.\"));\n\n      var id = this._getIdForRequest(request);\n\n      if (id) {\n        var model = modelClass.find(id);\n\n        if (!model) {\n          return new Response(404);\n        } else {\n          return model;\n        }\n      } else if (this.options.coalesce) {\n        var ids = this.serializerOrRegistry.getCoalescedIds(request, camelizedModelName);\n\n        if (ids) {\n          return modelClass.find(ids);\n        }\n      }\n\n      return modelClass.all();\n    }\n    /*\n      Retrieve an array of collections from the db.\n       Ex: this.get('/home', ['contacts', 'pictures']);\n    */\n\n  }, {\n    key: \"handleArrayShorthand\",\n    value: function handleArrayShorthand(request, modelClasses) {\n      var keys = this.shorthand;\n\n      var id = this._getIdForRequest(request);\n      /*\n      If the first key is singular and we have an id param in\n      the request, we're dealing with the version of the shorthand\n      that has a parent model and several has-many relationships.\n      We throw an error, because the serializer is the appropriate\n      place for this now.\n      */\n\n\n      assert(!id || this._container.inflector.singularize(keys[0]) !== keys[0], \"It looks like you're using the \\\"Single record with\\n      related records\\\" version of the array shorthand, in addition to opting\\n      in to the model layer. This shorthand was made when there was no\\n      serializer layer. Now that you're using models, please ensure your\\n      relationships are defined, and create a serializer for the parent\\n      model, adding the relationships there.\");\n      return modelClasses.map(function (modelClass) {\n        return modelClass.all();\n      });\n    }\n  }]);\n\n  return GetShorthandRouteHandler;\n}(BaseShorthandRouteHandler);\n/**\n * @hide\n */\n\n\nvar PostShorthandRouteHandler = /*#__PURE__*/function (_BaseShorthandRouteHa) {\n  _inherits(PostShorthandRouteHandler, _BaseShorthandRouteHa);\n\n  var _super = _createSuper(PostShorthandRouteHandler);\n\n  function PostShorthandRouteHandler() {\n    _classCallCheck(this, PostShorthandRouteHandler);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(PostShorthandRouteHandler, [{\n    key: \"handleStringShorthand\",\n\n    /*\n      Push a new model of type *camelizedModelName* to the db.\n       For example, this will push a 'user':\n        this.post('/contacts', 'user');\n    */\n    value: function handleStringShorthand(request, modelClass) {\n      var modelName = this.shorthand;\n      var camelizedModelName = camelize(modelName);\n      assert(modelClass, \"The route handler for \".concat(request.url, \" is trying to access the \").concat(camelizedModelName, \" model, but that model doesn't exist.\"));\n\n      var attrs = this._getAttrsForRequest(request, modelClass.camelizedModelName);\n\n      return modelClass.create(attrs);\n    }\n  }]);\n\n  return PostShorthandRouteHandler;\n}(BaseShorthandRouteHandler);\n/**\n * @hide\n */\n\n\nvar PutShorthandRouteHandler = /*#__PURE__*/function (_BaseShorthandRouteHa) {\n  _inherits(PutShorthandRouteHandler, _BaseShorthandRouteHa);\n\n  var _super = _createSuper(PutShorthandRouteHandler);\n\n  function PutShorthandRouteHandler() {\n    _classCallCheck(this, PutShorthandRouteHandler);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(PutShorthandRouteHandler, [{\n    key: \"handleStringShorthand\",\n\n    /*\n      Update an object from the db, specifying the type.\n         this.put('/contacts/:id', 'user');\n    */\n    value: function handleStringShorthand(request, modelClass) {\n      var modelName = this.shorthand;\n      var camelizedModelName = camelize(modelName);\n      assert(modelClass, \"The route handler for \".concat(request.url, \" is trying to access the \").concat(camelizedModelName, \" model, but that model doesn't exist.\"));\n\n      var id = this._getIdForRequest(request);\n\n      var model = modelClass.find(id);\n\n      if (!model) {\n        return new Response(404);\n      }\n\n      var attrs = this._getAttrsForRequest(request, modelClass.camelizedModelName);\n\n      return model.update(attrs);\n    }\n  }]);\n\n  return PutShorthandRouteHandler;\n}(BaseShorthandRouteHandler);\n/**\n * @hide\n */\n\n\nvar DeleteShorthandRouteHandler = /*#__PURE__*/function (_BaseShorthandRouteHa) {\n  _inherits(DeleteShorthandRouteHandler, _BaseShorthandRouteHa);\n\n  var _super = _createSuper(DeleteShorthandRouteHandler);\n\n  function DeleteShorthandRouteHandler() {\n    _classCallCheck(this, DeleteShorthandRouteHandler);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DeleteShorthandRouteHandler, [{\n    key: \"handleStringShorthand\",\n\n    /*\n      Remove the model from the db of type *camelizedModelName*.\n       This would remove the user with id :id:\n        Ex: this.del('/contacts/:id', 'user');\n    */\n    value: function handleStringShorthand(request, modelClass) {\n      var modelName = this.shorthand;\n      var camelizedModelName = camelize(modelName);\n      assert(modelClass, \"The route handler for \".concat(request.url, \" is trying to access the \").concat(camelizedModelName, \" model, but that model doesn't exist.\"));\n\n      var id = this._getIdForRequest(request);\n\n      var model = modelClass.find(id);\n\n      if (!model) {\n        return new Response(404);\n      }\n\n      model.destroy();\n    }\n    /*\n      Remove the model and child related models from the db.\n       This would remove the contact with id `:id`, as well\n      as this contact's addresses and phone numbers.\n        Ex: this.del('/contacts/:id', ['contact', 'addresses', 'numbers');\n    */\n\n  }, {\n    key: \"handleArrayShorthand\",\n    value: function handleArrayShorthand(request, modelClasses) {\n      var _this = this;\n\n      var id = this._getIdForRequest(request);\n\n      var parent = modelClasses[0].find(id);\n      var childTypes = modelClasses.slice(1).map(function (modelClass) {\n        return _this._container.inflector.pluralize(modelClass.camelizedModelName);\n      }); // Delete related children\n\n      childTypes.forEach(function (type) {\n        return parent[type].destroy();\n      });\n      parent.destroy();\n    }\n  }]);\n\n  return DeleteShorthandRouteHandler;\n}(BaseShorthandRouteHandler);\n/**\n * @hide\n */\n\n\nvar HeadShorthandRouteHandler = /*#__PURE__*/function (_BaseShorthandRouteHa) {\n  _inherits(HeadShorthandRouteHandler, _BaseShorthandRouteHa);\n\n  var _super = _createSuper(HeadShorthandRouteHandler);\n\n  function HeadShorthandRouteHandler() {\n    _classCallCheck(this, HeadShorthandRouteHandler);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(HeadShorthandRouteHandler, [{\n    key: \"handleStringShorthand\",\n\n    /*\n      Retrieve a model/collection from the db.\n       Examples:\n        this.head('/contacts', 'contact');\n        this.head('/contacts/:id', 'contact');\n    */\n    value: function handleStringShorthand(request, modelClass) {\n      var modelName = this.shorthand;\n      var camelizedModelName = camelize(modelName);\n      assert(modelClass, \"The route handler for \".concat(request.url, \" is trying to access the \").concat(camelizedModelName, \" model, but that model doesn't exist.\"));\n\n      var id = this._getIdForRequest(request);\n\n      if (id) {\n        var model = modelClass.find(id);\n\n        if (!model) {\n          return new Response(404);\n        } else {\n          return new Response(204);\n        }\n      } else if (this.options.coalesce && request.queryParams && request.queryParams.ids) {\n        var _model = modelClass.find(request.queryParams.ids);\n\n        if (!_model) {\n          return new Response(404);\n        } else {\n          return new Response(204);\n        }\n      } else {\n        return new Response(204);\n      }\n    }\n  }]);\n\n  return HeadShorthandRouteHandler;\n}(BaseShorthandRouteHandler);\n\nvar DEFAULT_CODES = {\n  get: 200,\n  put: 204,\n  post: 201,\n  \"delete\": 204\n};\n\nfunction createHandler(_ref) {\n  var verb = _ref.verb,\n      schema = _ref.schema,\n      serializerOrRegistry = _ref.serializerOrRegistry,\n      path = _ref.path,\n      rawHandler = _ref.rawHandler,\n      options = _ref.options;\n  var handler;\n  var args = [schema, serializerOrRegistry, rawHandler, path, options];\n\n  var type = _typeof(rawHandler);\n\n  if (type === \"function\") {\n    handler = _construct(FunctionRouteHandler, args);\n  } else if (type === \"object\" && rawHandler) {\n    handler = _construct(ObjectRouteHandler, args);\n  } else if (verb === \"get\") {\n    handler = _construct(GetShorthandRouteHandler, args);\n  } else if (verb === \"post\") {\n    handler = _construct(PostShorthandRouteHandler, args);\n  } else if (verb === \"put\" || verb === \"patch\") {\n    handler = _construct(PutShorthandRouteHandler, args);\n  } else if (verb === \"delete\") {\n    handler = _construct(DeleteShorthandRouteHandler, args);\n  } else if (verb === \"head\") {\n    handler = _construct(HeadShorthandRouteHandler, args);\n  }\n\n  return handler;\n}\n/**\n * @hide\n */\n\n\nvar RouteHandler = /*#__PURE__*/function () {\n  function RouteHandler(_ref2) {\n    var schema = _ref2.schema,\n        verb = _ref2.verb,\n        rawHandler = _ref2.rawHandler,\n        customizedCode = _ref2.customizedCode,\n        options = _ref2.options,\n        path = _ref2.path,\n        serializerOrRegistry = _ref2.serializerOrRegistry;\n\n    _classCallCheck(this, RouteHandler);\n\n    this.verb = verb;\n    this.customizedCode = customizedCode;\n    this.serializerOrRegistry = serializerOrRegistry;\n    this.handler = createHandler({\n      verb: verb,\n      schema: schema,\n      path: path,\n      serializerOrRegistry: serializerOrRegistry,\n      rawHandler: rawHandler,\n      options: options\n    });\n  }\n\n  _createClass(RouteHandler, [{\n    key: \"handle\",\n    value: function handle(request) {\n      var _this = this;\n\n      return this._getMirageResponseForRequest(request).then(function (mirageResponse) {\n        return _this.serialize(mirageResponse, request);\n      }).then(function (serializedMirageResponse) {\n        return serializedMirageResponse.toRackResponse();\n      });\n    }\n  }, {\n    key: \"_getMirageResponseForRequest\",\n    value: function _getMirageResponseForRequest(request) {\n      var result;\n\n      try {\n        /*\n         We need to do this for the #serialize convenience method. Probably is\n         a better way.\n        */\n        if (this.handler instanceof FunctionRouteHandler) {\n          this.handler.setRequest(request);\n        }\n\n        result = this.handler.handle(request);\n      } catch (e) {\n        if (e instanceof MirageError) {\n          result = new Response(500, {}, e);\n        } else {\n          var message = e.message || e;\n          result = new Response(500, {}, {\n            message: message,\n            stack: \"Mirage: Your \".concat(request.method, \" handler for the url \").concat(request.url, \" threw an error:\\n\\n\").concat(e.stack || e)\n          });\n        }\n      }\n\n      return this._toMirageResponse(result);\n    }\n  }, {\n    key: \"_toMirageResponse\",\n    value: function _toMirageResponse(result) {\n      var _this2 = this;\n\n      var mirageResponse;\n      return new Promise(function (resolve, reject) {\n        Promise.resolve(result).then(function (response) {\n          if (response instanceof Response) {\n            mirageResponse = result;\n          } else {\n            var code = _this2._getCodeForResponse(response);\n\n            mirageResponse = new Response(code, {}, response);\n          }\n\n          resolve(mirageResponse);\n        })[\"catch\"](reject);\n      });\n    }\n  }, {\n    key: \"_getCodeForResponse\",\n    value: function _getCodeForResponse(response) {\n      var code;\n\n      if (this.customizedCode) {\n        code = this.customizedCode;\n      } else {\n        code = DEFAULT_CODES[this.verb]; // Returning any data for a 204 is invalid\n\n        if (code === 204 && response !== undefined && response !== \"\") {\n          code = 200;\n        }\n      }\n\n      return code;\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize(mirageResponse, request) {\n      mirageResponse.data = this.serializerOrRegistry.serialize(mirageResponse.data, request);\n      return mirageResponse;\n    }\n  }]);\n\n  return RouteHandler;\n}();\n/**\n  @hide\n*/\n\n\nfunction extend(protoProps, staticProps) {\n  var Child = /*#__PURE__*/function (_this) {\n    _inherits(Child, _this);\n\n    var _super = _createSuper(Child);\n\n    function Child() {\n      var _this2;\n\n      _classCallCheck(this, Child);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this2 = _super.call.apply(_super, [this].concat(args)); // The constructor function for the new subclass is optionally defined by you\n      // in your `extend` definition\n\n      if (protoProps && has(protoProps, \"constructor\")) {\n        var _protoProps$construct;\n\n        (_protoProps$construct = protoProps.constructor).call.apply(_protoProps$construct, [_assertThisInitialized(_this2)].concat(args));\n      }\n\n      return _this2;\n    }\n\n    return Child;\n  }(this); // Add static properties to the constructor function, if supplied.\n\n\n  Object.assign(Child, this, staticProps); // Add prototype properties (instance properties) to the subclass,\n  // if supplied.\n\n  if (protoProps) {\n    Object.assign(Child.prototype, protoProps);\n  }\n\n  return Child;\n}\n/**\n  Models wrap your database, and allow you to define relationships.\n\n  **Class vs. instance methods**\n\n  The methods documented below apply to _instances_ of models, but you'll typically use the `Schema` to access the model _class_, which can be used to find or create instances.\n\n  You can find the Class methods documented under the `Schema` API docs.\n\n  **Accessing properties and relationships**\n\n  You can access properites (fields) and relationships directly off of models.\n\n  ```js\n  user.name;    // 'Sam'\n  user.team;    // Team model\n  user.teamId;  // Team id (foreign key)\n  ```\n\n  Mirage Models are schemaless in their attributes, but their relationship schema is known.\n\n  For example,\n\n  ```js\n  let user = schema.users.create();\n  user.attrs  // { }\n  user.name   // undefined\n\n  let user = schema.users.create({ name: 'Sam' });\n  user.attrs  // { name: 'Sam' }\n  user.name   // 'Sam'\n  ```\n\n  However, if a `user` has a `posts` relationships defined,\n\n  ```js\n  let user = schema.users.create();\n  user.posts  // returns an empty Posts Collection\n  ```\n\n  @class Model\n  @constructor\n  @public\n */\n\n\nvar Model = /*#__PURE__*/function () {\n  // TODO: schema and modelName now set statically at registration, need to remove\n\n  /*\n    Notes:\n   - We need to pass in modelName, because models are created with\n    .extend and anonymous functions, so you cannot use\n    reflection to find the name of the constructor.\n  */\n  function Model(schema, modelName, attrs, fks) {\n    var _this = this;\n\n    _classCallCheck(this, Model);\n\n    assert(schema, \"A model requires a schema\");\n    assert(modelName, \"A model requires a modelName\");\n    this._schema = schema;\n    this.modelName = modelName;\n    this.fks = fks || [];\n    /**\n      Returns the attributes of your model.\n       ```js\n      let post = schema.blogPosts.find(1);\n      post.attrs; // {id: 1, title: 'Lorem Ipsum', publishedAt: '2012-01-01 10:00:00'}\n      ```\n       Note that you can also access individual attributes directly off a model, e.g. `post.title`.\n       @property attrs\n      @public\n    */\n\n    this.attrs = {};\n    attrs = attrs || {}; // Ensure fks are there\n\n    this.fks.forEach(function (fk) {\n      _this.attrs[fk] = attrs[fk] !== undefined ? attrs[fk] : null;\n    });\n    Object.keys(attrs).forEach(function (name) {\n      var value = attrs[name];\n\n      _this._validateAttr(name, value);\n\n      _this._setupAttr(name, value);\n\n      _this._setupRelationship(name, value);\n    });\n    return this;\n  }\n  /**\n    Create or saves the model.\n     ```js\n    let post = blogPosts.new({ title: 'Lorem ipsum' });\n    post.id; // null\n     post.save();\n    post.id; // 1\n     post.title = 'Hipster ipsum'; // db has not been updated\n    post.save();                  // ...now the db is updated\n    ```\n     @method save\n    @return this\n    @public\n   */\n\n\n  _createClass(Model, [{\n    key: \"save\",\n    value: function save() {\n      var collection = this._schema.toInternalCollectionName(this.modelName);\n\n      if (this.isNew()) {\n        // Update the attrs with the db response\n        this.attrs = this._schema.db[collection].insert(this.attrs); // Ensure the id getter/setter is set\n\n        this._definePlainAttribute(\"id\");\n      } else {\n        this._schema.isSaving[this.toString()] = true;\n\n        this._schema.db[collection].update(this.attrs.id, this.attrs);\n      }\n\n      this._saveAssociations();\n\n      this._schema.isSaving[this.toString()] = false;\n      return this;\n    }\n    /**\n      Updates the record in the db.\n       ```js\n      let post = blogPosts.find(1);\n      post.update('title', 'Hipster ipsum'); // the db was updated\n      post.update({\n        title: 'Lorem ipsum',\n        created_at: 'before it was cool'\n      });\n      ```\n       @method update\n      @param {String} key\n      @param {String} val\n      @return this\n      @public\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(key, val) {\n      var attrs;\n\n      if (key == null) {\n        return this;\n      }\n\n      if (_typeof(key) === \"object\") {\n        attrs = key;\n      } else {\n        (attrs = {})[key] = val;\n      }\n\n      Object.keys(attrs).forEach(function (attr) {\n        if (!this.associationKeys.has(attr) && !this.associationIdKeys.has(attr)) {\n          this._definePlainAttribute(attr);\n        }\n\n        this[attr] = attrs[attr];\n      }, this);\n      this.save();\n      return this;\n    }\n    /**\n      Destroys the db record.\n       ```js\n      let post = blogPosts.find(1);\n      post.destroy(); // removed from the db\n      ```\n       @method destroy\n      @public\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.isSaved()) {\n        this._disassociateFromDependents();\n\n        var collection = this._schema.toInternalCollectionName(this.modelName);\n\n        this._schema.db[collection].remove(this.attrs.id);\n      }\n    }\n    /**\n      Boolean, true if the model has not been persisted yet to the db.\n       ```js\n      let post = blogPosts.new({title: 'Lorem ipsum'});\n      post.isNew(); // true\n      post.id;      // null\n       post.save();  // true\n      post.isNew(); // false\n      post.id;      // 1\n      ```\n       @method isNew\n      @return {Boolean}\n      @public\n     */\n\n  }, {\n    key: \"isNew\",\n    value: function isNew() {\n      var hasDbRecord = false;\n      var hasId = this.attrs.id !== undefined && this.attrs.id !== null;\n\n      if (hasId) {\n        var collectionName = this._schema.toInternalCollectionName(this.modelName);\n\n        var record = this._schema.db[collectionName].find(this.attrs.id);\n\n        if (record) {\n          hasDbRecord = true;\n        }\n      }\n\n      return !hasDbRecord;\n    }\n    /**\n      Boolean, opposite of `isNew`\n       @method isSaved\n      @return {Boolean}\n      @public\n     */\n\n  }, {\n    key: \"isSaved\",\n    value: function isSaved() {\n      return !this.isNew();\n    }\n    /**\n      Reload a model's data from the database.\n       ```js\n      let post = blogPosts.find(1);\n      post.attrs;     // {id: 1, title: 'Lorem ipsum'}\n       post.title = 'Hipster ipsum';\n      post.title;     // 'Hipster ipsum';\n       post.reload();  // true\n      post.title;     // 'Lorem ipsum'\n      ```\n       @method reload\n      @return this\n      @public\n     */\n\n  }, {\n    key: \"reload\",\n    value: function reload() {\n      if (this.id) {\n        var collection = this._schema.toInternalCollectionName(this.modelName);\n\n        var attrs = this._schema.db[collection].find(this.id);\n\n        Object.keys(attrs).filter(function (attr) {\n          return attr !== \"id\";\n        }).forEach(function (attr) {\n          this.attrs[attr] = attrs[attr];\n        }, this);\n      } // Clear temp associations\n\n\n      this._tempAssociations = {};\n      return this;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.attrs;\n    }\n    /**\n      Returns a hash of this model's associations.\n       ```js\n      let server = new Server({\n        models: {\n          user: Model,\n          post: Model.extend({\n            user: belongsTo(),\n            comments: hasMany()\n          }),\n          comment: Model\n        },\n         seeds(server) {\n          let peter = server.create(\"user\", { name: \"Peter\" });\n          server.create(\"post\", { user: peter });\n        }\n      });\n       let post = server.schema.posts.find(1)\n      post.associations\n       // {\n      //   user: BelongsToAssociation,\n      //   comments: HasManyAssociation\n      // }\n      ```\n       Check out the docs on the Association class to see what fields are available for each association.\n       @method associations\n      @type {Object}\n      @public\n     */\n\n  }, {\n    key: \"associationFor\",\n\n    /**\n      Returns the association for the given key\n       @method associationFor\n      @param key\n      @public\n      @hide\n     */\n    value: function associationFor(key) {\n      return this.associations[key];\n    }\n    /**\n      Returns this model's inverse association for the given\n      model-type-association pair, if it exists.\n       Example:\n            post: Model.extend({\n             comments: hasMany()\n           }),\n           comments: Model.extend({\n             post: belongsTo()\n           })\n        post.inversefor(commentsPostAssociation) would return the\n       `post.comments` association object.\n        Originally we had association.inverse() but that became impossible with\n       the addition of polymorphic models. Consider the following:\n            post: Model.extend({\n             comments: hasMany()\n           }),\n           picture: Model.extend({\n             comments: hasMany()\n           }),\n           comments: Model.extend({\n             commentable: belongsTo({ polymorphic: true })\n           })\n        `commentable.inverse()` is ambiguous - does it return\n       `post.comments` or `picture.comments`? Instead we need to ask each model\n       if it has an inverse for a given association. post.inverseFor(commentable)\n       is no longer ambiguous.\n       @method hasInverseFor\n      @param {String} modelName The model name of the class we're scanning\n      @param {ORM/Association} association\n      @return {ORM/Association}\n      @public\n      @hide\n     */\n\n  }, {\n    key: \"inverseFor\",\n    value: function inverseFor(association) {\n      return this._explicitInverseFor(association) || this._implicitInverseFor(association);\n    }\n    /**\n      Finds the inverse for an association that explicity defines it's inverse\n       @private\n      @hide\n    */\n\n  }, {\n    key: \"_explicitInverseFor\",\n    value: function _explicitInverseFor(association) {\n      this._checkForMultipleExplicitInverses(association);\n\n      var associations = this._schema.associationsFor(this.modelName);\n\n      var inverse = association.opts.inverse;\n      var candidate = inverse ? associations[inverse] : null;\n      var matchingPolymorphic = candidate && candidate.isPolymorphic;\n      var matchingInverse = candidate && candidate.modelName === association.ownerModelName;\n      var candidateInverse = candidate && candidate.opts.inverse;\n\n      if (candidateInverse && candidate.opts.inverse !== association.name) {\n        assert(false, \"You specified an inverse of \".concat(inverse, \" for \").concat(association.name, \", but it does not match \").concat(candidate.modelName, \" \").concat(candidate.name, \"'s inverse\"));\n      }\n\n      return matchingPolymorphic || matchingInverse ? candidate : null;\n    }\n    /**\n      Ensures multiple explicit inverses don't exist on the current model\n      for the given association.\n       TODO: move this to compile-time check\n       @private\n      @hide\n    */\n\n  }, {\n    key: \"_checkForMultipleExplicitInverses\",\n    value: function _checkForMultipleExplicitInverses(association) {\n      var associations = this._schema.associationsFor(this.modelName);\n\n      var matchingExplicitInverses = Object.keys(associations).filter(function (key) {\n        var candidate = associations[key];\n        var modelMatches = association.ownerModelName === candidate.modelName;\n        var inverseKeyMatches = association.name === candidate.opts.inverse;\n        return modelMatches && inverseKeyMatches;\n      });\n      assert(matchingExplicitInverses.length <= 1, \"The \".concat(this.modelName, \" model has defined multiple explicit inverse associations for the \").concat(association.ownerModelName, \".\").concat(association.name, \" association.\"));\n    }\n    /**\n      Finds if there is an inverse for an association that does not\n      explicitly define one.\n       @private\n      @hide\n    */\n\n  }, {\n    key: \"_implicitInverseFor\",\n    value: function _implicitInverseFor(association) {\n      var _this2 = this;\n\n      var associations = this._schema.associationsFor(this.modelName);\n\n      var modelName = association.ownerModelName;\n      return values(associations).filter(function (candidate) {\n        return candidate.modelName === modelName;\n      }).reduce(function (inverse, candidate) {\n        var candidateInverse = candidate.opts.inverse;\n        var candidateIsImplicitInverse = candidateInverse === undefined;\n        var candidateIsExplicitInverse = candidateInverse === association.name;\n        var candidateMatches = candidateIsImplicitInverse || candidateIsExplicitInverse;\n\n        if (candidateMatches) {\n          // Need to move this check to compile-time init\n          assert(!inverse, \"The \".concat(_this2.modelName, \" model has multiple possible inverse associations for the \").concat(association.ownerModelName, \".\").concat(association.name, \" association.\"));\n          inverse = candidate;\n        }\n\n        return inverse;\n      }, null);\n    }\n    /**\n      Returns whether this model has an inverse association for the given\n      model-type-association pair.\n       @method hasInverseFor\n      @param {String} modelName\n      @param {ORM/Association} association\n      @return {Boolean}\n      @public\n      @hide\n     */\n\n  }, {\n    key: \"hasInverseFor\",\n    value: function hasInverseFor(association) {\n      return !!this.inverseFor(association);\n    }\n    /**\n      Used to check if models match each other. If models are saved, we check model type\n      and id, since they could have other non-persisted properties that are different.\n       @public\n      @hide\n    */\n\n  }, {\n    key: \"alreadyAssociatedWith\",\n    value: function alreadyAssociatedWith(model, association) {\n      var associatedModelOrCollection = this[association.name];\n\n      if (associatedModelOrCollection && model) {\n        if (associatedModelOrCollection instanceof Model) {\n          if (associatedModelOrCollection.isSaved() && model.isSaved()) {\n            return associatedModelOrCollection.toString() === model.toString();\n          } else {\n            return associatedModelOrCollection === model;\n          }\n        } else {\n          return associatedModelOrCollection.includes(model);\n        }\n      }\n    }\n  }, {\n    key: \"associate\",\n    value: function associate(model, association) {\n      if (this.alreadyAssociatedWith(model, association)) {\n        return;\n      }\n\n      var name = association.name;\n\n      if (association instanceof HasMany) {\n        if (!this[name].includes(model)) {\n          this[name].add(model);\n        }\n      } else {\n        this[name] = model;\n      }\n    }\n  }, {\n    key: \"disassociate\",\n    value: function disassociate(model, association) {\n      var fk = association.getForeignKey();\n\n      if (association instanceof HasMany) {\n        var i;\n\n        if (association.isPolymorphic) {\n          var found = this[fk].find(function (_ref) {\n            var type = _ref.type,\n                id = _ref.id;\n            return type === model.modelName && id === model.id;\n          });\n          i = found && this[fk].indexOf(found);\n        } else {\n          i = this[fk].map(function (key) {\n            return key.toString();\n          }).indexOf(model.id.toString());\n        }\n\n        if (i > -1) {\n          this.attrs[fk].splice(i, 1);\n        }\n      } else {\n        this.attrs[fk] = null;\n      }\n    }\n    /**\n      @hide\n    */\n\n  }, {\n    key: \"_setupAttr\",\n    // Private\n\n    /**\n      model.attrs represents the persistable attributes, i.e. your db\n      table fields.\n      @method _setupAttr\n      @param attr\n      @param value\n      @private\n      @hide\n     */\n    value: function _setupAttr(attr, value) {\n      var isAssociation = this.associationKeys.has(attr) || this.associationIdKeys.has(attr);\n\n      if (!isAssociation) {\n        this.attrs[attr] = value; // define plain getter/setters for non-association keys\n\n        this._definePlainAttribute(attr);\n      }\n    }\n    /**\n      Define getter/setter for a plain attribute\n      @method _definePlainAttribute\n      @param attr\n      @private\n      @hide\n     */\n\n  }, {\n    key: \"_definePlainAttribute\",\n    value: function _definePlainAttribute(attr) {\n      // Ensure the property hasn't already been defined\n      var existingProperty = Object.getOwnPropertyDescriptor(this, attr);\n\n      if (existingProperty && existingProperty.get) {\n        return;\n      } // Ensure the attribute is on the attrs hash\n\n\n      if (!Object.prototype.hasOwnProperty.call(this.attrs, attr)) {\n        this.attrs[attr] = null;\n      } // Define the getter/setter\n\n\n      Object.defineProperty(this, attr, {\n        get: function get() {\n          return this.attrs[attr];\n        },\n        set: function set(val) {\n          this.attrs[attr] = val;\n          return this;\n        }\n      });\n    }\n    /**\n      Foreign keys get set on attrs directly (to avoid potential recursion), but\n      model references use the setter.\n     *\n      We validate foreign keys during instantiation.\n     *\n      @method _setupRelationship\n      @param attr\n      @param value\n      @private\n      @hide\n     */\n\n  }, {\n    key: \"_setupRelationship\",\n    value: function _setupRelationship(attr, value) {\n      var isFk = this.associationIdKeys.has(attr) || this.fks.includes(attr);\n      var isAssociation = this.associationKeys.has(attr);\n\n      if (isFk) {\n        if (value !== undefined && value !== null) {\n          this._validateForeignKeyExistsInDatabase(attr, value);\n        }\n\n        this.attrs[attr] = value;\n      }\n\n      if (isAssociation) {\n        this[attr] = value;\n      }\n    }\n    /**\n      @method _validateAttr\n      @private\n      @hide\n     */\n\n  }, {\n    key: \"_validateAttr\",\n    value: function _validateAttr(key, value) {\n      // Verify attr passed in for associations is actually an association\n      {\n        if (this.associationKeys.has(key)) {\n          var association = this.associationFor(key);\n          var isNull = value === null;\n\n          if (association instanceof HasMany) {\n            var isCollection = value instanceof Collection || value instanceof PolymorphicCollection;\n            var isArrayOfModels = Array.isArray(value) && value.every(function (item) {\n              return item instanceof Model;\n            });\n            assert(isCollection || isArrayOfModels || isNull, \"You're trying to create a \".concat(this.modelName, \" model and you passed in \\\"\").concat(value, \"\\\" under the \").concat(key, \" key, but that key is a HasMany relationship. You must pass in a Collection, PolymorphicCollection, array of Models, or null.\"));\n          } else if (association instanceof BelongsTo) {\n            assert(value instanceof Model || isNull, \"You're trying to create a \".concat(this.modelName, \" model and you passed in \\\"\").concat(value, \"\\\" under the \").concat(key, \" key, but that key is a BelongsTo relationship. You must pass in a Model or null.\"));\n          }\n        }\n      } // Verify attrs passed in for association foreign keys are actually fks\n\n      {\n        if (this.associationIdKeys.has(key)) {\n          if (key.endsWith(\"Ids\")) {\n            var isArray = Array.isArray(value);\n\n            var _isNull = value === null;\n\n            assert(isArray || _isNull, \"You're trying to create a \".concat(this.modelName, \" model and you passed in \\\"\").concat(value, \"\\\" under the \").concat(key, \" key, but that key is a foreign key for a HasMany relationship. You must pass in an array of ids or null.\"));\n          }\n        }\n      } // Verify no undefined associations are passed in\n\n      {\n        var isModelOrCollection = value instanceof Model || value instanceof Collection || value instanceof PolymorphicCollection;\n\n        var _isArrayOfModels = Array.isArray(value) && value.length && value.every(function (item) {\n          return item instanceof Model;\n        });\n\n        if (isModelOrCollection || _isArrayOfModels) {\n          var modelOrCollection = value;\n          assert(this.associationKeys.has(key), \"You're trying to create a \".concat(this.modelName, \" model and you passed in a \").concat(modelOrCollection.toString(), \" under the \").concat(key, \" key, but you haven't defined that key as an association on your model.\"));\n        }\n      }\n    }\n    /**\n      Originally we validated this via association.setId method, but it triggered\n      recursion. That method is designed for updating an existing model's ID so\n      this method is needed during instantiation.\n     *\n      @method _validateForeignKeyExistsInDatabase\n      @private\n      @hide\n     */\n\n  }, {\n    key: \"_validateForeignKeyExistsInDatabase\",\n    value: function _validateForeignKeyExistsInDatabase(foreignKeyName, foreignKeys) {\n      var _this3 = this;\n\n      if (Array.isArray(foreignKeys)) {\n        var association = this.hasManyAssociationFks[foreignKeyName];\n        var found;\n\n        if (association.isPolymorphic) {\n          found = foreignKeys.map(function (_ref2) {\n            var type = _ref2.type,\n                id = _ref2.id;\n            return _this3._schema.db[_this3._schema.toInternalCollectionName(type)].find(id);\n          });\n          found = compact(found);\n        } else {\n          found = this._schema.db[this._schema.toInternalCollectionName(association.modelName)].find(foreignKeys);\n        }\n\n        var foreignKeyLabel = association.isPolymorphic ? foreignKeys.map(function (fk) {\n          return \"\".concat(fk.type, \":\").concat(fk.id);\n        }).join(\",\") : foreignKeys;\n        assert(found.length === foreignKeys.length, \"You're instantiating a \".concat(this.modelName, \" that has a \").concat(foreignKeyName, \" of \").concat(foreignKeyLabel, \", but some of those records don't exist in the database.\"));\n      } else {\n        var _association = this.belongsToAssociationFks[foreignKeyName];\n\n        var _found;\n\n        if (_association.isPolymorphic) {\n          _found = this._schema.db[this._schema.toInternalCollectionName(foreignKeys.type)].find(foreignKeys.id);\n        } else {\n          _found = this._schema.db[this._schema.toInternalCollectionName(_association.modelName)].find(foreignKeys);\n        }\n\n        var _foreignKeyLabel = _association.isPolymorphic ? \"\".concat(foreignKeys.type, \":\").concat(foreignKeys.id) : foreignKeys;\n\n        assert(_found, \"You're instantiating a \".concat(this.modelName, \" that has a \").concat(foreignKeyName, \" of \").concat(_foreignKeyLabel, \", but that record doesn't exist in the database.\"));\n      }\n    }\n    /**\n      Update associated children when saving a collection\n     *\n      @method _saveAssociations\n      @private\n      @hide\n     */\n\n  }, {\n    key: \"_saveAssociations\",\n    value: function _saveAssociations() {\n      this._saveBelongsToAssociations();\n\n      this._saveHasManyAssociations();\n    }\n  }, {\n    key: \"_saveBelongsToAssociations\",\n    value: function _saveBelongsToAssociations() {\n      var _this4 = this;\n\n      values(this.belongsToAssociations).forEach(function (association) {\n        _this4._disassociateFromOldInverses(association);\n\n        _this4._saveNewAssociates(association);\n\n        _this4._associateWithNewInverses(association);\n      });\n    }\n  }, {\n    key: \"_saveHasManyAssociations\",\n    value: function _saveHasManyAssociations() {\n      var _this5 = this;\n\n      values(this.hasManyAssociations).forEach(function (association) {\n        _this5._disassociateFromOldInverses(association);\n\n        _this5._saveNewAssociates(association);\n\n        _this5._associateWithNewInverses(association);\n      });\n    }\n  }, {\n    key: \"_disassociateFromOldInverses\",\n    value: function _disassociateFromOldInverses(association) {\n      if (association instanceof HasMany) {\n        this._disassociateFromHasManyInverses(association);\n      } else if (association instanceof BelongsTo) {\n        this._disassociateFromBelongsToInverse(association);\n      }\n    } // Disassociate currently persisted models that are no longer associated\n\n  }, {\n    key: \"_disassociateFromHasManyInverses\",\n    value: function _disassociateFromHasManyInverses(association) {\n      var _this6 = this;\n\n      var fk = association.getForeignKey();\n      var tempAssociation = this._tempAssociations && this._tempAssociations[association.name];\n      var associateIds = this.attrs[fk];\n\n      if (tempAssociation && associateIds) {\n        var models;\n\n        if (association.isPolymorphic) {\n          models = associateIds.map(function (_ref3) {\n            var type = _ref3.type,\n                id = _ref3.id;\n            return _this6._schema[_this6._schema.toCollectionName(type)].find(id);\n          });\n        } else {\n          // TODO: prob should initialize hasMany fks with []\n          models = this._schema[this._schema.toCollectionName(association.modelName)].find(associateIds || []).models;\n        }\n\n        models.filter(function (associate) {\n          return (// filter out models that are already being saved\n            !associate.isSaving && // filter out models that will still be associated\n            !tempAssociation.includes(associate) && associate.hasInverseFor(association)\n          );\n        }).forEach(function (associate) {\n          var inverse = associate.inverseFor(association);\n          associate.disassociate(_this6, inverse);\n          associate.save();\n        });\n      }\n    }\n    /*\n      Disassociate currently persisted models that are no longer associated.\n       Example:\n         post: Model.extend({\n          comments: hasMany()\n        }),\n         comment: Model.extend({\n          post: belongsTo()\n        })\n       Assume `this` is comment:1. When saving, if comment:1 is no longer\n      associated with post:1, we need to remove comment:1 from post:1.comments.\n      In this example `association` would be `comment.post`.\n    */\n\n  }, {\n    key: \"_disassociateFromBelongsToInverse\",\n    value: function _disassociateFromBelongsToInverse(association) {\n      var fk = association.getForeignKey();\n      var tempAssociation = this._tempAssociations && this._tempAssociations[association.name];\n      var associateId = this.attrs[fk];\n\n      if (tempAssociation !== undefined && associateId) {\n        var associate;\n\n        if (association.isPolymorphic) {\n          associate = this._schema[this._schema.toCollectionName(associateId.type)].find(associateId.id);\n        } else {\n          associate = this._schema[this._schema.toCollectionName(association.modelName)].find(associateId);\n        }\n\n        if (associate.hasInverseFor(association)) {\n          var inverse = associate.inverseFor(association);\n          associate.disassociate(this, inverse);\n\n          associate._updateInDb(associate.attrs);\n        }\n      }\n    } // Find all other models that depend on me and update their foreign keys\n\n  }, {\n    key: \"_disassociateFromDependents\",\n    value: function _disassociateFromDependents() {\n      var _this7 = this;\n\n      this._schema.dependentAssociationsFor(this.modelName).forEach(function (association) {\n        association.disassociateAllDependentsFromTarget(_this7);\n      });\n    }\n  }, {\n    key: \"_saveNewAssociates\",\n    value: function _saveNewAssociates(association) {\n      var fk = association.getForeignKey();\n      var tempAssociate = this._tempAssociations && this._tempAssociations[association.name];\n\n      if (tempAssociate !== undefined) {\n        this.__isSavingNewChildren = true;\n        delete this._tempAssociations[association.name];\n\n        if (tempAssociate instanceof Collection) {\n          tempAssociate.models.filter(function (model) {\n            return !model.isSaving;\n          }).forEach(function (child) {\n            child.save();\n          });\n\n          this._updateInDb(_defineProperty({}, fk, tempAssociate.models.map(function (child) {\n            return child.id;\n          })));\n        } else if (tempAssociate instanceof PolymorphicCollection) {\n          tempAssociate.models.filter(function (model) {\n            return !model.isSaving;\n          }).forEach(function (child) {\n            child.save();\n          });\n\n          this._updateInDb(_defineProperty({}, fk, tempAssociate.models.map(function (child) {\n            return {\n              type: child.modelName,\n              id: child.id\n            };\n          })));\n        } else {\n          // Clearing the association\n          if (tempAssociate === null) {\n            this._updateInDb(_defineProperty({}, fk, null)); // Self-referential\n\n          } else if (this.equals(tempAssociate)) {\n            this._updateInDb(_defineProperty({}, fk, this.id)); // Non-self-referential\n\n          } else if (!tempAssociate.isSaving) {\n            // Save the tempAssociate and update the local reference\n            tempAssociate.save();\n\n            this._syncTempAssociations(tempAssociate);\n\n            var fkValue;\n\n            if (association.isPolymorphic) {\n              fkValue = {\n                id: tempAssociate.id,\n                type: tempAssociate.modelName\n              };\n            } else {\n              fkValue = tempAssociate.id;\n            }\n\n            this._updateInDb(_defineProperty({}, fk, fkValue));\n          }\n        }\n\n        this.__isSavingNewChildren = false;\n      }\n    }\n    /*\n      Step 3 in saving associations.\n       Example:\n         // initial state\n        post.author = steinbeck;\n         // new state\n        post.author = twain;\n          1. Disassociate from old inverse (remove post from steinbeck.posts)\n         2. Save new associates (if twain.isNew, save twain)\n      -> 3. Associate with new inverse (add post to twain.posts)\n    */\n\n  }, {\n    key: \"_associateWithNewInverses\",\n    value: function _associateWithNewInverses(association) {\n      var _this8 = this;\n\n      if (!this.__isSavingNewChildren) {\n        var modelOrCollection = this[association.name];\n\n        if (modelOrCollection instanceof Model) {\n          this._associateModelWithInverse(modelOrCollection, association);\n        } else if (modelOrCollection instanceof Collection || modelOrCollection instanceof PolymorphicCollection) {\n          modelOrCollection.models.forEach(function (model) {\n            _this8._associateModelWithInverse(model, association);\n          });\n        }\n\n        delete this._tempAssociations[association.name];\n      }\n    }\n  }, {\n    key: \"_associateModelWithInverse\",\n    value: function _associateModelWithInverse(model, association) {\n      var _this9 = this;\n\n      if (model.hasInverseFor(association)) {\n        var inverse = model.inverseFor(association);\n        var inverseFk = inverse.getForeignKey();\n        var ownerId = this.id;\n\n        if (inverse instanceof BelongsTo) {\n          var newId;\n\n          if (inverse.isPolymorphic) {\n            newId = {\n              type: this.modelName,\n              id: ownerId\n            };\n          } else {\n            newId = ownerId;\n          }\n\n          this._schema.db[this._schema.toInternalCollectionName(model.modelName)].update(model.id, _defineProperty({}, inverseFk, newId));\n        } else {\n          var inverseCollection = this._schema.db[this._schema.toInternalCollectionName(model.modelName)];\n\n          var currentIdsForInverse = inverseCollection.find(model.id)[inverse.getForeignKey()] || [];\n          var newIdsForInverse = Object.assign([], currentIdsForInverse);\n\n          var _newId, alreadyAssociatedWith;\n\n          if (inverse.isPolymorphic) {\n            _newId = {\n              type: this.modelName,\n              id: ownerId\n            };\n            alreadyAssociatedWith = newIdsForInverse.some(function (key) {\n              return key.type == _this9.modelName && key.id == ownerId;\n            });\n          } else {\n            _newId = ownerId;\n            alreadyAssociatedWith = newIdsForInverse.includes(ownerId);\n          }\n\n          if (!alreadyAssociatedWith) {\n            newIdsForInverse.push(_newId);\n          }\n\n          inverseCollection.update(model.id, _defineProperty({}, inverseFk, newIdsForInverse));\n        }\n      }\n    } // Used to update data directly, since #save and #update can retrigger saves,\n    // which can cause cycles with associations.\n\n  }, {\n    key: \"_updateInDb\",\n    value: function _updateInDb(attrs) {\n      this.attrs = this._schema.db[this._schema.toInternalCollectionName(this.modelName)].update(this.attrs.id, attrs);\n    }\n    /*\n    Super gnarly: after we save this tempAssociate, we we need to through\n    all other tempAssociates for a reference to this same model, and\n    update it. Otherwise those other references are stale, which could\n    cause a bug when they are subsequently saved.\n     This only works for belongsTo right now, should add hasMany logic to it.\n     See issue #1613: https://github.com/samselikoff/ember-cli-mirage/pull/1613\n    */\n\n  }, {\n    key: \"_syncTempAssociations\",\n    value: function _syncTempAssociations(tempAssociate) {\n      var _this10 = this;\n\n      Object.keys(this._tempAssociations).forEach(function (key) {\n        if (_this10._tempAssociations[key] && _this10._tempAssociations[key].toString() === tempAssociate.toString()) {\n          _this10._tempAssociations[key] = tempAssociate;\n        }\n      });\n    }\n    /**\n      Simple string representation of the model and id.\n       ```js\n      let post = blogPosts.find(1);\n      post.toString(); // \"model:blogPost:1\"\n      ```\n       @method toString\n      @return {String}\n      @public\n    */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var idLabel = this.id ? \"(\".concat(this.id, \")\") : \"\";\n      return \"model:\".concat(this.modelName).concat(idLabel);\n    }\n    /**\n      Checks the equality of this model and the passed-in model\n     *\n      @method equals\n      @return boolean\n      @public\n      @hide\n     */\n\n  }, {\n    key: \"equals\",\n    value: function equals(model) {\n      return this.toString() === model.toString();\n    }\n  }, {\n    key: \"associations\",\n    get: function get() {\n      return this._schema.associationsFor(this.modelName);\n    }\n  }, {\n    key: \"isSaving\",\n    get: function get() {\n      return this._schema.isSaving[this.toString()];\n    }\n  }]);\n\n  return Model;\n}();\n\nModel.extend = extend;\n\nModel.findBelongsToAssociation = function (associationType) {\n  return this.prototype.belongsToAssociations[associationType];\n};\n/**\n  Serializers are responsible for formatting your route handler's response.\n\n  The application serializer will apply to every response. To make specific customizations, define per-model serializers.\n\n  ```js\n  import { Server, RestSerializer } from 'miragejs';\n\n  new Server({\n    serializers: {\n      application: RestSerializer,\n      user: RestSerializer.extend({\n        // user-specific customizations\n      })\n    }\n  })\n  ```\n\n  Any Model or Collection returned from a route handler will pass through the serializer layer. Highest priority will be given to a model-specific serializer, then the application serializer, then the default serializer.\n\n  Mirage ships with three named serializers:\n\n  - **JSONAPISerializer**, to simulate JSON:API compliant API servers:\n\n    ```js\n    import { Server, JSONAPISerializer } from 'miragejs';\n\n    new Server({\n      serializers: {\n        application: JSONAPISerializer\n      }\n    })\n    ```\n\n  - **ActiveModelSerializer**, to mock Rails APIs that use AMS-style responses:\n\n    ```js\n    import { Server, ActiveModelSerializer } from 'miragejs';\n\n    new Server({\n      serializers: {\n        application: JSONAPISerializer\n      }\n    })\n    ```\n\n  - **RestSerializer**, a good starting point for many generic REST APIs:\n\n    ```js\n    import { Server, RestSerializer } from 'miragejs';\n\n    new Server({\n      serializers: {\n        application: JSONAPISerializer\n      }\n    })\n    ```\n\n  Additionally, Mirage has a basic Serializer class which you can customize using the hooks documented below:\n\n  ```js\n  import { Server, Serializer } from 'miragejs';\n\n  new Server({\n    serializers: {\n      application: JSONAPISerializer\n    }\n  })\n  ```\n\n  When writing model-specific serializers, remember to extend from your application serializer so shared logic is used by your model-specific classes:\n\n  ```js\n  import { Server, Serializer } from 'miragejs';\n\n  const ApplicationSerializer = Serializer.extend()\n\n  new Server({\n    serializers: {\n      application: ApplicationSerializer,\n      blogPost: ApplicationSerializer.extend({\n        include: ['comments']\n      })\n    }\n  })\n  ```\n\n  @class Serializer\n  @constructor\n  @public\n*/\n\n\nvar Serializer = /*#__PURE__*/function () {\n  function Serializer(registry, type) {\n    var request = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    _classCallCheck(this, Serializer);\n\n    this.registry = registry;\n    this.type = type;\n    this.request = request;\n    /**\n      Use this property on a model serializer to whitelist attributes that will be used in your JSON payload.\n       For example, if you had a `blog-post` model in your database that looked like\n       ```\n      {\n        id: 1,\n        title: 'Lorem ipsum',\n        createdAt: '2014-01-01 10:00:00',\n        updatedAt: '2014-01-03 11:42:12'\n      }\n      ```\n       and you just wanted `id` and `title`, you could write\n       ```js\n      Serializer.extend({\n        attrs: ['id', 'title']\n      });\n      ```\n       and the payload would look like\n       ```\n      {\n        id: 1,\n        title: 'Lorem ipsum'\n      }\n      ```\n       @property attrs\n      @public\n    */\n\n    this.attrs = this.attrs || undefined; // this is just here so I can add the doc comment. Better way?\n\n    /**\n      Use this property on a model serializer to specify related models you'd like to include in your JSON payload. (These can be considered default server-side includes.)\n       For example, if you had an `author` with many `blog-post`s and you wanted to sideload these, specify so in the `include` key:\n       ```js\n      new Server({\n        models: {\n          author: Model.extend({\n            blogPosts: hasMany()\n          })\n        },\n        serializers: {\n          author: Serializer.extend({\n            include: ['blogPosts']\n          });\n        }\n      })\n      ```\n       Now a response to a request for an author would look like this:\n       ```\n      GET /authors/1\n       {\n        author: {\n          id: 1,\n          name: 'Link',\n          blogPostIds: [1, 2]\n        },\n        blogPosts: [\n          {id: 1, authorId: 1, title: 'Lorem'},\n          {id: 2, authorId: 1, title: 'Ipsum'}\n        ]\n      }\n      ```\n       You can also define `include` as a function so it can be determined dynamically.\n      \n      For example, you could conditionally include a relationship based on an `include` query parameter:\n       ```js\n      // Include blog posts for a GET to /authors/1?include=blogPosts\n      \n      Serializer.extend({\n        include: function(request) {\n          if (request.queryParams.include === \"blogPosts\") {\n            return ['blogPosts'];\n          } else {\n            return [];\n          }\n        }\n      });\n      ```\n       **Query param includes for JSONAPISerializer**\n       The JSONAPISerializer supports the use of `include` query parameter to return compound documents out of the box.\n       For example, if your app makes the following request\n       ```\n      GET /api/authors?include=blogPosts\n      ```\n       the `JSONAPISerializer` will inspect the query params of the request, see that the blogPosts relationship is present, and then proceed as if this relationship was specified directly in the include: [] array on the serializer itself.\n       Note that, in accordance with the spec, Mirage gives precedence to an ?include query param over a default include: [] array that you might have specified directly on the serializer. Default includes will still be in effect, however, if a request does not have an ?include query param.\n       Also note that default includes specified with the `include: []` array can only take a single model; they cannot take dot-separated paths to nested relationships.\n       If you'd like to set a default dot-separated (nested) include path for a resource, you have to do it at the route level by setting a default value for `request.queryParams`:\n       ```js\n      this.get('/users', function(schema, request) => {\n        request.queryParams = request.queryParams || {};\n        if (!request.queryParams.include) {\n          request.queryParams.include = 'blog-posts.comments';\n        }\n         // rest of route handler logic\n      });\n      ```\n       @property include\n      @public\n    */\n\n    this.include = this.include || []; // this is just here so I can add the doc comment. Better way?\n\n    /**\n      Set whether your JSON response should have a root key in it.\n       *Doesn't apply to JSONAPISerializer.*\n       Defaults to true, so a request for an author looks like:\n       ```\n      GET /authors/1\n       {\n        author: {\n          id: 1,\n          name: 'Link'\n        }\n      }\n      ```\n       Setting `root` to false disables this:\n       ```js\n      Serializer.extend({\n        root: false\n      });\n      ```\n       Now the response looks like:\n       ```\n      GET /authors/1\n       {\n        id: 1,\n        name: 'Link'\n      }\n      ```\n       @property root\n      @public\n    */\n\n    this.root = this.root || undefined; // this is just here so I can add the doc comment. Better way?\n\n    /**\n      Set whether related models should be embedded or sideloaded.\n       *Doesn't apply to JSONAPISerializer.*\n       By default this false, so relationships are sideloaded:\n       ```\n      GET /authors/1\n       {\n        author: {\n          id: 1,\n          name: 'Link',\n          blogPostIds: [1, 2]\n        },\n        blogPosts: [\n          { id: 1, authorId: 1, title: 'Lorem' },\n          { id: 2, authorId: 1, title: 'Ipsum' }\n        ]\n      }\n      ```\n       Setting `embed` to true will embed related records:\n       ```js\n      Serializer.extend({\n        embed: true\n      });\n      ```\n       Now the response looks like:\n       ```\n      GET /authors/1\n       {\n        author: {\n          id: 1,\n          name: 'Link',\n          blogPosts: [\n            { id: 1, authorId: 1, title: 'Lorem' },\n            { id: 2, authorId: 1, title: 'Ipsum' }\n          ]\n        }\n      }\n      ```\n    */\n\n    this.embed = this.embed || undefined; // this is just here so I can add the doc comment. Better way?\n\n    /**\n      Use this to define how your serializer handles serializing relationship keys. It can take one of three values:\n       - `included`, which is the default, will serialize the ids of a relationship if that relationship is included (sideloaded) along with the model or collection in the response\n      - `always` will always serialize the ids of all relationships for the model or collection in the response\n      - `never` will never serialize the ids of relationships for the model or collection in the response\n       @property serializeIds\n      @public\n    */\n\n    this.serializeIds = this.serializeIds || undefined; // this is just here so I can add the doc comment. Better way?\n  }\n  /**\n    Override this method to implement your own custom serialize function. *response* is whatever was returned from your route handler, and *request* is the Pretender request object.\n     Returns a plain JavaScript object or array, which Mirage uses as the response data to your app's XHR request.\n     You can also override this method, call super, and manipulate the data before Mirage responds with it. This is a great place to add metadata, or for one-off operations that don't fit neatly into any of Mirage's other abstractions:\n     ```js\n    serialize(object, request) {\n      // This is how to call super, as Mirage borrows [Backbone's implementation of extend](http://backbonejs.org/#Model-extend)\n      let json = Serializer.prototype.serialize.apply(this, arguments);\n       // Add metadata, sort parts of the response, etc.\n       return json;\n    }\n    ```\n     @param primaryResource\n    @param request\n    @return { Object } the json response\n   */\n\n\n  _createClass(Serializer, [{\n    key: \"serialize\",\n    value: function serialize(primaryResource\n    /* , request */\n    ) {\n      this.primaryResource = primaryResource;\n      return this.buildPayload(primaryResource);\n    }\n    /**\n      This method is used by the POST and PUT shorthands. These shorthands expect a valid JSON:API document as part of the request, so that they know how to create or update the appropriate resouce. The *normalize* method allows you to transform your request body into a JSON:API document, which lets you take advantage of the shorthands when you otherwise may not be able to.\n       Note that this method is a noop if you're using JSON:API already, since request payloads sent along with POST and PUT requests will already be in the correct format.\n       Take a look at the included `ActiveModelSerializer`'s normalize method for an example.\n       @method normalize\n      @param json\n      @public\n     */\n\n  }, {\n    key: \"normalize\",\n    value: function normalize(json) {\n      return json;\n    }\n  }, {\n    key: \"buildPayload\",\n    value: function buildPayload(primaryResource, toInclude, didSerialize, json) {\n      if (!primaryResource && isEmpty(toInclude)) {\n        return json;\n      } else if (primaryResource) {\n        var _this$getHashForPrima = this.getHashForPrimaryResource(primaryResource),\n            _this$getHashForPrima2 = _slicedToArray(_this$getHashForPrima, 2),\n            resourceHash = _this$getHashForPrima2[0],\n            newIncludes = _this$getHashForPrima2[1];\n\n        var newDidSerialize = this.isCollection(primaryResource) ? primaryResource.models : [primaryResource];\n        return this.buildPayload(undefined, newIncludes, newDidSerialize, resourceHash);\n      } else {\n        var nextIncludedResource = toInclude.shift();\n\n        var _this$getHashForInclu = this.getHashForIncludedResource(nextIncludedResource),\n            _this$getHashForInclu2 = _slicedToArray(_this$getHashForInclu, 2),\n            _resourceHash = _this$getHashForInclu2[0],\n            _newIncludes = _this$getHashForInclu2[1];\n\n        var newToInclude = _newIncludes.filter(function (resource) {\n          return !didSerialize.map(function (m) {\n            return m.toString();\n          }).includes(resource.toString());\n        }).concat(toInclude);\n\n        var _newDidSerialize = (this.isCollection(nextIncludedResource) ? nextIncludedResource.models : [nextIncludedResource]).concat(didSerialize);\n\n        var newJson = this.mergePayloads(json, _resourceHash);\n        return this.buildPayload(undefined, newToInclude, _newDidSerialize, newJson);\n      }\n    }\n  }, {\n    key: \"getHashForPrimaryResource\",\n    value: function getHashForPrimaryResource(resource) {\n      var _this$getHashForResou = this.getHashForResource(resource),\n          _this$getHashForResou2 = _slicedToArray(_this$getHashForResou, 2),\n          hash = _this$getHashForResou2[0],\n          addToIncludes = _this$getHashForResou2[1];\n\n      var hashWithRoot;\n\n      if (this.root) {\n        assert(!(resource instanceof PolymorphicCollection), \"The base Serializer class cannot serialize a top-level PolymorphicCollection when root is true, since PolymorphicCollections have no type.\");\n        var serializer = this.serializerFor(resource.modelName);\n        var rootKey = serializer.keyForResource(resource);\n        hashWithRoot = _defineProperty({}, rootKey, hash);\n      } else {\n        hashWithRoot = hash;\n      }\n\n      return [hashWithRoot, addToIncludes];\n    }\n  }, {\n    key: \"getHashForIncludedResource\",\n    value: function getHashForIncludedResource(resource) {\n      var hashWithRoot, addToIncludes;\n\n      if (resource instanceof PolymorphicCollection) {\n        hashWithRoot = {};\n        addToIncludes = resource.models;\n      } else {\n        var serializer = this.serializerFor(resource.modelName);\n\n        var _serializer$getHashFo = serializer.getHashForResource(resource),\n            _serializer$getHashFo2 = _slicedToArray(_serializer$getHashFo, 2),\n            hash = _serializer$getHashFo2[0],\n            newModels = _serializer$getHashFo2[1]; // Included resources always have a root, and are always pushed to an array.\n\n\n        var rootKey = serializer.keyForRelationship(resource.modelName);\n        hashWithRoot = Array.isArray(hash) ? _defineProperty({}, rootKey, hash) : _defineProperty({}, rootKey, [hash]);\n        addToIncludes = newModels;\n      }\n\n      return [hashWithRoot, addToIncludes];\n    }\n  }, {\n    key: \"getHashForResource\",\n    value: function getHashForResource(resource) {\n      var _this = this;\n\n      var removeForeignKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var didSerialize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var lookupSerializer = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var hash, serializer;\n\n      if (!lookupSerializer) {\n        serializer = this; // this is used for embedded responses\n      } // PolymorphicCollection lacks a modelName, but is dealt with in the map\n      // by looking up the serializer on a per-model basis\n\n\n      if (lookupSerializer && resource.modelName) {\n        serializer = this.serializerFor(resource.modelName);\n      }\n\n      if (this.isModel(resource)) {\n        hash = serializer._hashForModel(resource, removeForeignKeys, didSerialize);\n      } else {\n        hash = resource.models.map(function (m) {\n          var modelSerializer = serializer;\n\n          if (!modelSerializer) {\n            // Can't get here if lookupSerializer is false, so look it up\n            modelSerializer = _this.serializerFor(m.modelName);\n          }\n\n          return modelSerializer._hashForModel(m, removeForeignKeys, didSerialize);\n        });\n      }\n\n      if (this.embed) {\n        return [hash, []];\n      } else {\n        var addToIncludes = uniqBy(compact(flatten(serializer.getKeysForIncluded().map(function (key) {\n          if (_this.isCollection(resource)) {\n            return resource.models.map(function (m) {\n              return m[key];\n            });\n          } else {\n            return resource[key];\n          }\n        }))), function (m) {\n          return m.toString();\n        });\n        return [hash, addToIncludes];\n      }\n    }\n    /*\n      Merges new resource hash into json. If json already has root key,\n      pushes value of resourceHash onto that key.\n       For example,\n           json = {\n            post: { id: 1, title: 'Lorem Ipsum', comment_ids: [1, 3] },\n            comments: [\n              { id: 1, text: 'foo' }\n            ]\n          };\n           resourceHash = {\n            comments: [\n              { id: 2, text: 'bar' }\n            ]\n          };\n       would yield\n           {\n            post: { id: 1, title: 'Lorem Ipsum', comment_ids: [1, 3] },\n            comments: [\n              { id: 1, text: 'foo' },\n              { id: 2, text: 'bar' }\n            ]\n          };\n     */\n\n  }, {\n    key: \"mergePayloads\",\n    value: function mergePayloads(json, resourceHash) {\n      var newJson;\n\n      var _Object$keys = Object.keys(resourceHash),\n          _Object$keys2 = _slicedToArray(_Object$keys, 1),\n          resourceHashKey = _Object$keys2[0];\n\n      if (json[resourceHashKey]) {\n        newJson = json;\n        newJson[resourceHashKey] = json[resourceHashKey].concat(resourceHash[resourceHashKey]);\n      } else {\n        newJson = Object.assign(json, resourceHash);\n      }\n\n      return newJson;\n    }\n  }, {\n    key: \"keyForResource\",\n    value: function keyForResource(resource) {\n      var modelName = resource.modelName;\n      return this.isModel(resource) ? this.keyForModel(modelName) : this.keyForCollection(modelName);\n    }\n    /**\n      Used to define a custom key when serializing a primary model of modelName *modelName*. For example, the default Serializer will return something like the following:\n       ```\n      GET /blogPosts/1\n       {\n        blogPost: {\n          id: 1,\n          title: 'Lorem ipsum'\n        }\n      }\n      ```\n       If your API uses hyphenated keys, you could overwrite `keyForModel`:\n       ```js\n      // serializers/application.js\n      export default Serializer.extend({\n        keyForModel(modelName) {\n          return hyphenate(modelName);\n        }\n      });\n      ```\n       Now the response will look like\n       ```\n      {\n        'blog-post': {\n          id: 1,\n          title: 'Lorem ipsum'\n        }\n      }\n      ```\n       @method keyForModel\n      @param modelName\n      @public\n     */\n\n  }, {\n    key: \"keyForModel\",\n    value: function keyForModel(modelName) {\n      return camelize(modelName);\n    }\n    /**\n      Used to customize the key when serializing a primary collection. By default this pluralizes the return value of `keyForModel`.\n       For example, by default the following request may look like:\n       ```\n      GET /blogPosts\n       {\n        blogPosts: [\n          {\n            id: 1,\n            title: 'Lorem ipsum'\n          },\n          ...\n        ]\n      }\n      ```\n       If your API hyphenates keys, you could overwrite `keyForCollection`:\n       ```js\n      // serializers/application.js\n      export default Serializer.extend({\n        keyForCollection(modelName) {\n          return this._container.inflector.pluralize(dasherize(modelName));\n        }\n      });\n      ```\n       Now the response would look like:\n       ```\n      {\n        'blog-posts': [\n          {\n            id: 1,\n            title: 'Lorem ipsum'\n          },\n          ...\n        ]\n      }\n      ```\n       @method keyForCollection\n      @param modelName\n      @public\n     */\n\n  }, {\n    key: \"keyForCollection\",\n    value: function keyForCollection(modelName) {\n      return this._container.inflector.pluralize(this.keyForModel(modelName));\n    }\n  }, {\n    key: \"_hashForModel\",\n    value: function _hashForModel(model, removeForeignKeys) {\n      var _this2 = this;\n\n      var didSerialize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      var attrs = this._attrsForModel(model);\n\n      if (removeForeignKeys) {\n        model.fks.forEach(function (fk) {\n          delete attrs[fk];\n        });\n      }\n\n      if (this.embed) {\n        var newDidSerialize = Object.assign({}, didSerialize);\n        newDidSerialize[model.modelName] = newDidSerialize[model.modelName] || {};\n        newDidSerialize[model.modelName][model.id] = true;\n        this.getKeysForIncluded().forEach(function (key) {\n          var associatedResource = model[key];\n\n          if (associatedResource && !get(newDidSerialize, \"\".concat(associatedResource.modelName, \".\").concat(associatedResource.id))) {\n            var _this2$getHashForReso = _this2.getHashForResource(associatedResource, true, newDidSerialize, true),\n                _this2$getHashForReso2 = _slicedToArray(_this2$getHashForReso, 1),\n                associatedResourceHash = _this2$getHashForReso2[0];\n\n            var formattedKey = _this2.keyForEmbeddedRelationship(key);\n\n            attrs[formattedKey] = associatedResourceHash;\n\n            if (_this2.isModel(associatedResource)) {\n              var fk = \"\".concat(camelize(key), \"Id\");\n              delete attrs[fk];\n            }\n          }\n        });\n        return attrs;\n      } else {\n        return this._maybeAddAssociationIds(model, attrs);\n      }\n    }\n    /**\n      @method _attrsForModel\n      @param model\n      @private\n      @hide\n     */\n\n  }, {\n    key: \"_attrsForModel\",\n    value: function _attrsForModel(model) {\n      var attrs = {};\n\n      if (this.attrs) {\n        attrs = this.attrs.reduce(function (memo, attr) {\n          memo[attr] = model[attr];\n          return memo;\n        }, {});\n      } else {\n        attrs = Object.assign(attrs, model.attrs);\n      } // Remove fks\n\n\n      model.fks.forEach(function (key) {\n        return delete attrs[key];\n      });\n      return this._formatAttributeKeys(attrs);\n    }\n    /**\n      @method _maybeAddAssociationIds\n      @param model\n      @param attrs\n      @private\n      @hide\n     */\n\n  }, {\n    key: \"_maybeAddAssociationIds\",\n    value: function _maybeAddAssociationIds(model, attrs) {\n      var _this3 = this;\n\n      var newHash = Object.assign({}, attrs);\n\n      if (this.serializeIds === \"always\") {\n        model.associationKeys.forEach(function (key) {\n          var resource = model[key];\n          var association = model.associationFor(key);\n\n          if (_this3.isCollection(resource)) {\n            var formattedKey = _this3.keyForRelationshipIds(key);\n\n            newHash[formattedKey] = model[\"\".concat(_this3._container.inflector.singularize(key), \"Ids\")];\n          } else if (_this3.isModel(resource) && association.isPolymorphic) {\n            var formattedTypeKey = _this3.keyForPolymorphicForeignKeyType(key);\n\n            var formattedIdKey = _this3.keyForPolymorphicForeignKeyId(key);\n\n            newHash[formattedTypeKey] = model[\"\".concat(key, \"Id\")].type;\n            newHash[formattedIdKey] = model[\"\".concat(key, \"Id\")].id;\n          } else if (resource) {\n            var _formattedKey = _this3.keyForForeignKey(key);\n\n            newHash[_formattedKey] = model[\"\".concat(key, \"Id\")];\n          }\n        });\n      } else if (this.serializeIds === \"included\") {\n        this.getKeysForIncluded().forEach(function (key) {\n          var resource = model[key];\n          var association = model.associationFor(key);\n\n          if (_this3.isCollection(resource)) {\n            var formattedKey = _this3.keyForRelationshipIds(key);\n\n            newHash[formattedKey] = model[\"\".concat(_this3._container.inflector.singularize(key), \"Ids\")];\n          } else if (_this3.isModel(resource) && association.isPolymorphic) {\n            var formattedTypeKey = _this3.keyForPolymorphicForeignKeyType(key);\n\n            var formattedIdKey = _this3.keyForPolymorphicForeignKeyId(key);\n\n            newHash[formattedTypeKey] = model[\"\".concat(key, \"Id\")].type;\n            newHash[formattedIdKey] = model[\"\".concat(key, \"Id\")].id;\n          } else if (_this3.isModel(resource)) {\n            var _formattedKey2 = _this3.keyForForeignKey(key);\n\n            newHash[_formattedKey2] = model[\"\".concat(key, \"Id\")];\n          }\n        });\n      }\n\n      return newHash;\n    }\n    /**\n      Used to customize how a model's attribute is formatted in your JSON payload.\n       By default, model attributes are camelCase:\n       ```\n      GET /authors/1\n       {\n        author: {\n          firstName: 'Link',\n          lastName: 'The WoodElf'\n        }\n      }\n      ```\n       If your API expects snake case, you could write the following:\n       ```js\n      // serializers/application.js\n      export default Serializer.extend({\n        keyForAttribute(attr) {\n          return underscore(attr);\n        }\n      });\n      ```\n       Now the response would look like:\n       ```\n      {\n        author: {\n          first_name: 'Link',\n          last_name: 'The WoodElf'\n        }\n      }\n      ```\n       @method keyForAttribute\n      @param attr\n      @public\n     */\n\n  }, {\n    key: \"keyForAttribute\",\n    value: function keyForAttribute(attr) {\n      return attr;\n    }\n    /**\n      Use this hook to format the key for collections related to this model. *modelName* is the named parameter for the relationship.\n       For example, if you're serializing an `author` that\n      sideloads many `blogPosts`, the default response will look like:\n       ```\n      {\n        author: {...},\n        blogPosts: [...]\n      }\n      ```\n       Overwrite `keyForRelationship` to format this key:\n       ```js\n      // serializers/application.js\n      export default Serializer.extend({\n        keyForRelationship(modelName) {\n          return underscore(modelName);\n        }\n      });\n      ```\n       Now the response will look like this:\n       ```\n      {\n        author: {...},\n        blog_posts: [...]\n      }\n      ```\n       @method keyForRelationship\n      @param modelName\n      @public\n     */\n\n  }, {\n    key: \"keyForRelationship\",\n    value: function keyForRelationship(modelName) {\n      return camelize(this._container.inflector.pluralize(modelName));\n    }\n    /**\n      Like `keyForRelationship`, but for embedded relationships.\n       @method keyForEmbeddedRelationship\n      @param attributeName\n      @public\n     */\n\n  }, {\n    key: \"keyForEmbeddedRelationship\",\n    value: function keyForEmbeddedRelationship(attributeName) {\n      return camelize(attributeName);\n    }\n    /**\n      Use this hook to format the key for the IDS of a `hasMany` relationship\n      in this model's JSON representation.\n       For example, if you're serializing an `author` that\n      sideloads many `blogPosts`, by default your `author` JSON would include a `blogPostIds` key:\n       ```\n      {\n        author: {\n          id: 1,\n          blogPostIds: [1, 2, 3]\n        },\n        blogPosts: [...]\n      }\n      ```\n       Overwrite `keyForRelationshipIds` to format this key:\n       ```js\n      // serializers/application.js\n      export default Serializer.extend({\n        keyForRelationshipIds(relationship) {\n          return underscore(relationship) + '_ids';\n        }\n      });\n      ```\n       Now the response will look like:\n       ```\n      {\n        author: {\n          id: 1,\n          blog_post_ids: [1, 2, 3]\n        },\n        blogPosts: [...]\n      }\n      ```\n       @method keyForRelationshipIds\n      @param modelName\n      @public\n     */\n\n  }, {\n    key: \"keyForRelationshipIds\",\n    value: function keyForRelationshipIds(relationshipName) {\n      return \"\".concat(this._container.inflector.singularize(camelize(relationshipName)), \"Ids\");\n    }\n    /**\n      Like `keyForRelationshipIds`, but for `belongsTo` relationships.\n       For example, if you're serializing a `blogPost` that sideloads one `author`,\n      your `blogPost` JSON would include a `authorId` key:\n       ```\n      {\n        blogPost: {\n          id: 1,\n          authorId: 1\n        },\n        author: ...\n      }\n      ```\n       Overwrite `keyForForeignKey` to format this key:\n       ```js\n      // serializers/application.js\n      export default Serializer.extend({\n        keyForForeignKey(relationshipName) {\n          return underscore(relationshipName) + '_id';\n        }\n      });\n      ```\n       Now the response will look like:\n       ```js\n      {\n        blogPost: {\n          id: 1,\n          author_id: 1\n        },\n        author: ...\n      }\n      ```\n       @method keyForForeignKey\n      @param relationshipName\n      @public\n     */\n\n  }, {\n    key: \"keyForForeignKey\",\n    value: function keyForForeignKey(relationshipName) {\n      return \"\".concat(camelize(relationshipName), \"Id\");\n    }\n    /**\n      Polymorphic relationships are represented with type-id pairs.\n       Given the following model\n       ```js\n      Model.extend({\n        commentable: belongsTo({ polymorphic: true })\n      });\n      ```\n       the default Serializer would produce\n       ```js\n      {\n        comment: {\n          id: 1,\n          commentableType: 'post',\n          commentableId: '1'\n        }\n      }\n      ```\n       This hook controls how the `id` field (`commentableId` in the above example)\n      is serialized. By default it camelizes the relationship and adds `Id` as a suffix.\n       @method keyForPolymorphicForeignKeyId\n      @param {String} relationshipName\n      @return {String}\n      @public\n    */\n\n  }, {\n    key: \"keyForPolymorphicForeignKeyId\",\n    value: function keyForPolymorphicForeignKeyId(relationshipName) {\n      return \"\".concat(camelize(relationshipName), \"Id\");\n    }\n    /**\n      Polymorphic relationships are represented with type-id pairs.\n       Given the following model\n       ```js\n      Model.extend({\n        commentable: belongsTo({ polymorphic: true })\n      });\n      ```\n       the default Serializer would produce\n       ```js\n      {\n        comment: {\n          id: 1,\n          commentableType: 'post',\n          commentableId: '1'\n        }\n      }\n      ```\n       This hook controls how the `type` field (`commentableType` in the above example)\n      is serialized. By default it camelizes the relationship and adds `Type` as a suffix.\n       @method keyForPolymorphicForeignKeyType\n      @param {String} relationshipName\n      @return {String}\n      @public\n    */\n\n  }, {\n    key: \"keyForPolymorphicForeignKeyType\",\n    value: function keyForPolymorphicForeignKeyType(relationshipName) {\n      return \"\".concat(camelize(relationshipName), \"Type\");\n    }\n    /**\n      @method isModel\n      @param object\n      @return {Boolean}\n      @public\n      @hide\n     */\n\n  }, {\n    key: \"isModel\",\n    value: function isModel(object) {\n      return object instanceof Model;\n    }\n    /**\n      @method isCollection\n      @param object\n      @return {Boolean}\n      @public\n      @hide\n     */\n\n  }, {\n    key: \"isCollection\",\n    value: function isCollection(object) {\n      return object instanceof Collection || object instanceof PolymorphicCollection;\n    }\n    /**\n      @method isModelOrCollection\n      @param object\n      @return {Boolean}\n      @public\n      @hide\n     */\n\n  }, {\n    key: \"isModelOrCollection\",\n    value: function isModelOrCollection(object) {\n      return this.isModel(object) || this.isCollection(object);\n    }\n    /**\n      @method serializerFor\n      @param type\n      @public\n      @hide\n     */\n\n  }, {\n    key: \"serializerFor\",\n    value: function serializerFor(type) {\n      return this.registry.serializerFor(type);\n    }\n  }, {\n    key: \"getKeysForIncluded\",\n    value: function getKeysForIncluded() {\n      return isFunction(this.include) ? this.include(this.request, this.primaryResource) : this.include;\n    }\n    /**\n      A reference to the schema instance.\n       Useful to reference registered schema information, for example in a Serializer's include hook to include all a resource's associations:\n       ```js\n      Serializer.extend({\n        include(request, resource) {\n          return Object.keys(this.schema.associationsFor(resource.modelName));\n        }\n      })\n      ```\n       @property\n      @type {Object}\n      @public\n    */\n\n  }, {\n    key: \"_formatAttributeKeys\",\n\n    /**\n      @method _formatAttributeKeys\n      @param attrs\n      @private\n      @hide\n     */\n    value: function _formatAttributeKeys(attrs) {\n      var formattedAttrs = {};\n\n      for (var key in attrs) {\n        var formattedKey = this.keyForAttribute(key);\n        formattedAttrs[formattedKey] = attrs[key];\n      }\n\n      return formattedAttrs;\n    }\n  }, {\n    key: \"getCoalescedIds\",\n    value: function getCoalescedIds()\n    /* request */\n    {}\n  }, {\n    key: \"schema\",\n    get: function get() {\n      return this.registry.schema;\n    }\n  }]);\n\n  return Serializer;\n}(); // Defaults\n\n\nSerializer.prototype.include = [];\nSerializer.prototype.root = true;\nSerializer.prototype.embed = false;\nSerializer.prototype.serializeIds = \"included\"; // can be 'included', 'always', or 'never'\n\nSerializer.extend = extend;\n/**\n  The JSONAPISerializer. Subclass of Serializer.\n\n  @class JSONAPISerializer\n  @constructor\n  @public\n */\n\nvar JSONAPISerializer = /*#__PURE__*/function (_Serializer) {\n  _inherits(JSONAPISerializer, _Serializer);\n\n  var _super = _createSuper(JSONAPISerializer);\n\n  function JSONAPISerializer() {\n    var _this;\n\n    _classCallCheck(this, JSONAPISerializer);\n\n    _this = _super.apply(this, arguments);\n    /**\n      By default, JSON:API's linkage data is only added for relationships that are being included in the current request.\n       That means given an `author` model with a `posts` relationship, a GET request to /authors/1 would return a JSON:API document with an empty `relationships` hash:\n       ```js\n      {\n        data: {\n          type: 'authors',\n          id: '1',\n          attributes: { ... }\n        }\n      }\n      ```\n       but a request to GET /authors/1?include=posts would have linkage data added (in addition to the included resources):\n       ```js\n      {\n        data: {\n          type: 'authors',\n          id: '1',\n          attributes: { ... },\n          relationships: {\n            data: [\n              { type: 'posts', id: '1' },\n              { type: 'posts', id: '2' },\n              { type: 'posts', id: '3' }\n            ]\n          }\n        },\n        included: [ ... ]\n      }\n      ```\n       To add the linkage data for all relationships, you could set `alwaysIncludeLinkageData` to `true`:\n       ```js\n      JSONAPISerializer.extend({\n        alwaysIncludeLinkageData: true\n      });\n      ```\n       Then, a GET to /authors/1 would respond with\n       ```js\n      {\n        data: {\n          type: 'authors',\n          id: '1',\n          attributes: { ... },\n          relationships: {\n            posts: {\n              data: [\n                { type: 'posts', id: '1' },\n                { type: 'posts', id: '2' },\n                { type: 'posts', id: '3' }\n              ]\n            }\n          }\n        }\n      }\n      ```\n       even though the related `posts` are not included in the same document.\n       You can also use the `links` method (on the Serializer base class) to add relationship links (which will always be added regardless of the relationship is being included document), or you could use `shouldIncludeLinkageData` for more granular control.\n       For more background on the behavior of this API, see [this blog post](http://www.ember-cli-mirage.com/blog/changing-mirages-default-linkage-data-behavior-1475).\n       @property alwaysIncludeLinkageData\n      @type {Boolean}\n      @public\n    */\n\n    _this.alwaysIncludeLinkageData = _this.alwaysIncludeLinkageData || undefined; // this is just here so I can add the doc comment. Better way?\n\n    return _this;\n  } // Don't think this is used?\n\n\n  _createClass(JSONAPISerializer, [{\n    key: \"keyForModel\",\n    value: function keyForModel(modelName) {\n      return dasherize(modelName);\n    } // Don't think this is used?\n\n  }, {\n    key: \"keyForCollection\",\n    value: function keyForCollection(modelName) {\n      return dasherize(modelName);\n    }\n    /**\n      Used to customize the key for an attribute. By default, compound attribute names are dasherized.\n       For example, the JSON:API document for a `post` model with a `commentCount` attribute would be:\n       ```js\n      {\n        data: {\n          id: 1,\n          type: 'posts',\n          attributes: {\n            'comment-count': 28\n          }\n        }\n      }\n      ```\n       @method keyForAttribute\n      @param {String} attr\n      @return {String}\n      @public\n    */\n\n  }, {\n    key: \"keyForAttribute\",\n    value: function keyForAttribute(attr) {\n      return dasherize(attr);\n    }\n    /**\n      Used to customize the key for a relationships. By default, compound relationship names are dasherized.\n       For example, the JSON:API document for an `author` model with a `blogPosts` relationship would be:\n       ```js\n      {\n        data: {\n          id: 1,\n          type: 'author',\n          attributes: {\n            ...\n          },\n          relationships: {\n            'blog-posts': {\n              ...\n            }\n          }\n        }\n      }\n      ```\n       @method keyForRelationship\n      @param {String} key\n      @return {String}\n      @public\n    */\n\n  }, {\n    key: \"keyForRelationship\",\n    value: function keyForRelationship(key) {\n      return dasherize(key);\n    }\n    /**\n      Use this hook to add top-level `links` data to JSON:API resource objects. The argument is the model being serialized.\n       ```js\n      // serializers/author.js\n      import { JSONAPISerializer } from 'miragejs';\n       export default JSONAPISerializer.extend({\n         links(author) {\n          return {\n            'posts': {\n              related: `/api/authors/${author.id}/posts`\n            }\n          };\n        }\n       });\n      ```\n       @method links\n      @param model\n    */\n\n  }, {\n    key: \"links\",\n    value: function links() {}\n  }, {\n    key: \"getHashForPrimaryResource\",\n    value: function getHashForPrimaryResource(resource) {\n      this._createRequestedIncludesGraph(resource);\n\n      var resourceHash = this.getHashForResource(resource);\n      var hashWithRoot = {\n        data: resourceHash\n      };\n      var addToIncludes = this.getAddToIncludesForResource(resource);\n      return [hashWithRoot, addToIncludes];\n    }\n  }, {\n    key: \"getHashForIncludedResource\",\n    value: function getHashForIncludedResource(resource) {\n      var serializer = this.serializerFor(resource.modelName);\n      var hash = serializer.getHashForResource(resource);\n      var hashWithRoot = {\n        included: this.isModel(resource) ? [hash] : hash\n      };\n      var addToIncludes = [];\n\n      if (!this.hasQueryParamIncludes()) {\n        addToIncludes = this.getAddToIncludesForResource(resource);\n      }\n\n      return [hashWithRoot, addToIncludes];\n    }\n  }, {\n    key: \"getHashForResource\",\n    value: function getHashForResource(resource) {\n      var _this2 = this;\n\n      var hash;\n\n      if (this.isModel(resource)) {\n        hash = this.getResourceObjectForModel(resource);\n      } else {\n        hash = resource.models.map(function (m) {\n          return _this2.getResourceObjectForModel(m);\n        });\n      }\n\n      return hash;\n    }\n    /*\n      Returns a flat unique list of resources that need to be added to includes\n    */\n\n  }, {\n    key: \"getAddToIncludesForResource\",\n    value: function getAddToIncludesForResource(resource) {\n      var relationshipPaths;\n\n      if (this.hasQueryParamIncludes()) {\n        relationshipPaths = this.request.queryParams.include.split(\",\");\n      } else {\n        var serializer = this.serializerFor(resource.modelName);\n        relationshipPaths = serializer.getKeysForIncluded();\n      }\n\n      return this.getAddToIncludesForResourceAndPaths(resource, relationshipPaths);\n    }\n  }, {\n    key: \"getAddToIncludesForResourceAndPaths\",\n    value: function getAddToIncludesForResourceAndPaths(resource, relationshipPaths) {\n      var _this3 = this;\n\n      var includes = [];\n      relationshipPaths.forEach(function (path) {\n        var relationshipNames = path.split(\".\");\n\n        var newIncludes = _this3.getIncludesForResourceAndPath.apply(_this3, [resource].concat(_toConsumableArray(relationshipNames)));\n\n        includes.push(newIncludes);\n      });\n      return uniqBy(compact(flatten(includes)), function (m) {\n        return m.toString();\n      });\n    }\n  }, {\n    key: \"getIncludesForResourceAndPath\",\n    value: function getIncludesForResourceAndPath(resource) {\n      var _this4 = this;\n\n      for (var _len = arguments.length, names = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        names[_key - 1] = arguments[_key];\n      }\n\n      var nameForCurrentResource = camelize(names.shift());\n      var includes = [];\n      var modelsToAdd = [];\n\n      if (this.isModel(resource)) {\n        var relationship = resource[nameForCurrentResource];\n\n        if (this.isModel(relationship)) {\n          modelsToAdd = [relationship];\n        } else if (this.isCollection(relationship)) {\n          modelsToAdd = relationship.models;\n        }\n      } else {\n        resource.models.forEach(function (model) {\n          var relationship = model[nameForCurrentResource];\n\n          if (_this4.isModel(relationship)) {\n            modelsToAdd.push(relationship);\n          } else if (_this4.isCollection(relationship)) {\n            modelsToAdd = modelsToAdd.concat(relationship.models);\n          }\n        });\n      }\n\n      includes = includes.concat(modelsToAdd);\n\n      if (names.length) {\n        modelsToAdd.forEach(function (model) {\n          includes = includes.concat(_this4.getIncludesForResourceAndPath.apply(_this4, [model].concat(names)));\n        });\n      }\n\n      return includes;\n    }\n  }, {\n    key: \"getResourceObjectForModel\",\n    value: function getResourceObjectForModel(model) {\n      var attrs = this._attrsForModel(model, true);\n\n      delete attrs.id;\n      var hash = {\n        type: this.typeKeyForModel(model),\n        id: model.id,\n        attributes: attrs\n      };\n      return this._maybeAddRelationshipsToResourceObjectForModel(hash, model);\n    }\n  }, {\n    key: \"_maybeAddRelationshipsToResourceObjectForModel\",\n    value: function _maybeAddRelationshipsToResourceObjectForModel(hash, model) {\n      var _this5 = this;\n\n      var relationships = {};\n      model.associationKeys.forEach(function (key) {\n        var relationship = model[key];\n\n        var relationshipKey = _this5.keyForRelationship(key);\n\n        var relationshipHash = {};\n\n        if (_this5.hasLinksForRelationship(model, key)) {\n          var serializer = _this5.serializerFor(model.modelName);\n\n          var links = serializer.links(model);\n          relationshipHash.links = links[key];\n        }\n\n        if (_this5.alwaysIncludeLinkageData || _this5.shouldIncludeLinkageData(key, model) || _this5._relationshipIsIncludedForModel(key, model)) {\n          var data = null;\n\n          if (_this5.isModel(relationship)) {\n            data = {\n              type: _this5.typeKeyForModel(relationship),\n              id: relationship.id\n            };\n          } else if (_this5.isCollection(relationship)) {\n            data = relationship.models.map(function (model) {\n              return {\n                type: _this5.typeKeyForModel(model),\n                id: model.id\n              };\n            });\n          }\n\n          relationshipHash.data = data;\n        }\n\n        if (!isEmpty(relationshipHash)) {\n          relationships[relationshipKey] = relationshipHash;\n        }\n      });\n\n      if (!isEmpty(relationships)) {\n        hash.relationships = relationships;\n      }\n\n      return hash;\n    }\n  }, {\n    key: \"hasLinksForRelationship\",\n    value: function hasLinksForRelationship(model, relationshipKey) {\n      var serializer = this.serializerFor(model.modelName);\n      var links = serializer.links && serializer.links(model);\n      return links && links[relationshipKey] != null;\n    }\n    /*\n      This code (and a lot of this serializer) need to be re-worked according to\n      the graph logic...\n    */\n\n  }, {\n    key: \"_relationshipIsIncludedForModel\",\n    value: function _relationshipIsIncludedForModel(relationshipKey, model) {\n      if (this.hasQueryParamIncludes()) {\n        var graph = this.request._includesGraph;\n\n        var graphKey = this._graphKeyForModel(model); // Find the resource in the graph\n\n\n        var graphResource; // Check primary data\n\n        if (graph.data[graphKey]) {\n          graphResource = graph.data[graphKey]; // Check includes\n        } else if (graph.included[this._container.inflector.pluralize(model.modelName)]) {\n          graphResource = graph.included[this._container.inflector.pluralize(model.modelName)][graphKey];\n        } // If the model's in the graph, check if relationshipKey should be included\n\n\n        return graphResource && graphResource.relationships && Object.prototype.hasOwnProperty.call(graphResource.relationships, dasherize(relationshipKey));\n      } else {\n        var relationshipPaths = this.getKeysForIncluded();\n        return relationshipPaths.includes(relationshipKey);\n      }\n    }\n    /*\n      This is needed for _relationshipIsIncludedForModel - see the note there for\n      more background.\n       If/when we can refactor this serializer, the logic in this method would\n      probably be the basis for the new overall json/graph creation.\n    */\n\n  }, {\n    key: \"_createRequestedIncludesGraph\",\n    value: function _createRequestedIncludesGraph(primaryResource) {\n      var _this6 = this;\n\n      var graph = {\n        data: {}\n      };\n\n      if (this.isModel(primaryResource)) {\n        var primaryResourceKey = this._graphKeyForModel(primaryResource);\n\n        graph.data[primaryResourceKey] = {};\n\n        this._addPrimaryModelToRequestedIncludesGraph(graph, primaryResource);\n      } else if (this.isCollection(primaryResource)) {\n        primaryResource.models.forEach(function (model) {\n          var primaryResourceKey = _this6._graphKeyForModel(model);\n\n          graph.data[primaryResourceKey] = {};\n\n          _this6._addPrimaryModelToRequestedIncludesGraph(graph, model);\n        });\n      } // Hack :/ Need to think of a better palce to put this if\n      // refactoring json:api serializer.\n\n\n      this.request._includesGraph = graph;\n    }\n  }, {\n    key: \"_addPrimaryModelToRequestedIncludesGraph\",\n    value: function _addPrimaryModelToRequestedIncludesGraph(graph, model) {\n      var _this7 = this;\n\n      if (this.hasQueryParamIncludes()) {\n        var graphKey = this._graphKeyForModel(model);\n\n        var queryParamIncludes = this.getQueryParamIncludes();\n        queryParamIncludes.split(\",\").filter(function (item) {\n          return !!item.trim();\n        }).forEach(function (includesPath) {\n          // includesPath is post.comments, for example\n          graph.data[graphKey].relationships = graph.data[graphKey].relationships || {};\n          var relationshipKeys = includesPath.split(\".\").map(dasherize);\n          var relationshipKey = relationshipKeys[0];\n          var graphRelationshipKey = relationshipKey;\n          var normalizedRelationshipKey = camelize(relationshipKey);\n          var hasAssociation = model.associationKeys.has(normalizedRelationshipKey);\n          assert(hasAssociation, \"You tried to include \\\"\".concat(relationshipKey, \"\\\" with \").concat(model, \" but no association named \\\"\").concat(normalizedRelationshipKey, \"\\\" is defined on the model.\"));\n          var relationship = model[normalizedRelationshipKey];\n          var relationshipData;\n\n          if (_this7.isModel(relationship)) {\n            relationshipData = _this7._graphKeyForModel(relationship);\n          } else if (_this7.isCollection(relationship)) {\n            relationshipData = relationship.models.map(_this7._graphKeyForModel);\n          } else {\n            relationshipData = null;\n          }\n\n          graph.data[graphKey].relationships[graphRelationshipKey] = relationshipData;\n\n          if (relationship) {\n            _this7._addResourceToRequestedIncludesGraph(graph, relationship, relationshipKeys.slice(1));\n          }\n        });\n      }\n    }\n  }, {\n    key: \"_addResourceToRequestedIncludesGraph\",\n    value: function _addResourceToRequestedIncludesGraph(graph, resource, relationshipNames) {\n      var _this8 = this;\n\n      graph.included = graph.included || {};\n      var models = this.isCollection(resource) ? resource.models : [resource];\n      models.forEach(function (model) {\n        var collectionName = _this8._container.inflector.pluralize(model.modelName);\n\n        graph.included[collectionName] = graph.included[collectionName] || {};\n\n        _this8._addModelToRequestedIncludesGraph(graph, model, relationshipNames);\n      });\n    }\n  }, {\n    key: \"_addModelToRequestedIncludesGraph\",\n    value: function _addModelToRequestedIncludesGraph(graph, model, relationshipNames) {\n      var collectionName = this._container.inflector.pluralize(model.modelName);\n\n      var resourceKey = this._graphKeyForModel(model);\n\n      graph.included[collectionName][resourceKey] = graph.included[collectionName][resourceKey] || {};\n\n      if (relationshipNames.length) {\n        this._addResourceRelationshipsToRequestedIncludesGraph(graph, collectionName, resourceKey, model, relationshipNames);\n      }\n    }\n    /*\n      Lot of the same logic here from _addPrimaryModelToRequestedIncludesGraph, could refactor & share\n    */\n\n  }, {\n    key: \"_addResourceRelationshipsToRequestedIncludesGraph\",\n    value: function _addResourceRelationshipsToRequestedIncludesGraph(graph, collectionName, resourceKey, model, relationshipNames) {\n      graph.included[collectionName][resourceKey].relationships = graph.included[collectionName][resourceKey].relationships || {};\n      var relationshipName = relationshipNames[0];\n      var relationship = model[camelize(relationshipName)];\n      var relationshipData;\n\n      if (this.isModel(relationship)) {\n        relationshipData = this._graphKeyForModel(relationship);\n      } else if (this.isCollection(relationship)) {\n        relationshipData = relationship.models.map(this._graphKeyForModel);\n      }\n\n      graph.included[collectionName][resourceKey].relationships[relationshipName] = relationshipData;\n\n      if (relationship) {\n        this._addResourceToRequestedIncludesGraph(graph, relationship, relationshipNames.slice(1));\n      }\n    }\n  }, {\n    key: \"_graphKeyForModel\",\n    value: function _graphKeyForModel(model) {\n      return \"\".concat(model.modelName, \":\").concat(model.id);\n    }\n  }, {\n    key: \"getQueryParamIncludes\",\n    value: function getQueryParamIncludes() {\n      return get(this, \"request.queryParams.include\");\n    }\n  }, {\n    key: \"hasQueryParamIncludes\",\n    value: function hasQueryParamIncludes() {\n      return !!this.getQueryParamIncludes();\n    }\n    /**\n      Used to customize the `type` field of the document. By default, pluralizes and dasherizes the model's `modelName`.\n       For example, the JSON:API document for a `blogPost` model would be:\n       ```js\n      {\n        data: {\n          id: 1,\n          type: 'blog-posts'\n        }\n      }\n      ```\n       @method typeKeyForModel\n      @param {Model} model\n      @return {String}\n      @public\n    */\n\n  }, {\n    key: \"typeKeyForModel\",\n    value: function typeKeyForModel(model) {\n      return dasherize(this._container.inflector.pluralize(model.modelName));\n    }\n  }, {\n    key: \"getCoalescedIds\",\n    value: function getCoalescedIds(request) {\n      var ids = request.queryParams && request.queryParams[\"filter[id]\"];\n\n      if (typeof ids === \"string\") {\n        return ids.split(\",\");\n      }\n\n      return ids;\n    }\n    /**\n      Allows for per-relationship inclusion of linkage data. Use this when `alwaysIncludeLinkageData` is not granular enough.\n       ```js\n      export default JSONAPISerializer.extend({\n        shouldIncludeLinkageData(relationshipKey, model) {\n          if (relationshipKey === 'author' || relationshipKey === 'ghostWriter') {\n            return true;\n          }\n          return false;\n        }\n      });\n      ```\n       @method shouldIncludeLinkageData\n      @param {String} relationshipKey\n      @param {Model} model\n      @return {Boolean}\n      @public\n    */\n\n  }, {\n    key: \"shouldIncludeLinkageData\",\n    value: function shouldIncludeLinkageData(relationshipKey, model) {\n      return false;\n    }\n  }]);\n\n  return JSONAPISerializer;\n}(Serializer);\n\nJSONAPISerializer.prototype.alwaysIncludeLinkageData = false;\n/**\n * @hide\n */\n\nvar SerializerRegistry = /*#__PURE__*/function () {\n  function SerializerRegistry(schema) {\n    var serializerMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, SerializerRegistry);\n\n    this.schema = schema;\n    this._serializerMap = serializerMap;\n  }\n\n  _createClass(SerializerRegistry, [{\n    key: \"normalize\",\n    value: function normalize(payload, modelName) {\n      return this.serializerFor(modelName).normalize(payload);\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize(response, request) {\n      var _this = this;\n\n      this.request = request;\n\n      if (this._isModelOrCollection(response)) {\n        var serializer = this.serializerFor(response.modelName);\n        return serializer.serialize(response, request);\n      } else if (Array.isArray(response) && response.some(this._isCollection)) {\n        return response.reduce(function (json, collection) {\n          var serializer = _this.serializerFor(collection.modelName);\n\n          if (serializer.embed) {\n            json[_this._container.inflector.pluralize(collection.modelName)] = serializer.serialize(collection, request);\n          } else {\n            json = Object.assign(json, serializer.serialize(collection, request));\n          }\n\n          return json;\n        }, {});\n      } else {\n        return response;\n      }\n    }\n  }, {\n    key: \"serializerFor\",\n    value: function serializerFor(type) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref$explicit = _ref.explicit,\n          explicit = _ref$explicit === void 0 ? false : _ref$explicit;\n\n      var SerializerForResponse = type && this._serializerMap && this._serializerMap[camelize(type)];\n\n      if (explicit) {\n        assert(!!SerializerForResponse, \"You passed in \".concat(type, \" as an explicit serializer type but that serializer doesn't exist.\"));\n      } else {\n        SerializerForResponse = SerializerForResponse || this._serializerMap.application || Serializer;\n        assert(!SerializerForResponse || SerializerForResponse.prototype.embed || SerializerForResponse.prototype.root || new SerializerForResponse() instanceof JSONAPISerializer, \"You cannot have a serializer that sideloads (embed: false) and disables the root (root: false).\");\n      }\n\n      return new SerializerForResponse(this, type, this.request);\n    }\n  }, {\n    key: \"_isModel\",\n    value: function _isModel(object) {\n      return object instanceof Model;\n    }\n  }, {\n    key: \"_isCollection\",\n    value: function _isCollection(object) {\n      return object instanceof Collection || object instanceof PolymorphicCollection;\n    }\n  }, {\n    key: \"_isModelOrCollection\",\n    value: function _isModelOrCollection(object) {\n      return this._isModel(object) || this._isCollection(object);\n    }\n  }, {\n    key: \"registerSerializers\",\n    value: function registerSerializers(newSerializerMaps) {\n      var currentSerializerMap = this._serializerMap || {};\n      this._serializerMap = Object.assign(currentSerializerMap, newSerializerMaps);\n    }\n  }, {\n    key: \"getCoalescedIds\",\n    value: function getCoalescedIds(request, modelName) {\n      return this.serializerFor(modelName).getCoalescedIds(request);\n    }\n  }]);\n\n  return SerializerRegistry;\n}();\n\nvar collectionNameCache = {};\nvar internalCollectionNameCache = {};\nvar modelNameCache = {};\n/**\n  The primary use of the `Schema` class is to use it to find Models and Collections via the `Model` class methods.\n\n  The `Schema` is most often accessed via the first parameter to a route handler:\n\n  ```js\n  this.get('posts', schema => {\n    return schema.posts.where({ isAdmin: false });\n  });\n  ```\n\n  It is also available from the `.schema` property of a `server` instance:\n\n  ```js\n  server.schema.users.create({ name: 'Yehuda' });\n  ```\n\n  To work with the Model or Collection returned from one of the methods below, refer to the instance methods in the API docs for the `Model` and `Collection` classes.\n\n  @class Schema\n  @constructor\n  @public\n */\n\nvar Schema = /*#__PURE__*/function () {\n  function Schema(db) {\n    var modelsMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Schema);\n\n    assert(db, \"A schema requires a db\");\n    /**\n      Returns Mirage's database. See the `Db` docs for the db's API.\n       @property db\n      @type {Object}\n      @public\n    */\n\n    this.db = db;\n    this._registry = {};\n    this._dependentAssociations = {\n      polymorphic: []\n    };\n    this.registerModels(modelsMap);\n    this.isSaving = {}; // a hash of models that are being saved, used to avoid cycles\n  }\n  /**\n    @method registerModels\n    @param hash\n    @public\n    @hide\n   */\n\n\n  _createClass(Schema, [{\n    key: \"registerModels\",\n    value: function registerModels() {\n      var _this = this;\n\n      var hash = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      forIn(hash, function (model, key) {\n        _this.registerModel(key, hash[key]);\n      });\n    }\n    /**\n      @method registerModel\n      @param type\n      @param ModelClass\n      @public\n      @hide\n     */\n\n  }, {\n    key: \"registerModel\",\n    value: function registerModel(type, ModelClass) {\n      var _this2 = this;\n\n      var camelizedModelName = camelize(type);\n      var modelName = dasherize(camelizedModelName); // Avoid mutating original class, because we may want to reuse it across many tests\n\n      ModelClass = ModelClass.extend(); // Store model & fks in registry\n      // TODO: don't think this is needed anymore\n\n      this._registry[camelizedModelName] = this._registry[camelizedModelName] || {\n        \"class\": null,\n        foreignKeys: []\n      }; // we may have created this key before, if another model added fks to it\n\n      this._registry[camelizedModelName][\"class\"] = ModelClass; // TODO: set here, remove from model#constructor\n\n      ModelClass.prototype._schema = this;\n      ModelClass.prototype.modelName = modelName; // Set up associations\n\n      ModelClass.prototype.hasManyAssociations = {}; // a registry of the model's hasMany associations. Key is key from model definition, value is association instance itself\n\n      ModelClass.prototype.hasManyAssociationFks = {}; // a lookup table to get the hasMany association by foreignKey\n\n      ModelClass.prototype.belongsToAssociations = {}; // a registry of the model's belongsTo associations. Key is key from model definition, value is association instance itself\n\n      ModelClass.prototype.belongsToAssociationFks = {}; // a lookup table to get the belongsTo association by foreignKey\n\n      ModelClass.prototype.associationKeys = new Set(); // ex: address.user, user.addresses\n\n      ModelClass.prototype.associationIdKeys = new Set(); // ex: address.user_id, user.address_ids\n\n      ModelClass.prototype.dependentAssociations = []; // a registry of associations that depend on this model, needed for deletion cleanup.\n\n      var fksAddedFromThisModel = {};\n\n      for (var associationProperty in ModelClass.prototype) {\n        if (ModelClass.prototype[associationProperty] instanceof Association) {\n          var association = ModelClass.prototype[associationProperty];\n          association.name = associationProperty;\n          association.modelName = association.modelName || this.toModelName(associationProperty);\n          association.ownerModelName = modelName;\n          association.setSchema(this); // Update the registry with this association's foreign keys. This is\n          // essentially our \"db migration\", since we must know about the fks.\n\n          var _association$getForei = association.getForeignKeyArray(),\n              _association$getForei2 = _slicedToArray(_association$getForei, 2),\n              fkHolder = _association$getForei2[0],\n              fk = _association$getForei2[1];\n\n          fksAddedFromThisModel[fkHolder] = fksAddedFromThisModel[fkHolder] || [];\n          assert(!fksAddedFromThisModel[fkHolder].includes(fk), \"Your '\".concat(type, \"' model definition has multiple possible inverse relationships of type '\").concat(fkHolder, \"'. Please use explicit inverses.\"));\n          fksAddedFromThisModel[fkHolder].push(fk);\n\n          this._addForeignKeyToRegistry(fkHolder, fk); // Augment the Model's class with any methods added by this association\n\n\n          association.addMethodsToModelClass(ModelClass, associationProperty);\n        }\n      } // Create a db collection for this model, if doesn't exist\n\n\n      var collection = this.toCollectionName(modelName);\n\n      if (!this.db[collection]) {\n        this.db.createCollection(collection);\n      } // Create the entity methods\n\n\n      this[collection] = {\n        camelizedModelName: camelizedModelName,\n        \"new\": function _new(attrs) {\n          return _this2[\"new\"](camelizedModelName, attrs);\n        },\n        create: function create(attrs) {\n          return _this2.create(camelizedModelName, attrs);\n        },\n        all: function all(attrs) {\n          return _this2.all(camelizedModelName, attrs);\n        },\n        find: function find(attrs) {\n          return _this2.find(camelizedModelName, attrs);\n        },\n        findBy: function findBy(attrs) {\n          return _this2.findBy(camelizedModelName, attrs);\n        },\n        findOrCreateBy: function findOrCreateBy(attrs) {\n          return _this2.findOrCreateBy(camelizedModelName, attrs);\n        },\n        where: function where(attrs) {\n          return _this2.where(camelizedModelName, attrs);\n        },\n        none: function none(attrs) {\n          return _this2.none(camelizedModelName, attrs);\n        },\n        first: function first(attrs) {\n          return _this2.first(camelizedModelName, attrs);\n        }\n      };\n      return this;\n    }\n    /**\n      @method modelFor\n      @param type\n      @public\n      @hide\n     */\n\n  }, {\n    key: \"modelFor\",\n    value: function modelFor(type) {\n      return this._registry[type];\n    }\n    /**\n      Create a new unsaved model instance with attributes *attrs*.\n       ```js\n      let post = blogPosts.new({ title: 'Lorem ipsum' });\n      post.title;   // Lorem ipsum\n      post.id;      // null\n      post.isNew(); // true\n      ```\n       @method new\n      @param type\n      @param attrs\n      @public\n     */\n\n  }, {\n    key: \"new\",\n    value: function _new(type, attrs) {\n      return this._instantiateModel(dasherize(type), attrs);\n    }\n    /**\n      Create a new model instance with attributes *attrs*, and insert it into the database.\n       ```js\n      let post = blogPosts.create({title: 'Lorem ipsum'});\n      post.title;   // Lorem ipsum\n      post.id;      // 1\n      post.isNew(); // false\n      ```\n       @method create\n      @param type\n      @param attrs\n      @public\n     */\n\n  }, {\n    key: \"create\",\n    value: function create(type, attrs) {\n      return this[\"new\"](type, attrs).save();\n    }\n    /**\n      Return all models in the database.\n       ```js\n      let posts = blogPosts.all();\n      // [post:1, post:2, ...]\n      ```\n       @method all\n      @param type\n      @public\n     */\n\n  }, {\n    key: \"all\",\n    value: function all(type) {\n      var collection = this.collectionForType(type);\n      return this._hydrate(collection, dasherize(type));\n    }\n    /**\n      Return an empty collection of type `type`.\n       @method none\n      @param type\n      @public\n     */\n\n  }, {\n    key: \"none\",\n    value: function none(type) {\n      return this._hydrate([], dasherize(type));\n    }\n    /**\n      Return one or many models in the database by id.\n       ```js\n      let post = blogPosts.find(1);\n      let posts = blogPosts.find([1, 3, 4]);\n      ```\n       @method find\n      @param type\n      @param ids\n      @public\n     */\n\n  }, {\n    key: \"find\",\n    value: function find(type, ids) {\n      var collection = this.collectionForType(type);\n      var records = collection.find(ids);\n\n      if (Array.isArray(ids)) {\n        assert(records.length === ids.length, \"Couldn't find all \".concat(this._container.inflector.pluralize(type), \" with ids: (\").concat(ids.join(\",\"), \") (found \").concat(records.length, \" results, but was looking for \").concat(ids.length, \")\"));\n      }\n\n      return this._hydrate(records, dasherize(type));\n    }\n    /**\n      Returns the first model in the database that matches the key-value pairs in `attrs`. Note that a string comparison is used.\n       ```js\n      let post = blogPosts.findBy({ published: true });\n      let post = blogPosts.findBy({ authorId: 1, published: false });\n      let post = blogPosts.findBy({ author: janeSmith, featured: true });\n      ```\n       This will return `null` if the schema doesn't have any matching record.\n       @method findBy\n      @param type\n      @param attributeName\n      @public\n     */\n\n  }, {\n    key: \"findBy\",\n    value: function findBy(type, query) {\n      var collection = this.collectionForType(type);\n      var record = collection.findBy(query);\n      return this._hydrate(record, dasherize(type));\n    }\n    /**\n      Returns the first model in the database that matches the key-value pairs in `attrs`, or creates a record with the attributes if one is not found.\n       ```js\n      // Find the first published blog post, or create a new one.\n      let post = blogPosts.findOrCreateBy({ published: true });\n      ```\n       @method findOrCreateBy\n      @param type\n      @param attributeName\n      @public\n     */\n\n  }, {\n    key: \"findOrCreateBy\",\n    value: function findOrCreateBy(type, attrs) {\n      var collection = this.collectionForType(type);\n      var record = collection.findBy(attrs);\n      var model;\n\n      if (!record) {\n        model = this.create(type, attrs);\n      } else {\n        model = this._hydrate(record, dasherize(type));\n      }\n\n      return model;\n    }\n    /**\n      Return an ORM/Collection, which represents an array of models from the database matching `query`.\n       If `query` is an object, its key-value pairs will be compared against records using string comparison.\n       `query` can also be a compare function.\n       ```js\n      let posts = blogPosts.where({ published: true });\n      let posts = blogPosts.where(post => post.published === true);\n      ```\n       @method where\n      @param type\n      @param query\n      @public\n     */\n\n  }, {\n    key: \"where\",\n    value: function where(type, query) {\n      var collection = this.collectionForType(type);\n      var records = collection.where(query);\n      return this._hydrate(records, dasherize(type));\n    }\n    /**\n      Returns the first model in the database.\n       ```js\n      let post = blogPosts.first();\n      ```\n       N.B. This will return `null` if the schema doesn't contain any records.\n       @method first\n      @param type\n      @public\n     */\n\n  }, {\n    key: \"first\",\n    value: function first(type) {\n      var collection = this.collectionForType(type);\n      var record = collection[0];\n      return this._hydrate(record, dasherize(type));\n    }\n    /**\n      @method modelClassFor\n      @param modelName\n      @public\n      @hide\n     */\n\n  }, {\n    key: \"modelClassFor\",\n    value: function modelClassFor(modelName) {\n      var model = this._registry[camelize(modelName)];\n\n      assert(model, \"Model not registered: \".concat(modelName));\n      return model[\"class\"].prototype;\n    }\n    /*\n      This method updates the dependentAssociations registry, which is used to\n      keep track of which models depend on a given association. It's used when\n      deleting models - their dependents need to be looked up and foreign keys\n      updated.\n       For example,\n           schema = {\n            post: Model.extend(),\n            comment: Model.extend({\n              post: belongsTo()\n            })\n          };\n           comment1.post = post1;\n          ...\n          post1.destroy()\n       Deleting this post should clear out comment1's foreign key.\n       Polymorphic associations can have _any_ other model as a dependent, so we\n      handle them separately.\n    */\n\n  }, {\n    key: \"addDependentAssociation\",\n    value: function addDependentAssociation(association, modelName) {\n      if (association.isPolymorphic) {\n        this._dependentAssociations.polymorphic.push(association);\n      } else {\n        this._dependentAssociations[modelName] = this._dependentAssociations[modelName] || [];\n\n        this._dependentAssociations[modelName].push(association);\n      }\n    }\n  }, {\n    key: \"dependentAssociationsFor\",\n    value: function dependentAssociationsFor(modelName) {\n      var directDependents = this._dependentAssociations[modelName] || [];\n      var polymorphicAssociations = this._dependentAssociations.polymorphic || [];\n      return directDependents.concat(polymorphicAssociations);\n    }\n    /**\n      Returns an object containing the associations registered for the model of the given _modelName_.\n       For example, given this configuration\n      \n      ```js\n      import { Server, Model, hasMany, belongsTo } from 'miragejs'\n       let server = new Server({\n        models: {\n          user: Model,\n          article: Model.extend({\n            fineAuthor: belongsTo(\"user\"),\n            comments: hasMany()\n          }),\n          comment: Model\n        }\n      })\n      ```\n       each of the following would return empty objects\n       ```js\n      server.schema.associationsFor('user')\n      // {}\n      server.schema.associationsFor('comment')\n      // {}\n      ```\n       but the associations for the `article` would return\n       ```js\n      server.schema.associationsFor('article')\n       // {\n      //   fineAuthor: BelongsToAssociation,\n      //   comments: HasManyAssociation\n      // }\n      ```\n       Check out the docs on the Association class to see what fields are available for each association.\n       @method associationsFor\n      @param {String} modelName\n      @return {Object}\n      @public\n    */\n\n  }, {\n    key: \"associationsFor\",\n    value: function associationsFor(modelName) {\n      var modelClass = this.modelClassFor(modelName);\n      return Object.assign({}, modelClass.belongsToAssociations, modelClass.hasManyAssociations);\n    }\n  }, {\n    key: \"hasModelForModelName\",\n    value: function hasModelForModelName(modelName) {\n      return this.modelFor(camelize(modelName));\n    }\n    /*\n      Private methods\n    */\n\n    /**\n      @method collectionForType\n      @param type\n      @private\n      @hide\n     */\n\n  }, {\n    key: \"collectionForType\",\n    value: function collectionForType(type) {\n      var collection = this.toCollectionName(type);\n      assert(this.db[collection], \"You're trying to find model(s) of type \".concat(type, \" but this collection doesn't exist in the database.\"));\n      return this.db[collection];\n    }\n  }, {\n    key: \"toCollectionName\",\n    value: function toCollectionName(type) {\n      if (typeof collectionNameCache[type] !== \"string\") {\n        var modelName = dasherize(type);\n        var collectionName = camelize(this._container.inflector.pluralize(modelName));\n        collectionNameCache[type] = collectionName;\n      }\n\n      return collectionNameCache[type];\n    } // This is to get at the underlying Db collection. Poorly named... need to\n    // refactor to DbTable or something.\n\n  }, {\n    key: \"toInternalCollectionName\",\n    value: function toInternalCollectionName(type) {\n      if (typeof internalCollectionNameCache[type] !== \"string\") {\n        var internalCollectionName = \"_\".concat(this.toCollectionName(type));\n        internalCollectionNameCache[type] = internalCollectionName;\n      }\n\n      return internalCollectionNameCache[type];\n    }\n  }, {\n    key: \"toModelName\",\n    value: function toModelName(type) {\n      if (typeof modelNameCache[type] !== \"string\") {\n        var dasherized = dasherize(type);\n\n        var modelName = this._container.inflector.singularize(dasherized);\n\n        modelNameCache[type] = modelName;\n      }\n\n      return modelNameCache[type];\n    }\n    /**\n      @method _addForeignKeyToRegistry\n      @param type\n      @param fk\n      @private\n      @hide\n     */\n\n  }, {\n    key: \"_addForeignKeyToRegistry\",\n    value: function _addForeignKeyToRegistry(type, fk) {\n      this._registry[type] = this._registry[type] || {\n        \"class\": null,\n        foreignKeys: []\n      };\n      var fks = this._registry[type].foreignKeys;\n\n      if (!fks.includes(fk)) {\n        fks.push(fk);\n      }\n    }\n    /**\n      @method _instantiateModel\n      @param modelName\n      @param attrs\n      @private\n      @hide\n     */\n\n  }, {\n    key: \"_instantiateModel\",\n    value: function _instantiateModel(modelName, attrs) {\n      var ModelClass = this._modelFor(modelName);\n\n      var fks = this._foreignKeysFor(modelName);\n\n      return new ModelClass(this, modelName, attrs, fks);\n    }\n    /**\n      @method _modelFor\n      @param modelName\n      @private\n      @hide\n     */\n\n  }, {\n    key: \"_modelFor\",\n    value: function _modelFor(modelName) {\n      return this._registry[camelize(modelName)][\"class\"];\n    }\n    /**\n      @method _foreignKeysFor\n      @param modelName\n      @private\n      @hide\n     */\n\n  }, {\n    key: \"_foreignKeysFor\",\n    value: function _foreignKeysFor(modelName) {\n      return this._registry[camelize(modelName)].foreignKeys;\n    }\n    /**\n      Takes a record and returns a model, or an array of records\n      and returns a collection.\n     *\n      @method _hydrate\n      @param records\n      @param modelName\n      @private\n      @hide\n     */\n\n  }, {\n    key: \"_hydrate\",\n    value: function _hydrate(records, modelName) {\n      if (Array.isArray(records)) {\n        var models = records.map(function (record) {\n          return this._instantiateModel(modelName, record);\n        }, this);\n        return new Collection(modelName, models);\n      } else if (records) {\n        return this._instantiateModel(modelName, records);\n      } else {\n        return null;\n      }\n    }\n  }]);\n\n  return Schema;\n}();\n\nvar classes = {\n  Db: Db,\n  Association: Association,\n  RouteHandler: RouteHandler,\n  BaseRouteHandler: BaseRouteHandler,\n  Serializer: Serializer,\n  SerializerRegistry: SerializerRegistry,\n  Schema: Schema\n};\nvar defaultInflector = {\n  singularize: singularize,\n  pluralize: pluralize\n};\n/**\n  Lightweight DI container for customizable objects that are needed by\n  deeply nested classes.\n\n  @class Container\n  @hide\n */\n\nvar Container = /*#__PURE__*/function () {\n  function Container() {\n    _classCallCheck(this, Container);\n\n    this.inflector = defaultInflector;\n  }\n\n  _createClass(Container, [{\n    key: \"register\",\n    value: function register(key, value) {\n      this[key] = value;\n    }\n  }, {\n    key: \"create\",\n    value: function create(className) {\n      var Class = classes[className];\n      Class.prototype._container = this;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return _construct(Class, args);\n    }\n  }]);\n\n  return Container;\n}();\n/**\n  These are side effects. We give each class a default container so it can be\n  easily unit tested.\n\n  We should remove these once we have test coverage and can refactor to a proper\n  DI system.\n*/\n\n\nvar defaultContainer = new Container();\nDb.prototype._container = defaultContainer;\nAssociation.prototype._container = defaultContainer;\nBaseRouteHandler.prototype._container = defaultContainer;\nRouteHandler.prototype._container = defaultContainer;\nSerializer.prototype._container = defaultContainer;\nSerializerRegistry.prototype._container = defaultContainer;\nSchema.prototype._container = defaultContainer;\nvar isPluralForModelCache = {};\n/**\n * Creates a new Pretender instance.\n *\n * @method createPretender\n * @param {Server} server\n * @return {Object} A new Pretender instance.\n * @public\n */\n\nfunction createPretender(server) {\n  if (typeof window !== \"undefined\") {\n    return new Pretender(function () {\n      this.passthroughRequest = function (verb, path, request) {\n        if (server.shouldLog()) {\n          console.log(\"Mirage: Passthrough request for \".concat(verb.toUpperCase(), \" \").concat(request.url));\n        }\n      };\n\n      this.handledRequest = function (verb, path, request) {\n        if (server.shouldLog()) {\n          console.groupCollapsed(\"Mirage: [\".concat(request.status, \"] \").concat(verb.toUpperCase(), \" \").concat(request.url));\n          var requestBody = request.requestBody,\n              responseText = request.responseText;\n          var loggedRequest, loggedResponse;\n\n          try {\n            loggedRequest = JSON.parse(requestBody);\n          } catch (e) {\n            loggedRequest = requestBody;\n          }\n\n          try {\n            loggedResponse = JSON.parse(responseText);\n          } catch (e) {\n            loggedResponse = responseText;\n          }\n\n          console.groupCollapsed(\"Response\");\n          console.log(loggedResponse);\n          console.groupEnd();\n          console.groupCollapsed(\"Request (data)\");\n          console.log(loggedRequest);\n          console.groupEnd();\n          console.groupCollapsed(\"Request (raw)\");\n          console.log(request);\n          console.groupEnd();\n          console.groupEnd();\n        }\n      };\n\n      var originalCheckPassthrough = this.checkPassthrough;\n\n      this.checkPassthrough = function (request) {\n        var shouldPassthrough = server.passthroughChecks.some(function (passthroughCheck) {\n          return passthroughCheck(request);\n        });\n\n        if (shouldPassthrough) {\n          var url = request.url.includes(\"?\") ? request.url.substr(0, request.url.indexOf(\"?\")) : request.url;\n          this[request.method.toLowerCase()](url, this.passthrough);\n        }\n\n        return originalCheckPassthrough.apply(this, arguments);\n      };\n\n      this.unhandledRequest = function (verb, path) {\n        path = decodeURI(path);\n        assert(\"Your app tried to \".concat(verb, \" '\").concat(path, \"', but there was no route defined to handle this request. Define a route for this endpoint in your routes() config. Did you forget to define a namespace?\"));\n      };\n    }, {\n      trackRequests: server.shouldTrackRequests()\n    });\n  }\n}\n\nvar defaultRouteOptions = {\n  coalesce: false,\n  timing: undefined\n};\nvar defaultInflector$1 = {\n  singularize: singularize,\n  pluralize: pluralize\n};\n/**\n  @hide\n*/\n\nvar defaultPassthroughs = [\"http://localhost:0/chromecheckurl\", // mobile chrome\n\"http://localhost:30820/socket.io\", // electron\nfunction (request) {\n  return /.+\\.hot-update.json$/.test(request.url);\n}];\n/**\n * Determine if the object contains a valid option.\n *\n * @method isOption\n * @param {Object} option An object with one option value pair.\n * @return {Boolean} True if option is a valid option, false otherwise.\n * @private\n */\n\nfunction isOption(option) {\n  if (!option || _typeof(option) !== \"object\") {\n    return false;\n  }\n\n  var allOptions = Object.keys(defaultRouteOptions);\n  var optionKeys = Object.keys(option);\n\n  for (var i = 0; i < optionKeys.length; i++) {\n    var key = optionKeys[i];\n\n    if (allOptions.indexOf(key) > -1) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * Extract arguments for a route.\n *\n * @method extractRouteArguments\n * @param {Array} args Of the form [options], [object, code], [function, code]\n * [shorthand, options], [shorthand, code, options]\n * @return {Array} [handler (i.e. the function, object or shorthand), code,\n * options].\n * @private\n */\n\n\nfunction extractRouteArguments(args) {\n  var _args$splice = args.splice(-1),\n      _args$splice2 = _slicedToArray(_args$splice, 1),\n      lastArg = _args$splice2[0];\n\n  if (isOption(lastArg)) {\n    lastArg = assign({}, defaultRouteOptions, lastArg);\n  } else {\n    args.push(lastArg);\n    lastArg = defaultRouteOptions;\n  }\n\n  var t = 2 - args.length;\n\n  while (t-- > 0) {\n    args.push(undefined);\n  }\n\n  args.push(lastArg);\n  return args;\n}\n/**\n * Creates a Server\n * @param {Object} options Server's configuration object\n * @param {String} options.urlPrefix The base URL for the routes. Example: `http://miragejs.com`.\n * @param {String} options.namespace The default namespace for the `Server`. Example: `/api/v1`.\n * @param {Number} options.timing Default latency for the routes to respond to a request.\n * @param {String} options.environment Defines the environment of the `Server`.\n * @param {Boolean} options.trackRequests Pretender `trackRequests`.\n * @param {Boolean} options.useDefaultPassthroughs True to use mirage provided passthroughs\n * @param {Boolean} options.logging Set to true or false to explicitly specify logging behavior.\n * @param {Function} options.seeds Called on the seed phase. Should be used to seed the database.\n * @param {Function} options.scenarios Alias for seeds.\n * @param {Function} options.routes Should be used to define server routes.\n * @param {Function} options.baseConfig Alias for routes.\n * @param {Object} options.inflector Default inflector (used for pluralization and singularization).\n * @param {Object} options.identityManagers Database identity managers.\n * @param {Object} options.models Server models\n * @param {Object} options.serializers Server serializers\n * @param {Object} options.factories Server factories\n * @param {Object} options.pretender Pretender instance\n */\n\n\nfunction createServer(options) {\n  return new Server(options);\n}\n/**\n  The Mirage server.\n\n  Note that `this` within your `routes` function refers to the server instance, which is the same instance that `server` refers to in your tests.\n\n  @class Server\n  @public\n*/\n\n\nvar Server = /*#__PURE__*/function () {\n  /**\n   * Creates a Server\n   * @param {Object} options Server's configuration object\n   * @param {String} options.urlPrefix The base URL for the routes. Example: `http://miragejs.com`.\n   * @param {String} options.namespace The default namespace for the `Server`. Example: `/api/v1`.\n   * @param {Number} options.timing Default latency for the routes to respond to a request.\n   * @param {String} options.environment Defines the environment of the `Server`.\n   * @param {Boolean} options.trackRequests Pretender `trackRequests`.\n   * @param {Boolean} options.useDefaultPassthroughs True to use mirage provided passthroughs\n   * @param {Boolean} options.logging Set to true or false to explicitly specify logging behavior.\n   * @param {Function} options.seeds Called on the seed phase. Should be used to seed the database.\n   * @param {Function} options.scenarios Alias for seeds.\n   * @param {Function} options.routes Should be used to define server routes.\n   * @param {Function} options.baseConfig Alias for routes.\n   * @param {Object} options.inflector Default inflector (used for pluralization and singularization).\n   * @param {Object} options.identityManagers Database identity managers.\n   * @param {Object} options.models Server models\n   * @param {Object} options.serializers Server serializers\n   * @param {Object} options.factories Server factories\n   * @param {Object} options.pretender Pretender instance\n   */\n  function Server() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Server);\n\n    this._container = new Container();\n    this.config(options);\n    /**\n      Returns the Mirage Db instance.\n       @property db\n      @return Db\n    */\n\n    this.db = this.db || undefined;\n    /**\n      Returns the Mirage Schema (ORM) instance.\n       @property schema\n      @return Schema\n    */\n\n    this.schema = this.schema || undefined;\n  }\n\n  _createClass(Server, [{\n    key: \"config\",\n    value: function config() {\n      var _config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      this.passthroughChecks = this.passthroughChecks || [];\n      var didOverrideConfig = _config.environment && this.environment && this.environment !== _config.environment;\n      assert(!didOverrideConfig, \"You cannot modify Mirage's environment once the server is created\");\n      this.environment = _config.environment || this.environment || \"development\";\n\n      if (_config.routes) {\n        assert(!_config.baseConfig, \"The routes option is an alias for the baseConfig option. You can't pass both options into your server definition.\");\n        _config.baseConfig = _config.routes;\n      }\n\n      if (_config.seeds) {\n        assert(!_config.scenarios, \"The seeds option is an alias for the scenarios.default option. You can't pass both options into your server definition.\");\n        _config.scenarios = {\n          \"default\": _config.seeds\n        };\n      }\n\n      this._config = _config;\n      /**\n        Set the base namespace used for all routes defined with `get`, `post`, `put` or `del`.\n         For example,\n         ```js\n        new Server({\n          routes() {\n            this.namespace = '/api';\n             // this route will handle the URL '/api/contacts'\n            this.get('/contacts', 'contacts');\n          }\n        })\n        ```\n         Note that only routes defined after `this.namespace` are affected. This is useful if you have a few one-off routes that you don't want under your namespace:\n         ```js\n        new Server({\n          routes() {\n             // this route handles /auth\n            this.get('/auth', function() { ...});\n             this.namespace = '/api';\n            // this route will handle the URL '/api/contacts'\n            this.get('/contacts', 'contacts');\n          };\n        })\n        ```\n         If your app is loaded from the filesystem vs. a server (e.g. via Cordova or Electron vs. `localhost` or `https://yourhost.com/`), you will need to explicitly define a namespace. Likely values are `/` (if requests are made with relative paths) or `https://yourhost.com/api/...` (if requests are made to a defined server).\n         For a sample implementation leveraging a configured API host & namespace, check out [this issue comment](https://github.com/miragejs/ember-cli-mirage/issues/497#issuecomment-183458721).\n         @property namespace\n        @type String\n        @public\n      */\n\n      this.namespace = this.namespace || _config.namespace || \"\";\n      /**\n        Mirage needs know the singular and plural versions of certain words for some of its APIs to work.\n         For example, whenever you define a model\n         ```js\n        new Server({\n          models: {\n            post: Model\n          }\n        })\n        ```\n         Mirage will pluralize the word \"post\" and use it to create a `db.posts` database collection.\n         To accomplish this, Mirage uses an object called an Inflector. An Inflector is an object with two methods, `singularize` and `pluralize`, that Mirage will call whenever it needs to inflect a word.\n         Mirage has a default inflector, so if you write\n         ```js\n        new Server()\n        ```\n         you'll be using the node [inflected](https://github.com/martinandert/inflected#readme) package. This can be customized if you have irregular words or need to change the defaults. You can wead more in [the guide on customizing inflections](/docs/advanced/customizing-inflections).\n         You typically should be able to make your customizations using the provided inflector. It's good to match any custom inflections your backend uses, as this will keep your Mirage code more consistent and simpler.\n         You can also override the inflector completely and provide your own `pluralize` and `singularize` methods:\n         ```js\n        new Server({\n          inflector: {\n            pluralize(word) {\n              // your logic\n            },\n            singularize(word) {\n              // your logic\n            }\n          }\n        })\n        ```\n      */\n\n      this.inflector = _config.inflector || defaultInflector$1;\n\n      this._container.register(\"inflector\", this.inflector);\n      /**\n        Sets a string to prefix all route handler URLs with.\n         Useful if your app makes API requests to a different port.\n         ```js\n        new Server({\n          routes() {\n            this.urlPrefix = 'http://localhost:8080'\n          }\n        })\n        ```\n      */\n\n\n      this.urlPrefix = this.urlPrefix || _config.urlPrefix || \"\";\n      /**\n        Set the number of milliseconds for the the Server's response time.\n         By default there's a 400ms delay during development, and 0 delay in testing (so your tests run fast).\n         ```js\n        new Server({\n          routes() {\n            this.timing = 400; // default\n          }\n        })\n        ```\n         To set the timing for individual routes, see the `timing` option for route handlers.\n         @property timing\n        @type Number\n        @public\n      */\n\n      this.timing = this.timing || _config.timing || 400;\n      /**\n        Set to `true` or `false` to explicitly specify logging behavior.\n         By default, server responses are logged in non-testing environments. Logging is disabled by default in testing, so as not to clutter CI test runner output.\n         For example, to enable logging in tests, write the following:\n         ```js\n        test('I can view all users', function() {\n          server.logging = true;\n          server.create('user');\n           visit('/users');\n          // ...\n        });\n        ```\n         You can also write a custom log message using the [Pretender server's `handledRequest` hook](https://github.com/pretenderjs/pretender#handled-requests). (You can access the pretender server from your Mirage server via `server.pretender`.)\n         To override,\n         ```js\n        new Server({\n          routes() {\n            this.pretender.handledRequest = function(verb, path, request) {\n              let { responseText } = request;\n              // log request and response data\n            }\n          }\n        })\n        ```\n         @property logging\n        @return {Boolean}\n        @public\n      */\n\n      this.logging = this.logging !== undefined ? this.logging : undefined;\n      this.testConfig = this.testConfig || undefined;\n      this.trackRequests = _config.trackRequests;\n\n      this._defineRouteHandlerHelpers();\n\n      if (this.db) {\n        this.db.registerIdentityManagers(_config.identityManagers);\n      } else {\n        this.db = this._container.create(\"Db\", undefined, _config.identityManagers);\n      }\n\n      if (this.schema) {\n        this.schema.registerModels(_config.models);\n        this.serializerOrRegistry.registerSerializers(_config.serializers || {});\n      } else {\n        this.schema = this._container.create(\"Schema\", this.db, _config.models);\n        this.serializerOrRegistry = this._container.create(\"SerializerRegistry\", this.schema, _config.serializers);\n      }\n\n      var hasFactories = this._hasModulesOfType(_config, \"factories\");\n\n      var hasDefaultScenario = _config.scenarios && Object.prototype.hasOwnProperty.call(_config.scenarios, \"default\");\n      var didOverridePretenderConfig = _config.trackRequests !== undefined && this.pretender;\n      assert(!didOverridePretenderConfig, \"You cannot modify Pretender's request tracking once the server is created\");\n      /**\n        Mirage uses [pretender.js](https://github.com/trek/pretender) as its xhttp interceptor. In your Mirage config, `this.pretender` refers to the actual Pretender instance, so any config options that work there will work here as well.\n         ```js\n        new Server({\n          routes() {\n            this.pretender.handledRequest = (verb, path, request) => {\n              console.log(`Your server responded to ${path}`);\n            }\n          }\n        })\n        ```\n         Refer to [Pretender's docs](https://github.com/pretenderjs/pretender) if you want to change any options on your Pretender instance.\n         @property pretender\n        @return {Object} The Pretender instance\n        @public\n      */\n\n      this.pretender = this.pretender || _config.pretender || createPretender(this);\n\n      if (_config.baseConfig) {\n        this.loadConfig(_config.baseConfig);\n      }\n\n      if (this.isTest()) {\n        if (_config.testConfig) {\n          this.loadConfig(_config.testConfig);\n        }\n\n        if (typeof window !== \"undefined\") {\n          window.server = this; // TODO: Better way to inject server into test env\n        }\n      }\n\n      if (this.isTest() && hasFactories) {\n        this.loadFactories(_config.factories);\n      } else if (!this.isTest() && hasDefaultScenario) {\n        this.loadFactories(_config.factories);\n\n        _config.scenarios[\"default\"](this);\n      } else {\n        this.loadFixtures();\n      }\n\n      var useDefaultPassthroughs = typeof _config.useDefaultPassthroughs !== \"undefined\" ? _config.useDefaultPassthroughs : true;\n\n      if (useDefaultPassthroughs) {\n        this._configureDefaultPassthroughs();\n      }\n    }\n    /**\n     * Determines if the current environment is the testing environment.\n     *\n     * @method isTest\n     * @return {Boolean} True if the environment is 'test', false otherwise.\n     * @public\n     * @hide\n     */\n\n  }, {\n    key: \"isTest\",\n    value: function isTest() {\n      return this.environment === \"test\";\n    }\n    /**\n      Determines if the server should log.\n       @method shouldLog\n      @return The value of this.logging if defined, or false if in the testing environment,\n      true otherwise.\n      @public\n      @hide\n    */\n\n  }, {\n    key: \"shouldLog\",\n    value: function shouldLog() {\n      return typeof this.logging !== \"undefined\" ? this.logging : !this.isTest();\n    }\n    /**\n     * Determines if the server should track requests.\n     *\n     * @method shouldTrackRequests\n     * @return The value of this.trackRequests if defined, false otherwise.\n     * @public\n     * @hide\n     */\n\n  }, {\n    key: \"shouldTrackRequests\",\n    value: function shouldTrackRequests() {\n      return Boolean(this.trackRequests);\n    }\n    /**\n     * Load the configuration given, setting timing to 0 if in the test\n     * environment.\n     *\n     * @method loadConfig\n     * @param {Object} config The configuration to load.\n     * @public\n     * @hide\n     */\n\n  }, {\n    key: \"loadConfig\",\n    value: function loadConfig(config) {\n      config.call(this);\n      this.timing = this.isTest() ? 0 : this.timing || 0;\n    }\n    /**\n      By default, if your app makes a request that is not defined in your server config, Mirage will throw an error. You can use `passthrough` to whitelist requests, and allow them to pass through your Mirage server to the actual network layer.\n       Note: Put all passthrough config at the bottom of your routes, to give your route handlers precedence.\n       To ignore paths on your current host (as well as configured `namespace`), use a leading `/`:\n       ```js\n      this.passthrough('/addresses');\n      ```\n       You can also pass a list of paths, or call `passthrough` multiple times:\n       ```js\n      this.passthrough('/addresses', '/contacts');\n      this.passthrough('/something');\n      this.passthrough('/else');\n      ```\n       These lines will allow all HTTP verbs to pass through. If you want only certain verbs to pass through, pass an array as the last argument with the specified verbs:\n       ```js\n      this.passthrough('/addresses', ['post']);\n      this.passthrough('/contacts', '/photos', ['get']);\n      ```\n       You can pass a function to `passthrough` to do a runtime check on whether or not the request should be handled by Mirage. If the function returns `true` Mirage will not handle the request and let it pass through.\n       ```js\n      this.passthrough(request => {\n        return request.queryParams.skipMirage;\n      });\n      ```\n       If you want all requests on the current domain to pass through, simply invoke the method with no arguments:\n       ```js\n      this.passthrough();\n      ```\n       Note again that the current namespace (i.e. any `namespace` property defined above this call) will be applied.\n       You can also allow other-origin hosts to passthrough. If you use a fully-qualified domain name, the `namespace` property will be ignored. Use two * wildcards to match all requests under a path:\n       ```js\n      this.passthrough('http://api.foo.bar/**');\n      this.passthrough('http://api.twitter.com/v1/cards/**');\n      ```\n       In versions of Pretender prior to 0.12, `passthrough` only worked with jQuery >= 2.x. As long as you're on Pretender@0.12 or higher, you should be all set.\n       @method passthrough\n      @param {String} [...paths] Any number of paths to whitelist\n      @param {Array} options Unused\n      @public\n    */\n\n  }, {\n    key: \"passthrough\",\n    value: function passthrough() {\n      var _this = this;\n\n      for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n        paths[_key] = arguments[_key];\n      } // this only works in browser-like environments for now. in node users will have to configure\n      // their own interceptor if they are using one.\n\n\n      if (typeof window !== \"undefined\") {\n        var verbs = [\"get\", \"post\", \"put\", \"delete\", \"patch\", \"options\", \"head\"];\n        var lastArg = paths[paths.length - 1];\n\n        if (paths.length === 0) {\n          paths = [\"/**\", \"/\"];\n        } else if (Array.isArray(lastArg)) {\n          verbs = paths.pop();\n        }\n\n        paths.forEach(function (path) {\n          if (typeof path === \"function\") {\n            _this.passthroughChecks.push(path);\n          } else {\n            verbs.forEach(function (verb) {\n              var fullPath = _this._getFullPath(path);\n\n              _this.pretender[verb](fullPath, _this.pretender.passthrough);\n            });\n          }\n        });\n      }\n    }\n    /**\n      By default, `fixtures` will be loaded during testing if you don't have factories defined, and during development if you don't have `seeds` defined. You can use `loadFixtures()` to also load fixture files in either of these environments, in addition to using factories to seed your database.\n       `server.loadFixtures()` loads all the files, and `server.loadFixtures(file1, file2...)` loads selective fixture files.\n       For example, in a test you may want to start out with all your fixture data loaded:\n       ```js\n      test('I can view the photos', function() {\n        server.loadFixtures();\n        server.createList('photo', 10);\n         visit('/');\n         andThen(() => {\n          equal( find('img').length, 10 );\n        });\n      });\n      ```\n       or in development, you may want to load a few reference fixture files, and use factories to define the rest of your data:\n       ```js\n      new Server({\n        ...,\n        seeds(server) {\n          server.loadFixtures('countries', 'states');\n           let author = server.create('author');\n          server.createList('post', 10, {author_id: author.id});\n        }\n      })\n      ```\n       @method loadFixtures\n      @param {String} [...args] The name of the fixture to load.\n      @public\n    */\n\n  }, {\n    key: \"loadFixtures\",\n    value: function loadFixtures() {\n      var fixtures = this._config.fixtures;\n\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      if (args.length) {\n        var camelizedArgs = args.map(camelize);\n        var missingKeys = camelizedArgs.filter(function (key) {\n          return !fixtures[key];\n        });\n\n        if (missingKeys.length) {\n          throw new Error(\"Fixtures not found: \".concat(missingKeys.join(\", \")));\n        }\n\n        fixtures = pick.apply(void 0, [fixtures].concat(_toConsumableArray(camelizedArgs)));\n      }\n\n      this.db.loadData(fixtures);\n    }\n    /*\n      Factory methods\n    */\n\n    /**\n     * Load factories into Mirage's database.\n     *\n     * @method loadFactories\n     * @param {Object} factoryMap\n     * @public\n     * @hide\n     */\n\n  }, {\n    key: \"loadFactories\",\n    value: function loadFactories() {\n      var _this2 = this;\n\n      var factoryMap = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}; // Store a reference to the factories\n\n      var currentFactoryMap = this._factoryMap || {};\n      this._factoryMap = assign(currentFactoryMap, factoryMap); // Create a collection for each factory\n\n      Object.keys(factoryMap).forEach(function (type) {\n        var collectionName = _this2.schema.toCollectionName(type);\n\n        _this2.db.createCollection(collectionName);\n      });\n    }\n    /**\n     * Get the factory for a given type.\n     *\n     * @method factoryFor\n     * @param {String} type\n     * @private\n     * @hide\n     */\n\n  }, {\n    key: \"factoryFor\",\n    value: function factoryFor(type) {\n      var camelizedType = camelize(type);\n\n      if (this._factoryMap && this._factoryMap[camelizedType]) {\n        return this._factoryMap[camelizedType];\n      }\n    }\n  }, {\n    key: \"build\",\n    value: function build(type) {\n      for (var _len3 = arguments.length, traitsAndOverrides = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n        traitsAndOverrides[_key3 - 1] = arguments[_key3];\n      }\n\n      var traits = traitsAndOverrides.filter(function (arg) {\n        return arg && typeof arg === \"string\";\n      });\n      var overrides = find(traitsAndOverrides, function (arg) {\n        return isPlainObject(arg);\n      });\n      var camelizedType = camelize(type); // Store sequence for factory type as instance variable\n\n      this.factorySequences = this.factorySequences || {};\n      this.factorySequences[camelizedType] = this.factorySequences[camelizedType] + 1 || 0;\n      var OriginalFactory = this.factoryFor(type);\n\n      if (OriginalFactory) {\n        OriginalFactory = OriginalFactory.extend({});\n        var attrs = OriginalFactory.attrs || {};\n\n        this._validateTraits(traits, OriginalFactory, type);\n\n        var mergedExtensions = this._mergeExtensions(attrs, traits, overrides);\n\n        this._mapAssociationsFromAttributes(type, attrs, overrides);\n\n        this._mapAssociationsFromAttributes(type, mergedExtensions);\n\n        var Factory = OriginalFactory.extend(mergedExtensions);\n        var factory = new Factory();\n        var sequence = this.factorySequences[camelizedType];\n        return factory.build(sequence);\n      } else {\n        return overrides;\n      }\n    }\n  }, {\n    key: \"buildList\",\n    value: function buildList(type, amount) {\n      assert(isInteger(amount), \"second argument has to be an integer, you passed: \".concat(_typeof(amount)));\n      var list = [];\n\n      for (var _len4 = arguments.length, traitsAndOverrides = new Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {\n        traitsAndOverrides[_key4 - 2] = arguments[_key4];\n      }\n\n      var buildArgs = [type].concat(traitsAndOverrides);\n\n      for (var i = 0; i < amount; i++) {\n        list.push(this.build.apply(this, buildArgs));\n      }\n\n      return list;\n    }\n    /**\n      Generates a single model of type *type*, inserts it into the database (giving it an id), and returns the data that was\n      added.\n       ```js\n      test(\"I can view a contact's details\", function() {\n        let contact = server.create('contact');\n         visit('/contacts/' + contact.id);\n         andThen(() => {\n          equal( find('h1').text(), 'The contact is Link');\n        });\n      });\n      ```\n       You can override the attributes from the factory definition with a\n      hash passed in as the second parameter. For example, if we had this factory\n       ```js\n      export default Factory.extend({\n        name: 'Link'\n      });\n      ```\n       we could override the name like this:\n       ```js\n      test(\"I can view the contacts\", function() {\n        server.create('contact', {name: 'Zelda'});\n         visit('/');\n         andThen(() => {\n          equal( find('p').text(), 'Zelda' );\n        });\n      });\n      ```\n       @method create\n      @param type the singularized type of the model\n      @param traitsAndOverrides\n      @public\n    */\n\n  }, {\n    key: \"create\",\n    value: function create(type) {\n      var _this3 = this;\n\n      assert(this._modelOrFactoryExistsForType(type), \"You called server.create('\".concat(type, \"') but no model or factory was found. Make sure you're passing in the singularized version of the model or factory name.\")); // When there is a Model defined, we should return an instance\n      // of it instead of returning the bare attributes.\n\n      for (var _len5 = arguments.length, options = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n        options[_key5 - 1] = arguments[_key5];\n      }\n\n      var traits = options.filter(function (arg) {\n        return arg && typeof arg === \"string\";\n      });\n      var overrides = find(options, function (arg) {\n        return isPlainObject(arg);\n      });\n      var collectionFromCreateList = find(options, function (arg) {\n        return arg && Array.isArray(arg);\n      });\n      var attrs = this.build.apply(this, [type].concat(_toConsumableArray(traits), [overrides]));\n      var modelOrRecord;\n\n      if (this.schema && this.schema[this.schema.toCollectionName(type)]) {\n        var modelClass = this.schema[this.schema.toCollectionName(type)];\n        modelOrRecord = modelClass.create(attrs);\n      } else {\n        var collection, collectionName;\n\n        if (collectionFromCreateList) {\n          collection = collectionFromCreateList;\n        } else {\n          collectionName = this.schema ? this.schema.toInternalCollectionName(type) : \"_\".concat(this.inflector.pluralize(type));\n          collection = this.db[collectionName];\n        }\n\n        assert(collection, \"You called server.create('\".concat(type, \"') but no model or factory was found.\"));\n        modelOrRecord = collection.insert(attrs);\n      }\n\n      var OriginalFactory = this.factoryFor(type);\n\n      if (OriginalFactory) {\n        OriginalFactory.extractAfterCreateCallbacks({\n          traits: traits\n        }).forEach(function (afterCreate) {\n          afterCreate(modelOrRecord, _this3);\n        });\n      }\n\n      return modelOrRecord;\n    }\n    /**\n      Creates *amount* models of type *type*, optionally overriding the attributes from the factory with *attrs*.\n       Returns the array of records that were added to the database.\n       Here's an example from a test:\n       ```js\n      test(\"I can view the contacts\", function() {\n        server.createList('contact', 5);\n        let youngContacts = server.createList('contact', 5, {age: 15});\n         visit('/');\n         andThen(function() {\n          equal(currentRouteName(), 'index');\n          equal( find('p').length, 10 );\n        });\n      });\n      ```\n       And one from setting up your development database:\n       ```js\n      new Server({\n        seeds(server) {\n          let contact = server.create('contact')\n           server.createList('address', 5, { contact })\n        }\n      })\n      ```\n       @method createList\n      @param type\n      @param amount\n      @param traitsAndOverrides\n      @public\n    */\n\n  }, {\n    key: \"createList\",\n    value: function createList(type, amount) {\n      assert(this._modelOrFactoryExistsForType(type), \"You called server.createList('\".concat(type, \"') but no model or factory was found. Make sure you're passing in the singularized version of the model or factory name.\"));\n      assert(isInteger(amount), \"second argument has to be an integer, you passed: \".concat(_typeof(amount)));\n      var list = [];\n      var collectionName = this.schema ? this.schema.toInternalCollectionName(type) : \"_\".concat(this.inflector.pluralize(type));\n      var collection = this.db[collectionName];\n\n      for (var _len6 = arguments.length, traitsAndOverrides = new Array(_len6 > 2 ? _len6 - 2 : 0), _key6 = 2; _key6 < _len6; _key6++) {\n        traitsAndOverrides[_key6 - 2] = arguments[_key6];\n      }\n\n      var createArguments = [type].concat(traitsAndOverrides, [collection]);\n\n      for (var i = 0; i < amount; i++) {\n        list.push(this.create.apply(this, createArguments));\n      }\n\n      return list;\n    }\n    /**\n      Shutdown the server and stop intercepting network requests.\n       @method shutdown\n      @public\n    */\n\n  }, {\n    key: \"shutdown\",\n    value: function shutdown() {\n      if (typeof window !== \"undefined\") {\n        this.pretender.shutdown();\n      }\n\n      if (typeof window !== \"undefined\" && this.environment === \"test\") {\n        window.server = undefined;\n      }\n    }\n  }, {\n    key: \"resource\",\n    value: function resource(resourceName) {\n      var _this4 = this;\n\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          only = _ref.only,\n          except = _ref.except,\n          path = _ref.path;\n\n      resourceName = this.inflector.pluralize(resourceName);\n      path = path || \"/\".concat(resourceName);\n      only = only || [];\n      except = except || [];\n\n      if (only.length > 0 && except.length > 0) {\n        throw \"cannot use both :only and :except options\";\n      }\n\n      var actionsMethodsAndsPathsMappings = {\n        index: {\n          methods: [\"get\"],\n          path: \"\".concat(path)\n        },\n        show: {\n          methods: [\"get\"],\n          path: \"\".concat(path, \"/:id\")\n        },\n        create: {\n          methods: [\"post\"],\n          path: \"\".concat(path)\n        },\n        update: {\n          methods: [\"put\", \"patch\"],\n          path: \"\".concat(path, \"/:id\")\n        },\n        \"delete\": {\n          methods: [\"del\"],\n          path: \"\".concat(path, \"/:id\")\n        }\n      };\n      var allActions = Object.keys(actionsMethodsAndsPathsMappings);\n      var actions = only.length > 0 && only || except.length > 0 && allActions.filter(function (action) {\n        return except.indexOf(action) === -1;\n      }) || allActions;\n      actions.forEach(function (action) {\n        var methodsWithPath = actionsMethodsAndsPathsMappings[action];\n        methodsWithPath.methods.forEach(function (method) {\n          return path === resourceName ? _this4[method](methodsWithPath.path) : _this4[method](methodsWithPath.path, resourceName);\n        });\n      });\n    }\n    /**\n     *\n     * @private\n     * @hide\n     */\n\n  }, {\n    key: \"_defineRouteHandlerHelpers\",\n    value: function _defineRouteHandlerHelpers() {\n      var _this5 = this;\n\n      [[\"get\"], [\"post\"], [\"put\"], [\"delete\", \"del\"], [\"patch\"], [\"head\"], [\"options\"]].forEach(function (_ref2) {\n        var _ref3 = _slicedToArray(_ref2, 2),\n            verb = _ref3[0],\n            alias = _ref3[1];\n\n        _this5[verb] = function (path) {\n          for (var _len7 = arguments.length, args = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\n            args[_key7 - 1] = arguments[_key7];\n          }\n\n          var _extractRouteArgument = extractRouteArguments(args),\n              _extractRouteArgument2 = _slicedToArray(_extractRouteArgument, 3),\n              rawHandler = _extractRouteArgument2[0],\n              customizedCode = _extractRouteArgument2[1],\n              options = _extractRouteArgument2[2];\n\n          return _this5._registerRouteHandler(verb, path, rawHandler, customizedCode, options);\n        };\n\n        if (alias) {\n          _this5[alias] = _this5[verb];\n        }\n      });\n    }\n  }, {\n    key: \"_serialize\",\n    value: function _serialize(body) {\n      if (typeof body === \"string\") {\n        return body;\n      } else {\n        return JSON.stringify(body);\n      }\n    }\n  }, {\n    key: \"_registerRouteHandler\",\n    value: function _registerRouteHandler(verb, path, rawHandler, customizedCode, options) {\n      var _this6 = this;\n\n      var routeHandler = this._container.create(\"RouteHandler\", {\n        schema: this.schema,\n        verb: verb,\n        rawHandler: rawHandler,\n        customizedCode: customizedCode,\n        options: options,\n        path: path,\n        serializerOrRegistry: this.serializerOrRegistry\n      });\n\n      var fullPath = this._getFullPath(path);\n\n      var timing = options.timing !== undefined ? options.timing : function () {\n        return _this6.timing;\n      };\n\n      if (this.pretender) {\n        return this.pretender[verb](fullPath, function (request) {\n          return routeHandler.handle(request).then(function (mirageResponse) {\n            var _mirageResponse = _slicedToArray(mirageResponse, 3),\n                code = _mirageResponse[0],\n                headers = _mirageResponse[1],\n                response = _mirageResponse[2];\n\n            return [code, headers, _this6._serialize(response)];\n          });\n        }, timing);\n      }\n    }\n    /**\n     *\n     * @private\n     * @hide\n     */\n\n  }, {\n    key: \"_hasModulesOfType\",\n    value: function _hasModulesOfType(modules, type) {\n      var modulesOfType = modules[type];\n      return modulesOfType ? Object.keys(modulesOfType).length > 0 : false;\n    }\n    /**\n     * Builds a full path for Pretender to monitor based on the `path` and\n     * configured options (`urlPrefix` and `namespace`).\n     *\n     * @private\n     * @hide\n     */\n\n  }, {\n    key: \"_getFullPath\",\n    value: function _getFullPath(path) {\n      path = path[0] === \"/\" ? path.slice(1) : path;\n      var fullPath = \"\";\n      var urlPrefix = this.urlPrefix ? this.urlPrefix.trim() : \"\";\n      var namespace = \"\"; // if there is a urlPrefix and a namespace\n\n      if (this.urlPrefix && this.namespace) {\n        if (this.namespace[0] === \"/\" && this.namespace[this.namespace.length - 1] === \"/\") {\n          namespace = this.namespace.substring(0, this.namespace.length - 1).substring(1);\n        }\n\n        if (this.namespace[0] === \"/\" && this.namespace[this.namespace.length - 1] !== \"/\") {\n          namespace = this.namespace.substring(1);\n        }\n\n        if (this.namespace[0] !== \"/\" && this.namespace[this.namespace.length - 1] === \"/\") {\n          namespace = this.namespace.substring(0, this.namespace.length - 1);\n        }\n\n        if (this.namespace[0] !== \"/\" && this.namespace[this.namespace.length - 1] !== \"/\") {\n          namespace = this.namespace;\n        }\n      } // if there is a namespace and no urlPrefix\n\n\n      if (this.namespace && !this.urlPrefix) {\n        if (this.namespace[0] === \"/\" && this.namespace[this.namespace.length - 1] === \"/\") {\n          namespace = this.namespace.substring(0, this.namespace.length - 1);\n        }\n\n        if (this.namespace[0] === \"/\" && this.namespace[this.namespace.length - 1] !== \"/\") {\n          namespace = this.namespace;\n        }\n\n        if (this.namespace[0] !== \"/\" && this.namespace[this.namespace.length - 1] === \"/\") {\n          var namespaceSub = this.namespace.substring(0, this.namespace.length - 1);\n          namespace = \"/\".concat(namespaceSub);\n        }\n\n        if (this.namespace[0] !== \"/\" && this.namespace[this.namespace.length - 1] !== \"/\") {\n          namespace = \"/\".concat(this.namespace);\n        }\n      } // if no namespace\n\n\n      if (!this.namespace) {\n        namespace = \"\";\n      } // check to see if path is a FQDN. if so, ignore any urlPrefix/namespace that was set\n\n\n      if (/^https?:\\/\\//.test(path)) {\n        fullPath += path;\n      } else {\n        // otherwise, if there is a urlPrefix, use that as the beginning of the path\n        if (urlPrefix.length) {\n          fullPath += urlPrefix[urlPrefix.length - 1] === \"/\" ? urlPrefix : \"\".concat(urlPrefix, \"/\");\n        } // add the namespace to the path\n\n\n        fullPath += namespace; // add a trailing slash to the path if it doesn't already contain one\n\n        if (fullPath[fullPath.length - 1] !== \"/\") {\n          fullPath += \"/\";\n        } // finally add the configured path\n\n\n        fullPath += path; // if we're making a same-origin request, ensure a / is prepended and\n        // dedup any double slashes\n\n        if (!/^https?:\\/\\//.test(fullPath)) {\n          fullPath = \"/\".concat(fullPath);\n          fullPath = fullPath.replace(/\\/+/g, \"/\");\n        }\n      }\n\n      return fullPath;\n    }\n    /**\n     *\n     * @private\n     * @hide\n     */\n\n  }, {\n    key: \"_configureDefaultPassthroughs\",\n    value: function _configureDefaultPassthroughs() {\n      var _this7 = this;\n\n      defaultPassthroughs.forEach(function (passthroughUrl) {\n        _this7.passthrough(passthroughUrl);\n      });\n    }\n    /**\n     *\n     * @private\n     * @hide\n     */\n\n  }, {\n    key: \"_typeIsPluralForModel\",\n    value: function _typeIsPluralForModel(typeOrCollectionName) {\n      if (typeof isPluralForModelCache[typeOrCollectionName] !== \"boolean\") {\n        var modelOrFactoryExists = this._modelOrFactoryExistsForTypeOrCollectionName(typeOrCollectionName);\n\n        var isPlural = typeOrCollectionName === this.inflector.pluralize(typeOrCollectionName);\n        var isUncountable = this.inflector.singularize(typeOrCollectionName) === this.inflector.pluralize(typeOrCollectionName);\n        var isPluralForModel = isPlural && !isUncountable && modelOrFactoryExists;\n        isPluralForModelCache[typeOrCollectionName] = isPluralForModel;\n      }\n\n      return isPluralForModelCache[typeOrCollectionName];\n    }\n    /**\n     *\n     * @private\n     * @hide\n     */\n\n  }, {\n    key: \"_modelOrFactoryExistsForType\",\n    value: function _modelOrFactoryExistsForType(type) {\n      var modelExists = this.schema && this.schema.modelFor(camelize(type));\n      var dbCollectionExists = this.db[this.schema.toInternalCollectionName(type)];\n      return (modelExists || dbCollectionExists) && !this._typeIsPluralForModel(type);\n    }\n    /**\n     *\n     * @private\n     * @hide\n     */\n\n  }, {\n    key: \"_modelOrFactoryExistsForTypeOrCollectionName\",\n    value: function _modelOrFactoryExistsForTypeOrCollectionName(typeOrCollectionName) {\n      var modelExists = this.schema && this.schema.modelFor(camelize(typeOrCollectionName));\n      var dbCollectionExists = this.db[this.schema.toInternalCollectionName(typeOrCollectionName)];\n      return modelExists || dbCollectionExists;\n    }\n    /**\n     *\n     * @private\n     * @hide\n     */\n\n  }, {\n    key: \"_validateTraits\",\n    value: function _validateTraits(traits, factory, type) {\n      traits.forEach(function (traitName) {\n        if (!factory.isTrait(traitName)) {\n          throw new Error(\"'\".concat(traitName, \"' trait is not registered in '\").concat(type, \"' factory\"));\n        }\n      });\n    }\n    /**\n     *\n     * @private\n     * @hide\n     */\n\n  }, {\n    key: \"_mergeExtensions\",\n    value: function _mergeExtensions(attrs, traits, overrides) {\n      var allExtensions = traits.map(function (traitName) {\n        return attrs[traitName].extension;\n      });\n      allExtensions.push(overrides || {});\n      return allExtensions.reduce(function (accum, extension) {\n        return assign(accum, extension);\n      }, {});\n    }\n    /**\n     *\n     * @private\n     * @hide\n     */\n\n  }, {\n    key: \"_mapAssociationsFromAttributes\",\n    value: function _mapAssociationsFromAttributes(modelName, attributes) {\n      var _this8 = this;\n\n      var overrides = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      Object.keys(attributes || {}).filter(function (attr) {\n        return isAssociation(attributes[attr]);\n      }).forEach(function (attr) {\n        var modelClass = _this8.schema.modelClassFor(modelName);\n\n        var association = modelClass.associationFor(attr);\n        assert(association && association instanceof BelongsTo, \"You're using the `association` factory helper on the '\".concat(attr, \"' attribute of your \").concat(modelName, \" factory, but that attribute is not a `belongsTo` association.\"));\n        var isSelfReferentialBelongsTo = association && association instanceof BelongsTo && association.modelName === modelName;\n        assert(!isSelfReferentialBelongsTo, \"You're using the association() helper on your \".concat(modelName, \" factory for \").concat(attr, \", which is a belongsTo self-referential relationship. You can't do this as it will lead to infinite recursion. You can move the helper inside of a trait and use it selectively.\"));\n        var isPolymorphic = association && association.opts && association.opts.polymorphic;\n        assert(!isPolymorphic, \"You're using the association() helper on your \".concat(modelName, \" factory for \").concat(attr, \", which is a polymorphic relationship. This is not currently supported.\"));\n        var factoryAssociation = attributes[attr];\n        var foreignKey = \"\".concat(camelize(attr), \"Id\");\n\n        if (!overrides[attr]) {\n          attributes[foreignKey] = _this8.create.apply(_this8, [association.modelName].concat(_toConsumableArray(factoryAssociation.traitsAndOverrides))).id;\n        }\n\n        delete attributes[attr];\n      });\n    }\n  }]);\n\n  return Server;\n}();\n\nvar ActiveModelSerializer = Serializer.extend({\n  serializeIds: \"always\",\n  normalizeIds: true,\n  keyForModel: function keyForModel(type) {\n    return underscore(type);\n  },\n  keyForAttribute: function keyForAttribute(attr) {\n    return underscore(attr);\n  },\n  keyForRelationship: function keyForRelationship(type) {\n    return this._container.inflector.pluralize(underscore(type));\n  },\n  keyForEmbeddedRelationship: function keyForEmbeddedRelationship(attributeName) {\n    return underscore(attributeName);\n  },\n  keyForRelationshipIds: function keyForRelationshipIds(type) {\n    return \"\".concat(underscore(this._container.inflector.singularize(type)), \"_ids\");\n  },\n  keyForForeignKey: function keyForForeignKey(relationshipName) {\n    return \"\".concat(underscore(relationshipName), \"_id\");\n  },\n  keyForPolymorphicForeignKeyId: function keyForPolymorphicForeignKeyId(relationshipName) {\n    return \"\".concat(underscore(relationshipName), \"_id\");\n  },\n  keyForPolymorphicForeignKeyType: function keyForPolymorphicForeignKeyType(relationshipName) {\n    return \"\".concat(underscore(relationshipName), \"_type\");\n  },\n  normalize: function normalize(payload) {\n    var _this = this;\n\n    var type = Object.keys(payload)[0];\n    var attrs = payload[type];\n    var modelName = camelize(type);\n    var modelClass = this.schema.modelClassFor(modelName);\n    var belongsToAssociations = modelClass.belongsToAssociations,\n        hasManyAssociations = modelClass.hasManyAssociations;\n    var belongsToKeys = Object.keys(belongsToAssociations);\n    var hasManyKeys = Object.keys(hasManyAssociations);\n    var jsonApiPayload = {\n      data: {\n        type: this._container.inflector.pluralize(type),\n        attributes: {}\n      }\n    };\n\n    if (attrs.id) {\n      jsonApiPayload.data.id = attrs.id;\n    }\n\n    var relationships = {};\n    Object.keys(attrs).forEach(function (key) {\n      if (key !== \"id\") {\n        if (_this.normalizeIds) {\n          if (belongsToKeys.includes(key)) {\n            var association = belongsToAssociations[key];\n            var associationModel = association.modelName;\n            relationships[dasherize(key)] = {\n              data: {\n                type: associationModel,\n                id: attrs[key]\n              }\n            };\n          } else if (hasManyKeys.includes(key)) {\n            var _association = hasManyAssociations[key];\n            var _associationModel = _association.modelName;\n            var data = attrs[key].map(function (id) {\n              return {\n                type: _associationModel,\n                id: id\n              };\n            });\n            relationships[dasherize(key)] = {\n              data: data\n            };\n          } else {\n            jsonApiPayload.data.attributes[dasherize(key)] = attrs[key];\n          }\n        } else {\n          jsonApiPayload.data.attributes[dasherize(key)] = attrs[key];\n        }\n      }\n    });\n\n    if (Object.keys(relationships).length) {\n      jsonApiPayload.data.relationships = relationships;\n    }\n\n    return jsonApiPayload;\n  },\n  getCoalescedIds: function getCoalescedIds(request) {\n    return request.queryParams && request.queryParams.ids;\n  }\n});\nvar restSerializer = ActiveModelSerializer.extend({\n  serializeIds: \"always\",\n  keyForModel: function keyForModel(type) {\n    return camelize(type);\n  },\n  keyForAttribute: function keyForAttribute(attr) {\n    return camelize(attr);\n  },\n  keyForRelationship: function keyForRelationship(type) {\n    return camelize(this._container.inflector.pluralize(type));\n  },\n  keyForEmbeddedRelationship: function keyForEmbeddedRelationship(attributeName) {\n    return camelize(attributeName);\n  },\n  keyForRelationshipIds: function keyForRelationshipIds(type) {\n    return camelize(this._container.inflector.pluralize(type));\n  },\n  keyForForeignKey: function keyForForeignKey(relationshipName) {\n    return camelize(this._container.inflector.singularize(relationshipName));\n  },\n  getCoalescedIds: function getCoalescedIds(request) {\n    return request.queryParams && request.queryParams.ids;\n  }\n});\n/**\n  UUID generator\n\n  @hide\n*/\n\nfunction uuid() {\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n    var r = Math.random() * 16 | 0;\n    var v = c === \"x\" ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n/**\n  @hide\n*/\n\n\nfunction hasMany() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return _construct(HasMany, args);\n}\n/**\n  @hide\n*/\n\n\nfunction belongsTo() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  return _construct(BelongsTo, args);\n}\n\nvar index = {\n  Factory: Factory,\n  Response: Response,\n  hasMany: hasMany,\n  belongsTo: belongsTo\n};\nexport default index;\nexport { ActiveModelSerializer, Collection, Factory, IdentityManager, JSONAPISerializer, Model, Response, restSerializer as RestSerializer, Serializer, Server, Db as _Db, DbCollection as _DbCollection, RouteHandler as _RouteHandler, SerializerRegistry as _SerializerRegistry, assert as _assert, Association as _ormAssociationsAssociation, BelongsTo as _ormAssociationsBelongsTo, HasMany as _ormAssociationsHasMany, PolymorphicCollection as _ormPolymorphicCollection, Schema as _ormSchema, BaseRouteHandler as _routeHandlersBase, FunctionRouteHandler as _routeHandlersFunction, ObjectRouteHandler as _routeHandlersObject, BaseShorthandRouteHandler as _routeHandlersShorthandsBase, DeleteShorthandRouteHandler as _routeHandlersShorthandsDelete, GetShorthandRouteHandler as _routeHandlersShorthandsGet, HeadShorthandRouteHandler as _routeHandlersShorthandsHead, PostShorthandRouteHandler as _routeHandlersShorthandsPost, PutShorthandRouteHandler as _routeHandlersShorthandsPut, extend as _utilsExtend, camelize as _utilsInflectorCamelize, capitalize as _utilsInflectorCapitalize, dasherize as _utilsInflectorDasherize, underscore as _utilsInflectorUnderscore, isAssociation as _utilsIsAssociation, referenceSort as _utilsReferenceSort, uuid as _utilsUuid, association, belongsTo, createServer, defaultPassthroughs, hasMany, trait };","map":{"version":3,"sources":["../lib/utils/reference-sort.js","../lib/factory.js","../lib/identity-manager.js","../lib/association.js","../lib/trait.js","../lib/response.js","../lib/utils/inflector.js","../lib/utils/is-association.js","../lib/assert.js","../lib/orm/associations/association.js","../lib/orm/associations/belongs-to.js","../lib/db-collection.js","../lib/db.js","../lib/orm/collection.js","../lib/orm/polymorphic-collection.js","../lib/orm/associations/has-many.js","../lib/route-handlers/base.js","../lib/route-handlers/function.js","../lib/route-handlers/object.js","../lib/route-handlers/shorthands/base.js","../lib/route-handlers/shorthands/get.js","../lib/route-handlers/shorthands/post.js","../lib/route-handlers/shorthands/put.js","../lib/route-handlers/shorthands/delete.js","../lib/route-handlers/shorthands/head.js","../lib/route-handler.js","../lib/utils/extend.js","../lib/orm/model.js","../lib/serializer.js","../lib/serializers/json-api-serializer.js","../lib/serializer-registry.js","../lib/orm/schema.js","../lib/container.js","../lib/server.js","../lib/serializers/active-model-serializer.js","../lib/serializers/rest-serializer.js","../lib/utils/uuid.js","../lib/index.js"],"names":["nodes","uniq","flatten","cursor","sorted","visited","i","visit","predecessors","JSON","outgoing","edge","preds","pair","child","Factory","object","topLevelAttrs","Object","keys","sortAttrs","buildAttrs","mapValues","buildSingleValue","Array","value","isPlainObject","isFunction","newAttrs","Subclass","traits","afterCreateCallbacks","attrs","traitCandidates","Temp","obj","refs","get","set","enumerable","configurable","property","referenceSort","n","IdentityManager","uniqueIdentifier","isNumber","nextValue","id","association","traitsAndOverrides","__isAssociation__","trait","__isTrait__","extension","warn","console","Response","headers","data","code","camelizeCache","dasherizeCache","underscoreCache","capitalizeCache","camelizedWord","_camelize","underscore","camelized","dasherized","_dasherize","underscored","_underscore","capitalized","_capitalize","errorProps","text","tmp","Error","idx","prop","MirageError","Association","modelName","dasherize","opts","schema","isExplicitReflexive","isImplicitReflexive","identifierCache","BelongsTo","identifier","camelize","foreignKey","ModelClass","key","modelPrototype","associationHash","tempParent","type","assert","foreignKeyId","model","inverse","capitalize","parent","owner","fk","dependents","potentialOwner","dependent","DbCollection","duplicate","map","ids","records","record","query","attributesForCreate","queryResult","mergedAttributes","createdRecord","target","changedRecords","oldRecord","isEqual","index","String","queryFunction","targetId","currentId","attr","Db","cloneDeep","collection","name","initialData","newCollection","recordsCopy","collections","c","identityManagers","Collection","models","args","invokeMap","match","m","f","filteredModels","sortedModels","slicedModels","PolymorphicCollection","HasMany","tempChildren","el","polymorphicIds","compact","children","currentIds","pathModelClassCache","BaseRouteHandler","fullPath","path","segment","lastPath","request","jsonApiDoc","body","json","sum","relationship","modelClass","valueForRelationship","rel","requestBody","urlEncodedParts","urlEncodedPart","a","decodeURIComponent","FunctionRouteHandler","response","serializerType","serializer","explicit","requestHeaders","lowerCaseHeaders","header","ObjectRouteHandler","BaseShorthandRouteHandler","options","shorthand","modelClasses","GetShorthandRouteHandler","camelizedModelName","PostShorthandRouteHandler","PutShorthandRouteHandler","DeleteShorthandRouteHandler","childTypes","HeadShorthandRouteHandler","DEFAULT_CODES","put","post","verb","serializerOrRegistry","rawHandler","handler","RouteHandler","customizedCode","createHandler","serializedMirageResponse","result","e","message","stack","Promise","mirageResponse","resolve","Child","protoProps","has","Model","fks","val","hasDbRecord","hasId","collectionName","associations","candidate","matchingPolymorphic","matchingInverse","candidateInverse","matchingExplicitInverses","modelMatches","inverseKeyMatches","candidateIsImplicitInverse","candidateIsExplicitInverse","candidateMatches","associatedModelOrCollection","found","isAssociation","existingProperty","isFk","isNull","isCollection","isArrayOfModels","item","isArray","isModelOrCollection","modelOrCollection","foreignKeyName","foreignKeys","foreignKeyLabel","values","tempAssociation","associateIds","associate","associateId","tempAssociate","fkValue","inverseFk","ownerId","newId","inverseCollection","currentIdsForInverse","newIdsForInverse","alreadyAssociatedWith","idLabel","Serializer","primaryResource","toInclude","didSerialize","isEmpty","resourceHash","newIncludes","newDidSerialize","nextIncludedResource","newToInclude","resource","newJson","hash","addToIncludes","rootKey","hashWithRoot","newModels","removeForeignKeys","lookupSerializer","modelSerializer","uniqBy","resourceHashKey","associatedResource","associatedResourceHash","formattedKey","memo","newHash","formattedTypeKey","formattedIdKey","attributeName","relationshipName","formattedAttrs","JSONAPISerializer","included","relationshipPaths","includes","relationshipNames","names","nameForCurrentResource","modelsToAdd","attributes","relationships","relationshipKey","relationshipHash","links","graph","graphKey","graphResource","primaryResourceKey","queryParamIncludes","relationshipKeys","includesPath","graphRelationshipKey","normalizedRelationshipKey","hasAssociation","relationshipData","resourceKey","SerializerRegistry","serializerMap","payload","SerializerForResponse","newSerializerMaps","currentSerializerMap","collectionNameCache","internalCollectionNameCache","modelNameCache","Schema","modelsMap","polymorphic","forIn","fksAddedFromThisModel","fkHolder","create","all","find","findBy","findOrCreateBy","where","none","first","directDependents","polymorphicAssociations","internalCollectionName","classes","defaultInflector","singularize","pluralize","Container","className","Class","defaultContainer","isPluralForModelCache","server","responseText","loggedRequest","loggedResponse","originalCheckPassthrough","shouldPassthrough","passthroughCheck","url","decodeURI","trackRequests","defaultRouteOptions","coalesce","timing","undefined","defaultPassthroughs","allOptions","optionKeys","lastArg","isOption","assign","t","Server","config","didOverrideConfig","seeds","hasFactories","hasDefaultScenario","didOverridePretenderConfig","createPretender","window","useDefaultPassthroughs","Boolean","paths","verbs","fixtures","camelizedArgs","missingKeys","pick","factoryMap","currentFactoryMap","camelizedType","arg","overrides","OriginalFactory","mergedExtensions","factory","sequence","amount","isInteger","list","buildArgs","collectionFromCreateList","modelOrRecord","afterCreate","createArguments","resourceName","only","except","actionsMethodsAndsPathsMappings","methods","show","update","allActions","actions","methodsWithPath","alias","extractRouteArguments","routeHandler","modules","modulesOfType","urlPrefix","namespace","namespaceSub","typeOrCollectionName","modelOrFactoryExists","isPlural","isUncountable","isPluralForModel","modelExists","dbCollectionExists","allExtensions","isSelfReferentialBelongsTo","isPolymorphic","factoryAssociation","serializeIds","normalizeIds","keyForModel","keyForAttribute","keyForRelationship","keyForEmbeddedRelationship","keyForRelationshipIds","keyForForeignKey","keyForPolymorphicForeignKeyId","keyForPolymorphicForeignKeyType","normalize","belongsToAssociations","hasManyAssociations","belongsToKeys","hasManyKeys","jsonApiPayload","associationModel","getCoalescedIds","r","Math","v","hasMany","belongsTo"],"mappings":"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","sourcesContent":["// jscs:disable disallowVar, requireArrayDestructuring\nimport uniq from \"lodash.uniq\";\nimport flatten from \"lodash.flatten\";\n/**\n  @hide\n*/\nexport default function (edges) {\n  let nodes = uniq(flatten(edges));\n  let cursor = nodes.length;\n  let sorted = new Array(cursor);\n  let visited = {};\n  let i = cursor;\n\n  let visit = function (node, i, predecessors) {\n    if (predecessors.indexOf(node) >= 0) {\n      throw new Error(\n        `Cyclic dependency in properties ${JSON.stringify(predecessors)}`\n      );\n    }\n\n    if (visited[i]) {\n      return;\n    } else {\n      visited[i] = true;\n    }\n\n    let outgoing = edges.filter(function (edge) {\n      return edge && edge[0] === node;\n    });\n    i = outgoing.length;\n    if (i) {\n      let preds = predecessors.concat(node);\n      do {\n        let pair = outgoing[--i];\n        let child = pair[1];\n        if (child) {\n          visit(child, nodes.indexOf(child), preds);\n        }\n      } while (i);\n    }\n\n    sorted[--cursor] = node;\n  };\n\n  while (i--) {\n    if (!visited[i]) {\n      visit(nodes[i], i, []);\n    }\n  }\n\n  return sorted.reverse();\n}\n","import isPlainObject from \"lodash.isplainobject\";\nimport isFunction from \"lodash.isfunction\";\nimport mapValues from \"lodash.mapvalues\";\nimport referenceSort from \"./utils/reference-sort\";\n\nlet Factory = function () {\n  this.build = function (sequence) {\n    let object = {};\n    let topLevelAttrs = Object.assign({}, this.attrs);\n    delete topLevelAttrs.afterCreate;\n    Object.keys(topLevelAttrs).forEach((attr) => {\n      if (Factory.isTrait.call(this, attr)) {\n        delete topLevelAttrs[attr];\n      }\n    });\n    let keys = sortAttrs(topLevelAttrs, sequence);\n\n    keys.forEach(function (key) {\n      let buildAttrs, buildSingleValue;\n\n      buildAttrs = function (attrs) {\n        return mapValues(attrs, buildSingleValue);\n      };\n\n      buildSingleValue = (value) => {\n        if (Array.isArray(value)) {\n          return value.map(buildSingleValue);\n        } else if (isPlainObject(value)) {\n          return buildAttrs(value);\n        } else if (isFunction(value)) {\n          return value.call(topLevelAttrs, sequence);\n        } else {\n          return value;\n        }\n      };\n\n      let value = topLevelAttrs[key];\n      if (isFunction(value)) {\n        object[key] = value.call(object, sequence);\n      } else {\n        object[key] = buildSingleValue(value);\n      }\n    });\n\n    return object;\n  };\n};\n\nFactory.extend = function (attrs) {\n  // Merge the new attributes with existing ones. If conflict, new ones win.\n  let newAttrs = Object.assign({}, this.attrs, attrs);\n\n  let Subclass = function () {\n    this.attrs = newAttrs;\n    Factory.call(this);\n  };\n\n  // Copy extend\n  Subclass.extend = Factory.extend;\n  Subclass.extractAfterCreateCallbacks = Factory.extractAfterCreateCallbacks;\n  Subclass.isTrait = Factory.isTrait;\n\n  // Store a reference on the class for future subclasses\n  Subclass.attrs = newAttrs;\n\n  return Subclass;\n};\n\nFactory.extractAfterCreateCallbacks = function ({ traits } = {}) {\n  let afterCreateCallbacks = [];\n  let attrs = this.attrs || {};\n  let traitCandidates;\n\n  if (attrs.afterCreate) {\n    afterCreateCallbacks.push(attrs.afterCreate);\n  }\n\n  if (Array.isArray(traits)) {\n    traitCandidates = traits;\n  } else {\n    traitCandidates = Object.keys(attrs);\n  }\n\n  traitCandidates\n    .filter((attr) => {\n      return this.isTrait(attr) && attrs[attr].extension.afterCreate;\n    })\n    .forEach((attr) => {\n      afterCreateCallbacks.push(attrs[attr].extension.afterCreate);\n    });\n\n  return afterCreateCallbacks;\n};\n\nFactory.isTrait = function (attrName) {\n  let { attrs } = this;\n  return isPlainObject(attrs[attrName]) && attrs[attrName].__isTrait__ === true;\n};\n\nfunction sortAttrs(attrs, sequence) {\n  let Temp = function () {};\n  let obj = new Temp();\n  let refs = [];\n  let property;\n\n  Object.keys(attrs).forEach(function (key) {\n    let value;\n    Object.defineProperty(obj.constructor.prototype, key, {\n      get() {\n        refs.push([property, key]);\n        return value;\n      },\n      set(newValue) {\n        value = newValue;\n      },\n      enumerable: false,\n      configurable: true,\n    });\n  });\n\n  Object.keys(attrs).forEach(function (key) {\n    let value = attrs[key];\n    if (typeof value !== \"function\") {\n      obj[key] = value;\n    }\n  });\n\n  Object.keys(attrs).forEach(function (key) {\n    let value = attrs[key];\n    property = key;\n\n    if (typeof value === \"function\") {\n      obj[key] = value.call(obj, sequence);\n    }\n\n    refs.push([key]);\n  });\n\n  return referenceSort(refs);\n}\n\n/**\n * @hide\n */\nexport default Factory;\n","function isNumber(n) {\n  return (+n).toString() === n.toString();\n}\n\n/**\n  By default Mirage uses autoincrementing numbers starting with `1` as IDs for records. This can be customized by implementing one or more IdentityManagers for your application.\n\n  An IdentityManager is a class that's responsible for generating unique identifiers. You can define a custom identity manager for your entire application, as well as on a per-model basis.\n\n  A custom IdentityManager must implement these methods:\n\n  - `fetch`, which must return an identifier not yet used\n  - `set`, which is called with an `id` of a record being insert into Mirage's database\n  - `reset`, which should reset database to initial state\n\n  Check out the advanced guide on Mocking UUIDs to see a complete example of a custom IdentityManager.\n\n  @class IdentityManager\n  @constructor\n  @public\n*/\nclass IdentityManager {\n  constructor() {\n    this._nextId = 1;\n    this._ids = {};\n  }\n\n  /**\n    @method get\n    @hide\n    @private\n  */\n  get() {\n    return this._nextId;\n  }\n\n  /**\n    Registers `uniqueIdentifier` as used.\n\n    This method should throw is `uniqueIdentifier` has already been taken.\n\n    @method set\n    @param {String|Number} uniqueIdentifier\n    @public\n  */\n  set(uniqueIdentifier) {\n    if (this._ids[uniqueIdentifier]) {\n      throw new Error(\n        `Attempting to use the ID ${uniqueIdentifier}, but it's already been used`\n      );\n    }\n\n    if (isNumber(uniqueIdentifier) && +uniqueIdentifier >= this._nextId) {\n      this._nextId = +uniqueIdentifier + 1;\n    }\n\n    this._ids[uniqueIdentifier] = true;\n  }\n\n  /**\n    @method inc\n    @hide\n    @private\n  */\n  inc() {\n    let nextValue = this.get() + 1;\n\n    this._nextId = nextValue;\n\n    return nextValue;\n  }\n\n  /**\n    Returns the next unique identifier.\n\n    @method fetch\n    @return {String} Unique identifier\n    @public\n  */\n  fetch() {\n    let id = this.get();\n\n    this._ids[id] = true;\n\n    this.inc();\n\n    return id.toString();\n  }\n\n  /**\n    Resets the identity manager, marking all unique identifiers as available.\n\n    @method reset\n    @public\n  */\n  reset() {\n    this._nextId = 1;\n    this._ids = {};\n  }\n}\n\nexport default IdentityManager;\n","/**\n  @hide\n*/\nlet association = function (...traitsAndOverrides) {\n  let __isAssociation__ = true;\n\n  return {\n    __isAssociation__,\n    traitsAndOverrides,\n  };\n};\n\nexport default association;\n","let trait = function (extension) {\n  let __isTrait__ = true;\n  return {\n    extension,\n    __isTrait__,\n  };\n};\n\n/**\n  @hide\n*/\nexport default trait;\n","const warn = console.warn; // eslint-disable-line no-console\n\n/**\n  You can use this class when you want more control over your route handlers response.\n\n  Pass the `code`, `headers` and `data` into the constructor and return an instance from any route handler.\n\n  ```js\n  import { Response } from 'miragejs';\n\n  this.get('/users', () => {\n    return new Response(400, { some: 'header' }, { errors: [ 'name cannot be blank'] });\n  });\n  ```\n*/\nexport default class Response {\n  constructor(code, headers = {}, data) {\n    this.code = code;\n    this.headers = headers;\n\n    // Default data for \"undefined 204\" responses to empty string (no content)\n    if (code === 204) {\n      if (data !== undefined && data !== \"\") {\n        warn(\n          `Mirage: One of your route handlers is returning a custom\n          204 Response that has data, but this is a violation of the HTTP spec\n          and could lead to unexpected behavior. 204 responses should have no\n          content (an empty string) as their body.`\n        );\n      } else {\n        this.data = \"\";\n      }\n\n      // Default data for \"empty untyped\" responses to empty JSON object\n    } else if (\n      (data === undefined || data === \"\") &&\n      !Object.prototype.hasOwnProperty.call(this.headers, \"Content-Type\")\n    ) {\n      this.data = {};\n    } else {\n      this.data = data;\n    }\n\n    // Default \"untyped\" responses to application/json\n    if (\n      code !== 204 &&\n      !Object.prototype.hasOwnProperty.call(this.headers, \"Content-Type\")\n    ) {\n      this.headers[\"Content-Type\"] = \"application/json\";\n    }\n  }\n\n  toRackResponse() {\n    return [this.code, this.headers, this.data];\n  }\n}\n","import {\n  underscore as _underscore,\n  capitalize as _capitalize,\n  camelize as _camelize,\n  dasherize as _dasherize,\n} from \"inflected\";\nimport lowerFirst from \"lodash.lowerfirst\";\n\nconst camelizeCache = {};\nconst dasherizeCache = {};\nconst underscoreCache = {};\nconst capitalizeCache = {};\n\n/**\n * @param {String} word\n * @hide\n */\nexport function camelize(word) {\n  if (typeof camelizeCache[word] !== \"string\") {\n    let camelizedWord = _camelize(underscore(word), false);\n\n    /*\n     The `ember-inflector` package's version of camelize lower-cases the first\n     word after a slash, e.g.\n\n         camelize('my-things/nice-watch'); // 'myThings/niceWatch'\n\n     The `inflected` package doesn't, so we make that change here to not break\n     existing functionality. (This affects the name of the schema collections.)\n    */\n    const camelized = camelizedWord.split(\"/\").map(lowerFirst).join(\"/\");\n\n    camelizeCache[word] = camelized;\n  }\n\n  return camelizeCache[word];\n}\n\n/**\n * @param {String} word\n * @hide\n */\nexport function dasherize(word) {\n  if (typeof dasherizeCache[word] !== \"string\") {\n    const dasherized = _dasherize(underscore(word));\n\n    dasherizeCache[word] = dasherized;\n  }\n\n  return dasherizeCache[word];\n}\n\nexport function underscore(word) {\n  if (typeof underscoreCache[word] !== \"string\") {\n    const underscored = _underscore(word);\n\n    underscoreCache[word] = underscored;\n  }\n\n  return underscoreCache[word];\n}\n\nexport function capitalize(word) {\n  if (typeof capitalizeCache[word] !== \"string\") {\n    const capitalized = _capitalize(word);\n\n    capitalizeCache[word] = capitalized;\n  }\n\n  return capitalizeCache[word];\n}\n","import isPlainObject from \"lodash.isplainobject\";\n\n/**\n  @hide\n*/\nexport default function (object) {\n  return isPlainObject(object) && object.__isAssociation__ === true;\n}\n","/* eslint no-console: 0 */\nlet errorProps = [\n  \"description\",\n  \"fileName\",\n  \"lineNumber\",\n  \"message\",\n  \"name\",\n  \"number\",\n  \"stack\",\n];\n/**\n  @hide\n*/\nexport default function assert(bool, text) {\n  if (typeof bool === \"string\" && !text) {\n    // console.error(`Mirage: ${bool}`);\n    throw new MirageError(bool);\n  }\n\n  if (!bool) {\n    // console.error(`Mirage: ${text}`);\n    throw new MirageError(text.replace(/^ +/gm, \"\") || \"Assertion failed\");\n  }\n}\n\n/**\n  @public\n  @hide\n  Copied from ember-metal/error\n*/\nexport function MirageError(message, stack) {\n  let tmp = Error(message);\n\n  if (stack) {\n    tmp.stack = stack;\n  }\n\n  for (let idx = 0; idx < errorProps.length; idx++) {\n    let prop = errorProps[idx];\n\n    if ([\"description\", \"message\", \"stack\"].indexOf(prop) > -1) {\n      this[prop] = `Mirage: ${tmp[prop]}`;\n    } else {\n      this[prop] = tmp[prop];\n    }\n  }\n}\n\nMirageError.prototype = Object.create(Error.prototype);\n","import { dasherize } from \"../../utils/inflector\";\n\n/**\n  Associations represent relationships between your Models.\n\n  The `hasMany` and `belongsTo` helpers are how you actually define relationships:\n  \n  ```js\n  import { Server, Model, hasMany, belongsTo }\n\n  new Server({\n    models: {\n      user: Model.extend({\n        comments: hasMany()\n      }),\n      comments: Model.extend({\n        user: belongsTo()\n      })\n    }\n  })\n  ```\n\n  View [the Relationships](https://miragejs.com/docs/main-concepts/relationships/) guide to learn more about setting up relationships.\n\n  Each usage of the helper registers an Association (either a `HasMany` association or `BelongsTo` association) with your server's `Schema`. You can access these associations using either the `schema.associationsFor()` method, or the `associations` property on individual model instances.\n\n  You can then introspect the associations to do things like dynamically build up your JSON response in your serializers.\n\n  @class Association\n  @constructor\n  @public\n*/\nexport default class Association {\n  constructor(modelName, opts) {\n    /**\n      The modelName of the associated model.\n\n      For example, given this configuration\n      \n      ```js\n      new Server({\n        models: {\n          user: Model,\n          comment: Model.extend({\n            user: belongsTo()\n          })\n        }\n      })\n      ```\n\n      the association's `modelName` would be `user`.\n\n      Note that an association's `modelName` and the `name` can be different. This is because Mirage supports multiple relationships of the same type:\n\n      ```js\n      new Server({\n        models: {\n          user: Model,\n          comment: Model.extend({\n            author: belongsTo('user'),\n            reviewer: belongsTo('user')\n          })\n        }\n      })\n      ```\n\n      For both these relationships, the `modelName` is `user`, but the first association has a `name` of `author` while the second has a `name` of `reviewer`.\n\n      @property\n      @type {String}\n      @public\n    */\n    this.modelName = undefined; // hack to add ESDOC info. Any better way?\n\n    if (typeof modelName === \"object\") {\n      // Received opts only\n      this.modelName = undefined;\n      this.opts = modelName;\n    } else {\n      // The modelName of the association. (Might not be passed in - set later\n      // by schema).\n      this.modelName = modelName ? dasherize(modelName) : \"\";\n      this.opts = opts || {};\n    }\n\n    /**\n      The name of the association, which comes from the property name that was used to define it.\n\n      For example, given this server definition\n      \n      ```js\n      new Server({\n        models: {\n          user: Model,\n          comment: Model.extend({\n            author: belongsTo('user')\n          })\n        }\n      })\n      ```\n\n      the association's `name` would be `author`.\n      \n      The name is used by Mirage to define foreign keys on the model (`comment.authorId` in this case), among other things.\n\n      @property\n      @type {String}\n      @public\n    */\n    this.name = \"\";\n\n    // The modelName that owns this association\n    this.ownerModelName = \"\";\n  }\n\n  /**\n     A setter for schema, since we don't have a reference at constuction time.\n\n     @method setSchema\n     @public\n     @hide\n  */\n  setSchema(schema) {\n    this.schema = schema;\n  }\n\n  /**\n     Returns a Boolean that's true if the association is self-referential, i.e. if a model has an association with itself.\n\n     For example, given\n\n     ```js\n     new Server({\n       models: {\n         user: Model.extend({\n           friends: hasMany('user')\n         })\n       }\n     })\n     ```\n\n     then\n\n     ```js\n     server.schema.associationsFor('user').friends.isReflexive // true\n     ```\n\n     @method isReflexive\n     @return {Boolean}\n     @public\n  */\n  isReflexive() {\n    let isExplicitReflexive = !!(\n      this.modelName === this.ownerModelName && this.opts.inverse\n    );\n    let isImplicitReflexive = !!(\n      this.opts.inverse === undefined && this.ownerModelName === this.modelName\n    );\n\n    return isExplicitReflexive || isImplicitReflexive;\n  }\n\n  /**\n     Returns a Boolean that's true if the association is polymorphic:\n\n     For example, given\n\n     ```js\n     new Server({\n       models: {\n         comment: Model.extend({\n           commentable: belongsTo({ polymorphic: true })\n         })\n       }\n     })\n     ```\n\n     then\n\n     ```js\n     server.schema.associationsFor('comment').commentable.isPolymorphic // true\n     ```\n\n     Check out [the guides on polymorphic associations](https://miragejs.com/docs/main-concepts/relationships/#polymorphic) to learn more.\n\n     @accessor isPolymorphic\n     @type {Boolean}\n     @public\n  */\n  get isPolymorphic() {\n    return this.opts.polymorphic;\n  }\n\n  /**\n    Returns either the string `\"hasMany\"` or `\"belongsTo\"`, based on the association type.\n  \n    @accessor\n    @type {String}\n    @public\n   */\n  get type() {\n    throw new Error(\n      \"Subclasses of Association must implement a getter for type\"\n    );\n  }\n\n  /**\n    Returns the name used for the association's foreign key.\n\n    ```js\n    let server = new Server({\n      models: {\n        user: Model,\n        post: Model.extend({\n          fineAuthor: belongsTo(\"user\"),\n          comments: hasMany()\n        }),\n        comment: Model\n      }\n    });\n\n    let associations = server.associationsFor('post')\n\n    associations.fineAuthor.foreignKey // fineAuthorId\n    associations.comments.foreignKey // commentIds\n    ```\n  \n    @accessor\n    @type {String}\n    @public\n   */\n  get foreignKey() {\n    return this.getForeignKey();\n  }\n\n  /**\n    @hide\n  */\n  get identifier() {\n    throw new Error(\n      \"Subclasses of Association must implement a getter for identifier\"\n    );\n  }\n}\n","import Association from \"./association\";\nimport { capitalize, camelize } from \"../../utils/inflector\";\nimport assert from \"../../assert\";\n\nconst identifierCache = {};\n\n/**\n * The belongsTo association adds a fk to the owner of the association\n *\n * @class BelongsTo\n * @extends Association\n * @constructor\n * @public\n * @hide\n */\nexport default class BelongsTo extends Association {\n  get identifier() {\n    if (typeof identifierCache[this.name] !== \"string\") {\n      const identifier = `${camelize(this.name)}Id`;\n\n      identifierCache[this.name] = identifier;\n    }\n\n    return identifierCache[this.name];\n  }\n\n  get type() {\n    return \"belongsTo\";\n  }\n\n  /**\n   * @method getForeignKeyArray\n   * @return {Array} Array of camelized name of the model owning the association\n   * and foreign key for the association\n   * @public\n   */\n  getForeignKeyArray() {\n    return [camelize(this.ownerModelName), this.getForeignKey()];\n  }\n\n  /**\n   * @method getForeignKey\n   * @return {String} Foreign key for the association\n   * @public\n   */\n  getForeignKey() {\n    // we reuse identifierCache because it's the same logic as get identifier\n    if (typeof identifierCache[this.name] !== \"string\") {\n      const foreignKey = `${camelize(this.name)}Id`;\n\n      identifierCache[this.name] = foreignKey;\n    }\n\n    return identifierCache[this.name];\n  }\n\n  /**\n   * Registers belongs-to association defined by given key on given model,\n   * defines getters / setters for associated parent and associated parent's id,\n   * adds methods for creating unsaved parent record and creating a saved one\n   *\n   * @method addMethodsToModelClass\n   * @param {Function} ModelClass\n   * @param {String} key the named key for the association\n   * @public\n   */\n  addMethodsToModelClass(ModelClass, key) {\n    let modelPrototype = ModelClass.prototype;\n    let association = this;\n    let foreignKey = this.getForeignKey();\n    let associationHash = { [key]: this };\n\n    modelPrototype.belongsToAssociations = Object.assign(\n      modelPrototype.belongsToAssociations,\n      associationHash\n    );\n\n    // update belongsToAssociationFks\n    Object.keys(modelPrototype.belongsToAssociations).forEach((key) => {\n      const value = modelPrototype.belongsToAssociations[key];\n      modelPrototype.belongsToAssociationFks[value.getForeignKey()] = value;\n    });\n\n    // Add to target's dependent associations array\n    this.schema.addDependentAssociation(this, this.modelName);\n\n    // TODO: look how this is used. Are these necessary, seems like they could be gotten from the above?\n    // Or we could use a single data structure to store this information?\n    modelPrototype.associationKeys.add(key);\n    modelPrototype.associationIdKeys.add(foreignKey);\n\n    Object.defineProperty(modelPrototype, foreignKey, {\n      /*\n        object.parentId\n          - returns the associated parent's id\n      */\n      get() {\n        this._tempAssociations = this._tempAssociations || {};\n        let tempParent = this._tempAssociations[key];\n        let id;\n\n        if (tempParent === null) {\n          id = null;\n        } else {\n          if (association.isPolymorphic) {\n            if (tempParent) {\n              id = { id: tempParent.id, type: tempParent.modelName };\n            } else {\n              id = this.attrs[foreignKey];\n            }\n          } else {\n            if (tempParent) {\n              id = tempParent.id;\n            } else {\n              id = this.attrs[foreignKey];\n            }\n          }\n        }\n\n        return id;\n      },\n\n      /*\n        object.parentId = (parentId)\n          - sets the associated parent via id\n      */\n      set(id) {\n        let tempParent;\n\n        if (id === null) {\n          tempParent = null;\n        } else if (id !== undefined) {\n          if (association.isPolymorphic) {\n            assert(\n              typeof id === \"object\",\n              `You're setting an ID on the polymorphic association '${association.name}' but you didn't pass in an object. Polymorphic IDs need to be in the form { type, id }.`\n            );\n            tempParent = association.schema[\n              association.schema.toCollectionName(id.type)\n            ].find(id.id);\n          } else {\n            tempParent = association.schema[\n              association.schema.toCollectionName(association.modelName)\n            ].find(id);\n            assert(\n              tempParent,\n              `Couldn't find ${association.modelName} with id = ${id}`\n            );\n          }\n        }\n\n        this[key] = tempParent;\n      },\n    });\n\n    Object.defineProperty(modelPrototype, key, {\n      /*\n        object.parent\n          - returns the associated parent\n      */\n      get() {\n        this._tempAssociations = this._tempAssociations || {};\n\n        let tempParent = this._tempAssociations[key];\n        let foreignKeyId = this[foreignKey];\n        let model = null;\n\n        if (tempParent) {\n          model = tempParent;\n        } else if (foreignKeyId !== null) {\n          if (association.isPolymorphic) {\n            model = association.schema[\n              association.schema.toCollectionName(foreignKeyId.type)\n            ].find(foreignKeyId.id);\n          } else {\n            model = association.schema[\n              association.schema.toCollectionName(association.modelName)\n            ].find(foreignKeyId);\n          }\n        }\n\n        return model;\n      },\n\n      /*\n        object.parent = (parentModel)\n          - sets the associated parent via model\n\n        I want to jot some notes about hasInverseFor. There used to be an\n        association.inverse() check, but adding polymorphic associations\n        complicated this. `comment.commentable`, you can't easily check for an\n        inverse since `comments: hasMany()` could be on any model.\n\n        Instead of making it very complex and looking for an inverse on the\n        association in isoaltion, it was much simpler to ask the model being\n        passed in if it had an inverse for the setting model and with its\n        association.\n      */\n      set(model) {\n        this._tempAssociations = this._tempAssociations || {};\n        this._tempAssociations[key] = model;\n\n        if (model && model.hasInverseFor(association)) {\n          let inverse = model.inverseFor(association);\n\n          model.associate(this, inverse);\n        }\n      },\n    });\n\n    /*\n      object.newParent\n        - creates a new unsaved associated parent\n\n      TODO: document polymorphic\n    */\n    modelPrototype[`new${capitalize(key)}`] = function (...args) {\n      let modelName, attrs;\n\n      if (association.isPolymorphic) {\n        modelName = args[0];\n        attrs = args[1];\n      } else {\n        modelName = association.modelName;\n        attrs = args[0];\n      }\n\n      let parent = association.schema[\n        association.schema.toCollectionName(modelName)\n      ].new(attrs);\n\n      this[key] = parent;\n\n      return parent;\n    };\n\n    /*\n      object.createParent\n        - creates a new saved associated parent, and immediately persists both models\n\n      TODO: document polymorphic\n    */\n    modelPrototype[`create${capitalize(key)}`] = function (...args) {\n      let modelName, attrs;\n      if (association.isPolymorphic) {\n        modelName = args[0];\n        attrs = args[1];\n      } else {\n        modelName = association.modelName;\n        attrs = args[0];\n      }\n\n      let parent = association.schema[\n        association.schema.toCollectionName(modelName)\n      ].create(attrs);\n\n      this[key] = parent;\n      this.save();\n\n      return parent.reload();\n    };\n  }\n\n  /**\n   *\n   *\n   * @public\n   */\n  disassociateAllDependentsFromTarget(model) {\n    let owner = this.ownerModelName;\n    let fk;\n\n    if (this.isPolymorphic) {\n      fk = { type: model.modelName, id: model.id };\n    } else {\n      fk = model.id;\n    }\n\n    let dependents = this.schema[this.schema.toCollectionName(owner)].where(\n      (potentialOwner) => {\n        let id = potentialOwner[this.getForeignKey()];\n\n        if (!id) {\n          return false;\n        }\n\n        if (typeof id === \"object\") {\n          return id.type === fk.type && id.id === fk.id;\n        } else {\n          return id === fk;\n        }\n      }\n    );\n\n    dependents.models.forEach((dependent) => {\n      dependent.disassociate(model, this);\n      dependent.save();\n    });\n  }\n}\n","import isEqual from \"lodash.isequal\";\nimport map from \"lodash.map\";\n\nfunction duplicate(data) {\n  if (Array.isArray(data)) {\n    return data.map(duplicate);\n  } else {\n    return Object.assign({}, data);\n  }\n}\n\n/**\n  Mirage's `Db` has many `DbCollections`, which are equivalent to tables from traditional databases. They store specific types of data, for example `users` and `posts`.\n\n  `DbCollections` have names, like `users`, which you use to access the collection from the `Db` object.\n\n  Suppose you had a `user` model defined, and the following data had been inserted into your database (either through factories or fixtures):\n\n  ```js\n  export default [\n    { id: 1, name: 'Zelda' },\n    { id: 2, name: 'Link' }\n  ];\n  ```\n\n  Then `db.contacts` would return this array.\n\n  @class DbCollection\n  @constructor\n  @public\n */\nclass DbCollection {\n  constructor(name, initialData, IdentityManager) {\n    this.name = name;\n    this._records = [];\n    this.identityManager = new IdentityManager();\n\n    if (initialData) {\n      this.insert(initialData);\n    }\n  }\n\n  /**\n   * Returns a copy of the data, to prevent inadvertent data manipulation.\n   * @method all\n   * @public\n   * @hide\n   */\n  all() {\n    return duplicate(this._records);\n  }\n\n  /**\n    Inserts `data` into the collection. `data` can be a single object\n    or an array of objects. Returns the inserted record.\n\n    ```js\n    // Insert a single record\n    let link = db.users.insert({ name: 'Link', age: 173 });\n\n    link;  // { id: 1, name: 'Link', age: 173 }\n\n    // Insert an array\n    let users = db.users.insert([\n      { name: 'Zelda', age: 142 },\n      { name: 'Epona', age: 58 },\n    ]);\n\n    users;  // [ { id: 2, name: 'Zelda', age: 142 }, { id: 3, name: 'Epona', age: 58 } ]\n    ```\n\n    @method insert\n    @param data\n    @public\n   */\n  insert(data) {\n    if (!Array.isArray(data)) {\n      return this._insertRecord(data);\n    } else {\n      return map(data, (attrs) => this._insertRecord(attrs));\n    }\n  }\n\n  /**\n    Returns a single record from the `collection` if `ids` is a single\n    id, or an array of records if `ids` is an array of ids. Note\n    each id can be an int or a string, but integer ids as strings\n    (e.g. the string “1”) will be treated as integers.\n\n    ```js\n    // Given users = [{id: 1, name: 'Link'}, {id: 2, name: 'Zelda'}]\n\n    db.users.find(1);      // {id: 1, name: 'Link'}\n    db.users.find([1, 2]); // [{id: 1, name: 'Link'}, {id: 2, name: 'Zelda'}]\n    ```\n\n    @method find\n    @param ids\n    @public\n   */\n  find(ids) {\n    if (Array.isArray(ids)) {\n      let records = this._findRecords(ids).filter(Boolean).map(duplicate); // Return a copy\n\n      return records;\n    } else {\n      let record = this._findRecord(ids);\n      if (!record) {\n        return null;\n      }\n\n      // Return a copy\n      return duplicate(record);\n    }\n  }\n\n  /**\n    Returns the first model from `collection` that matches the\n    key-value pairs in the `query` object. Note that a string\n    comparison is used. `query` is a POJO.\n\n    ```js\n    // Given users = [ { id: 1, name: 'Link' }, { id: 2, name: 'Zelda' } ]\n    db.users.findBy({ name: 'Link' }); // { id: 1, name: 'Link' }\n    ```\n\n    @method find\n    @param query\n    @public\n   */\n  findBy(query) {\n    let record = this._findRecordBy(query);\n    if (!record) {\n      return null;\n    }\n\n    // Return a copy\n    return duplicate(record);\n  }\n\n  /**\n    Returns an array of models from `collection` that match the\n    key-value pairs in the `query` object. Note that a string\n    comparison is used. `query` is a POJO.\n\n    ```js\n    // Given users = [ { id: 1, name: 'Link' }, { id: 2, name: 'Zelda' } ]\n\n    db.users.where({ name: 'Zelda' }); // [ { id: 2, name: 'Zelda' } ]\n    ```\n\n    @method where\n    @param query\n    @public\n   */\n  where(query) {\n    return this._findRecordsWhere(query).map(duplicate);\n  }\n\n  /**\n    Finds the first record matching the provided _query_ in\n    `collection`, or creates a new record using a merge of the\n    `query` and optional `attributesForCreate`.\n\n    Often times you may have a pattern like the following in your API stub:\n\n    ```js\n    // Given users = [\n    //   { id: 1, name: 'Link' },\n    //   { id: 2, name: 'Zelda' }\n    // ]\n\n    // Create Link if he doesn't yet exist\n    let records = db.users.where({ name: 'Link' });\n    let record;\n\n    if (records.length > 0) {\n      record = records[0];\n    } else {\n      record = db.users.insert({ name: 'Link' });\n    }\n    ```\n\n    You can now replace this with the following:\n\n    ```js\n    let record = db.users.firstOrCreate({ name: 'Link' });\n    ```\n\n    An extended example using *attributesForCreate*:\n\n    ```js\n    let record = db.users.firstOrCreate({ name: 'Link' }, { evil: false });\n    ```\n\n    @method firstOrCreate\n    @param query\n    @param attributesForCreate\n    @public\n   */\n  firstOrCreate(query, attributesForCreate = {}) {\n    let queryResult = this.where(query);\n    let [record] = queryResult;\n\n    if (record) {\n      return record;\n    } else {\n      let mergedAttributes = Object.assign(attributesForCreate, query);\n      let createdRecord = this.insert(mergedAttributes);\n\n      return createdRecord;\n    }\n  }\n\n  /**\n    Updates one or more records in the collection.\n\n    If *attrs* is the only arg present, updates all records in the collection according to the key-value pairs in *attrs*.\n\n    If *target* is present, restricts updates to those that match *target*. If *target* is a number or string, finds a single record whose id is *target* to update. If *target* is a POJO, queries *collection* for records that match the key-value pairs in *target*, and updates their *attrs*.\n\n    Returns the updated record or records.\n\n    ```js\n    // Given users = [\n    //   {id: 1, name: 'Link'},\n    //   {id: 2, name: 'Zelda'}\n    // ]\n\n    db.users.update({name: 'Ganon'}); // db.users = [{id: 1, name: 'Ganon'}, {id: 2, name: 'Ganon'}]\n    db.users.update(1, {name: 'Young Link'}); // db.users = [{id: 1, name: 'Young Link'}, {id: 2, name: 'Zelda'}]\n    db.users.update({name: 'Link'}, {name: 'Epona'}); // db.users = [{id: 1, name: 'Epona'}, {id: 2, name: 'Zelda'}]\n    ```\n\n    @method update\n    @param target\n    @param attrs\n    @public\n   */\n  update(target, attrs) {\n    let records;\n\n    if (typeof attrs === \"undefined\") {\n      attrs = target;\n      let changedRecords = [];\n\n      this._records.forEach((record) => {\n        let oldRecord = Object.assign({}, record);\n\n        this._updateRecord(record, attrs);\n\n        if (!isEqual(oldRecord, record)) {\n          changedRecords.push(record);\n        }\n      });\n\n      return changedRecords;\n    } else if (typeof target === \"number\" || typeof target === \"string\") {\n      let id = target;\n      let record = this._findRecord(id);\n\n      this._updateRecord(record, attrs);\n\n      return record;\n    } else if (Array.isArray(target)) {\n      let ids = target;\n      records = this._findRecords(ids);\n\n      records.forEach((record) => {\n        this._updateRecord(record, attrs);\n      });\n\n      return records;\n    } else if (typeof target === \"object\") {\n      let query = target;\n      records = this._findRecordsWhere(query);\n\n      records.forEach((record) => {\n        this._updateRecord(record, attrs);\n      });\n\n      return records;\n    }\n  }\n\n  /**\n    Removes one or more records in *collection*.\n\n    If *target* is undefined, removes all records. If *target* is a number or string, removes a single record using *target* as id. If *target* is a POJO, queries *collection* for records that match the key-value pairs in *target*, and removes them from the collection.\n\n    ```js\n    // Given users = [\n    //   {id: 1, name: 'Link'},\n    //   {id: 2, name: 'Zelda'}\n    // ]\n\n    db.users.remove(); // db.users = []\n    db.users.remove(1); // db.users = [{id: 2, name: 'Zelda'}]\n    db.users.remove({name: 'Zelda'}); // db.users = [{id: 1, name: 'Link'}]\n    ```\n\n    @method remove\n    @param target\n    @public\n   */\n  remove(target) {\n    let records;\n\n    if (typeof target === \"undefined\") {\n      this._records = [];\n      this.identityManager.reset();\n    } else if (typeof target === \"number\" || typeof target === \"string\") {\n      let record = this._findRecord(target);\n      let index = this._records.indexOf(record);\n      this._records.splice(index, 1);\n    } else if (Array.isArray(target)) {\n      records = this._findRecords(target);\n      records.forEach((record) => {\n        let index = this._records.indexOf(record);\n        this._records.splice(index, 1);\n      });\n    } else if (typeof target === \"object\") {\n      records = this._findRecordsWhere(target);\n      records.forEach((record) => {\n        let index = this._records.indexOf(record);\n        this._records.splice(index, 1);\n      });\n    }\n  }\n\n  /*\n    Private methods.\n\n    These return the actual db objects, whereas the public\n    API query methods return copies.\n  */\n\n  /**\n    @method _findRecord\n    @param id\n    @private\n    @hide\n   */\n  _findRecord(id) {\n    id = id.toString();\n\n    return this._records.find((obj) => obj.id === id);\n  }\n\n  /**\n    @method _findRecordBy\n    @param query\n    @private\n    @hide\n   */\n  _findRecordBy(query) {\n    return this._findRecordsWhere(query)[0];\n  }\n\n  /**\n    @method _findRecords\n    @param ids\n    @private\n    @hide\n   */\n  _findRecords(ids) {\n    return ids.map(this._findRecord, this);\n  }\n\n  /**\n    @method _findRecordsWhere\n    @param query\n    @private\n    @hide\n   */\n  _findRecordsWhere(query) {\n    let records = this._records;\n\n    function defaultQueryFunction(record) {\n      let keys = Object.keys(query);\n\n      return keys.every(function (key) {\n        return String(record[key]) === String(query[key]);\n      });\n    }\n\n    let queryFunction =\n      typeof query === \"object\" ? defaultQueryFunction : query;\n\n    return records.filter(queryFunction);\n  }\n\n  /**\n    @method _insertRecord\n    @param data\n    @private\n    @hide\n   */\n  _insertRecord(data) {\n    let attrs = duplicate(data);\n\n    if (attrs && (attrs.id === undefined || attrs.id === null)) {\n      attrs.id = this.identityManager.fetch(attrs);\n    } else {\n      attrs.id = attrs.id.toString();\n\n      this.identityManager.set(attrs.id);\n    }\n\n    this._records.push(attrs);\n\n    return duplicate(attrs);\n  }\n\n  /**\n    @method _updateRecord\n    @param record\n    @param attrs\n    @private\n    @hide\n   */\n  _updateRecord(record, attrs) {\n    let targetId =\n      attrs && Object.prototype.hasOwnProperty.call(attrs, \"id\")\n        ? attrs.id.toString()\n        : null;\n    let currentId = record.id;\n\n    if (targetId && currentId !== targetId) {\n      throw new Error(\"Updating the ID of a record is not permitted\");\n    }\n\n    for (let attr in attrs) {\n      if (attr === \"id\") {\n        continue;\n      }\n\n      record[attr] = attrs[attr];\n    }\n  }\n}\n\nexport default DbCollection;\n","import DbCollection from \"./db-collection\";\nimport IdentityManager from \"./identity-manager\";\nimport cloneDeep from \"lodash.clonedeep\";\n\n/**\n  Your Mirage server has a database which you can interact with in your route handlers. You’ll typically use models to interact with your database data, but you can always reach into the db directly in the event you want more control.\n\n  Access the db from your route handlers via `schema.db`.\n\n  You can access individual DbCollections by using `schema.db.name`:\n\n  ```js\n  schema.db.users  // would return, e.g., [ { id: 1, name: 'Yehuda' }, { id: 2, name: 'Tom '} ]\n  ```\n\n  @class Db\n  @constructor\n  @public\n */\nclass Db {\n  constructor(initialData, identityManagers) {\n    this._collections = [];\n\n    this.registerIdentityManagers(identityManagers);\n\n    if (initialData) {\n      this.loadData(initialData);\n    }\n  }\n\n  /**\n    Loads an object of data into Mirage's database.\n\n    The keys of the object correspond to the DbCollections, and the values are arrays of records.\n\n    ```js\n    server.db.loadData({\n      users: [\n        { name: 'Yehuda' },\n        { name: 'Tom' }\n      ]\n    });\n    ```\n\n    As with `db.collection.insert`, IDs will automatically be created for records that don't have them.\n\n    @method loadData\n    @param {Object} data - Data to load\n    @public\n   */\n  loadData(data) {\n    for (let key in data) {\n      this.createCollection(key, cloneDeep(data[key]));\n    }\n  }\n\n  /**\n   Logs out the contents of the Db.\n\n   ```js\n   server.db.dump() // { users: [ name: 'Yehuda', ...\n   ```\n\n   @method dump\n   @public\n   */\n  dump() {\n    return this._collections.reduce((data, collection) => {\n      data[collection.name] = collection.all();\n\n      return data;\n    }, {});\n  }\n\n  /**\n    Add an empty collection named _name_ to your database. Typically you won’t need to do this yourself, since collections are automatically created for any models you have defined.\n\n    @method createCollection\n    @param name\n    @param initialData (optional)\n    @public\n   */\n  createCollection(name, initialData) {\n    if (!this[name]) {\n      let IdentityManager = this.identityManagerFor(name);\n      let newCollection = new DbCollection(name, initialData, IdentityManager);\n\n      // Public API has a convenient array interface. It comes at the cost of\n      // returning a copy of all records to avoid accidental mutations.\n      Object.defineProperty(this, name, {\n        get() {\n          let recordsCopy = newCollection.all();\n\n          [\n            \"insert\",\n            \"find\",\n            \"findBy\",\n            \"where\",\n            \"update\",\n            \"remove\",\n            \"firstOrCreate\",\n          ].forEach(function (method) {\n            recordsCopy[method] = function () {\n              return newCollection[method](...arguments);\n            };\n          });\n\n          return recordsCopy;\n        },\n      });\n\n      // Private API does not have the array interface. This means internally, only\n      // db-collection methods can be used. This is so records aren't copied redundantly\n      // internally, which leads to accidental O(n^2) operations (e.g., createList).\n      Object.defineProperty(this, `_${name}`, {\n        get() {\n          let recordsCopy = [];\n\n          [\n            \"insert\",\n            \"find\",\n            \"findBy\",\n            \"where\",\n            \"update\",\n            \"remove\",\n            \"firstOrCreate\",\n          ].forEach(function (method) {\n            recordsCopy[method] = function () {\n              return newCollection[method](...arguments);\n            };\n          });\n\n          return recordsCopy;\n        },\n      });\n\n      this._collections.push(newCollection);\n    } else if (initialData) {\n      this[name].insert(initialData);\n    }\n\n    return this;\n  }\n\n  /**\n    @method createCollections\n    @param ...collections\n    @public\n    @hide\n   */\n  createCollections(...collections) {\n    collections.forEach((c) => this.createCollection(c));\n  }\n\n  /**\n    Removes all data from Mirage's database.\n\n    @method emptyData\n    @public\n   */\n  emptyData() {\n    this._collections.forEach((c) => c.remove());\n  }\n\n  /**\n    @method identityManagerFor\n    @param name\n    @public\n    @hide\n   */\n  identityManagerFor(name) {\n    return (\n      this._identityManagers[this._container.inflector.singularize(name)] ||\n      this._identityManagers.application ||\n      IdentityManager\n    );\n  }\n\n  /**\n    @method registerIdentityManagers\n    @public\n    @hide\n   */\n  registerIdentityManagers(identityManagers) {\n    this._identityManagers = identityManagers || {};\n  }\n}\n\nexport default Db;\n","import assert from \"../assert\";\nimport invokeMap from \"lodash.invokemap\";\n\n/**\n  Collections represent arrays of models. They are returned by a hasMany association, or by one of the ModelClass query methods:\n\n  ```js\n  let posts = user.blogPosts;\n  let posts = schema.blogPosts.all();\n  let posts = schema.blogPosts.find([1, 2, 4]);\n  let posts = schema.blogPosts.where({ published: true });\n  ```\n\n  Note that there is also a `PolymorphicCollection` class that is identical to `Collection`, except it can contain a heterogeneous array of models. Thus, it has no `modelName` property. This lets serializers and other parts of the system interact with it differently.\n\n  @class Collection\n  @constructor\n  @public\n*/\nexport default class Collection {\n  constructor(modelName, models = []) {\n    assert(\n      modelName && typeof modelName === \"string\",\n      \"You must pass a `modelName` into a Collection\"\n    );\n\n    /**\n      The dasherized model name this Collection represents.\n\n      ```js\n      let posts = user.blogPosts;\n\n      posts.modelName; // \"blog-post\"\n      ```\n\n      The model name is separate from the actual models, since Collections can be empty.\n\n      @property modelName\n      @type {String}\n      @public\n    */\n    this.modelName = modelName;\n\n    /**\n      The underlying plain JavaScript array of Models in this Collection.\n\n      ```js\n      posts.models // [ post:1, post:2, ... ]\n      ```\n\n      While Collections have many array-ish methods like `filter` and `sort`, it\n      can be useful to work with the plain array if you want to work with methods\n      like `map`, or use the `[]` accessor.\n\n      For example, in testing you might want to assert against a model from the\n      collection:\n\n      ```js\n      let newPost = user.posts.models[0].title;\n\n      assert.equal(newPost, \"My first post\");\n      ```\n\n      @property models\n      @type {Array}\n      @public\n    */\n    this.models = models;\n  }\n\n  /**\n    The number of models in the collection.\n\n    ```js\n    user.posts.length; // 2\n    ```\n\n    @property length\n    @type {Integer}\n    @public\n  */\n  get length() {\n    return this.models.length;\n  }\n\n  /**\n     Updates each model in the collection, and immediately persists all changes to the db.\n\n     ```js\n     let posts = user.blogPosts;\n\n     posts.update('published', true); // the db was updated for all posts\n     ```\n\n     @method update\n     @param key\n     @param val\n     @return this\n     @public\n   */\n  update(...args) {\n    invokeMap(this.models, \"update\", ...args);\n\n    return this;\n  }\n\n  /**\n     Saves all models in the collection.\n\n     ```js\n     let posts = user.blogPosts;\n\n     posts.models[0].published = true;\n\n     posts.save(); // all posts saved to db\n     ```\n\n     @method save\n     @return this\n     @public\n   */\n  save() {\n    invokeMap(this.models, \"save\");\n\n    return this;\n  }\n\n  /**\n    Reloads each model in the collection.\n\n    ```js\n    let posts = author.blogPosts;\n\n    // ...\n\n    posts.reload(); // reloads data for each post from the db\n    ```\n\n    @method reload\n    @return this\n    @public\n  */\n  reload() {\n    invokeMap(this.models, \"reload\");\n\n    return this;\n  }\n\n  /**\n    Destroys the db record for all models in the collection.\n\n    ```js\n    let posts = user.blogPosts;\n\n    posts.destroy(); // all posts removed from db\n    ```\n\n    @method destroy\n    @return this\n    @public\n  */\n  destroy() {\n    invokeMap(this.models, \"destroy\");\n\n    return this;\n  }\n\n  /**\n    Adds a model to this collection.\n\n    ```js\n    posts.length; // 1\n\n    posts.add(newPost);\n\n    posts.length; // 2\n    ```\n\n    @method add\n    @param {Model} model\n    @return this\n    @public\n  */\n  add(model) {\n    this.models.push(model);\n\n    return this;\n  }\n\n  /**\n    Removes a model from this collection.\n\n    ```js\n    posts.length; // 5\n\n    let firstPost = posts.models[0];\n    posts.remove(firstPost);\n    posts.save();\n\n    posts.length; // 4\n    ```\n\n    @method remove\n    @param {Model} model\n    @return this\n    @public\n  */\n  remove(model) {\n    let match = this.models.find((m) => m.toString() === model.toString());\n    if (match) {\n      let i = this.models.indexOf(match);\n      this.models.splice(i, 1);\n    }\n\n    return this;\n  }\n\n  /**\n    Checks if the Collection includes the given model.\n\n    ```js\n    posts.includes(newPost);\n    ```\n\n    Works by checking if the given model name and id exists in the Collection,\n    making it a bit more flexible than strict object equality.\n\n    ```js\n    let post = server.create('post');\n    let programming = server.create('tag', { text: 'Programming' });\n\n    visit(`/posts/${post.id}`);\n    click('.tag-selector');\n    click('.tag:contains(Programming)');\n\n    post.reload();\n    assert.ok(post.tags.includes(programming));\n    ```\n\n    @method includes\n    @return {Boolean}\n    @public\n  */\n  includes(model) {\n    return this.models.some((m) => m.toString() === model.toString());\n  }\n\n  /**\n    Returns a new Collection with its models filtered according to the provided [callback function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).\n\n    ```js\n    let publishedPosts = user.posts.filter(post => post.isPublished);\n    ```\n    @method filter\n    @param {Function} f\n    @return {Collection}\n    @public\n  */\n  filter(f) {\n    let filteredModels = this.models.filter(f);\n\n    return new Collection(this.modelName, filteredModels);\n  }\n\n  /**\n     Returns a new Collection with its models sorted according to the provided [compare function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#Parameters).\n\n     ```js\n     let postsByTitleAsc = user.posts.sort((a, b) => {\n       return b.title < a.title;\n     });\n     ```\n\n     @method sort\n     @param {Function} f\n     @return {Collection}\n     @public\n   */\n  sort(f) {\n    let sortedModels = this.models.concat().sort(f);\n\n    return new Collection(this.modelName, sortedModels);\n  }\n\n  /**\n    Returns a new Collection with a subset of its models selected from `begin` to `end`.\n\n    ```js\n    let firstThreePosts = user.posts.slice(0, 3);\n    ```\n\n    @method slice\n    @param {Integer} begin\n    @param {Integer} end\n    @return {Collection}\n    @public\n  */\n  slice(...args) {\n    let slicedModels = this.models.slice(...args);\n\n    return new Collection(this.modelName, slicedModels);\n  }\n\n  /**\n    Modifies the Collection by merging the models from another collection.\n\n    ```js\n    user.posts.mergeCollection(newPosts);\n    user.posts.save();\n    ```\n\n    @method mergeCollection\n    @param {Collection} collection\n    @return this\n    @public\n   */\n  mergeCollection(collection) {\n    this.models = this.models.concat(collection.models);\n\n    return this;\n  }\n\n  /**\n     Simple string representation of the collection and id.\n\n     ```js\n     user.posts.toString(); // collection:post(post:1,post:4)\n     ```\n\n     @method toString\n     @return {String}\n     @public\n   */\n  toString() {\n    return `collection:${this.modelName}(${this.models\n      .map((m) => m.id)\n      .join(\",\")})`;\n  }\n}\n","import invokeMap from \"lodash.invokemap\";\nimport isEqual from \"lodash.isequal\";\n\n/**\n * An array of models, returned from one of the schema query\n * methods (all, find, where). Knows how to update and destroy its models.\n *\n * Identical to Collection except it can contain a heterogeneous array of\n * models. Thus, it has no `modelName` property. This lets serializers and\n * other parts of the system interact with it differently.\n *\n * @class PolymorphicCollection\n * @constructor\n * @public\n * @hide\n */\nexport default class PolymorphicCollection {\n  constructor(models = []) {\n    this.models = models;\n  }\n\n  /**\n   * Number of models in the collection.\n   *\n   * @property length\n   * @type Number\n   * @public\n   */\n  get length() {\n    return this.models.length;\n  }\n\n  /**\n   * Updates each model in the collection (persisting immediately to the db).\n   * @method update\n   * @param key\n   * @param val\n   * @return this\n   * @public\n   */\n  update(...args) {\n    invokeMap(this.models, \"update\", ...args);\n\n    return this;\n  }\n\n  /**\n   * Destroys the db record for all models in the collection.\n   * @method destroy\n   * @return this\n   * @public\n   */\n  destroy() {\n    invokeMap(this.models, \"destroy\");\n\n    return this;\n  }\n\n  /**\n   * Saves all models in the collection.\n   * @method save\n   * @return this\n   * @public\n   */\n  save() {\n    invokeMap(this.models, \"save\");\n\n    return this;\n  }\n\n  /**\n   * Reloads each model in the collection.\n   * @method reload\n   * @return this\n   * @public\n   */\n  reload() {\n    invokeMap(this.models, \"reload\");\n\n    return this;\n  }\n\n  /**\n   * Adds a model to this collection\n   *\n   * @method add\n   * @return this\n   * @public\n   */\n  add(model) {\n    this.models.push(model);\n\n    return this;\n  }\n\n  /**\n   * Removes a model to this collection\n   *\n   * @method remove\n   * @return this\n   * @public\n   */\n  remove(model) {\n    let match = this.models.find((m) => isEqual(m.attrs, model.attrs));\n    if (match) {\n      let i = this.models.indexOf(match);\n      this.models.splice(i, 1);\n    }\n\n    return this;\n  }\n\n  /**\n   * Checks if the collection includes the model\n   *\n   * @method includes\n   * @return boolean\n   * @public\n   */\n  includes(model) {\n    return this.models.some((m) => isEqual(m.attrs, model.attrs));\n  }\n\n  /**\n   * @method filter\n   * @param f\n   * @return {Collection}\n   * @public\n   */\n  filter(f) {\n    let filteredModels = this.models.filter(f);\n\n    return new PolymorphicCollection(filteredModels);\n  }\n\n  /**\n   * @method sort\n   * @param f\n   * @return {Collection}\n   * @public\n   */\n  sort(f) {\n    let sortedModels = this.models.concat().sort(f);\n\n    return new PolymorphicCollection(sortedModels);\n  }\n\n  /**\n   * @method slice\n   * @param {Integer} begin\n   * @param {Integer} end\n   * @return {Collection}\n   * @public\n   */\n  slice(...args) {\n    let slicedModels = this.models.slice(...args);\n\n    return new PolymorphicCollection(slicedModels);\n  }\n\n  /**\n   * @method mergeCollection\n   * @param collection\n   * @return this\n   * @public\n   */\n  mergeCollection(collection) {\n    this.models = this.models.concat(collection.models);\n\n    return this;\n  }\n\n  /**\n   * Simple string representation of the collection and id.\n   * @method toString\n   * @return {String}\n   * @public\n   */\n  toString() {\n    return `collection:${this.modelName}(${this.models\n      .map((m) => m.id)\n      .join(\",\")})`;\n  }\n}\n","import Association from \"./association\";\nimport Collection from \"../collection\";\nimport PolymorphicCollection from \"../polymorphic-collection\";\nimport compact from \"lodash.compact\";\nimport { capitalize, camelize } from \"../../utils/inflector\";\nimport assert from \"@lib/assert\";\n\nconst identifierCache = {};\n\n/**\n * @class HasMany\n * @extends Association\n * @constructor\n * @public\n * @hide\n */\nexport default class HasMany extends Association {\n  get identifier() {\n    if (typeof identifierCache[this.name] !== \"string\") {\n      const identifier = `${camelize(\n        this._container.inflector.singularize(this.name)\n      )}Ids`;\n\n      identifierCache[this.name] = identifier;\n    }\n\n    return identifierCache[this.name];\n  }\n\n  get type() {\n    return \"hasMany\";\n  }\n\n  /**\n   * @method getForeignKeyArray\n   * @return {Array} Array of camelized model name of associated objects\n   * and foreign key for the object owning the association\n   * @public\n   */\n  getForeignKeyArray() {\n    return [camelize(this.ownerModelName), this.getForeignKey()];\n  }\n\n  /**\n   * @method getForeignKey\n   * @return {String} Foreign key for the object owning the association\n   * @public\n   */\n  getForeignKey() {\n    // we reuse identifierCache because it's the same logic as get identifier\n    if (typeof identifierCache[this.name] !== \"string\") {\n      const foreignKey = `${this._container.inflector.singularize(\n        camelize(this.name)\n      )}Ids`;\n\n      identifierCache[this.name] = foreignKey;\n    }\n\n    return identifierCache[this.name];\n  }\n\n  /**\n   * Registers has-many association defined by given key on given model,\n   * defines getters / setters for associated records and associated records' ids,\n   * adds methods for creating unsaved child records and creating saved ones\n   *\n   * @method addMethodsToModelClass\n   * @param {Function} ModelClass\n   * @param {String} key\n   * @public\n   */\n  addMethodsToModelClass(ModelClass, key) {\n    let modelPrototype = ModelClass.prototype;\n    let association = this;\n    let foreignKey = this.getForeignKey();\n    let associationHash = { [key]: this };\n\n    modelPrototype.hasManyAssociations = Object.assign(\n      modelPrototype.hasManyAssociations,\n      associationHash\n    );\n\n    // update hasManyAssociationFks\n    Object.keys(modelPrototype.hasManyAssociations).forEach((key) => {\n      const value = modelPrototype.hasManyAssociations[key];\n      modelPrototype.hasManyAssociationFks[value.getForeignKey()] = value;\n    });\n\n    // Add to target's dependent associations array\n    this.schema.addDependentAssociation(this, this.modelName);\n\n    // TODO: look how this is used. Are these necessary, seems like they could be gotten from the above?\n    // Or we could use a single data structure to store this information?\n    modelPrototype.associationKeys.add(key);\n    modelPrototype.associationIdKeys.add(foreignKey);\n\n    Object.defineProperty(modelPrototype, foreignKey, {\n      /*\n        object.childrenIds\n          - returns an array of the associated children's ids\n      */\n      get() {\n        this._tempAssociations = this._tempAssociations || {};\n        let tempChildren = this._tempAssociations[key];\n        let ids = [];\n\n        if (tempChildren) {\n          if (association.isPolymorphic) {\n            ids = tempChildren.models.map((model) => ({\n              type: model.modelName,\n              id: model.id,\n            }));\n          } else {\n            ids = tempChildren.models.map((model) => model.id);\n          }\n        } else {\n          ids = this.attrs[foreignKey] || [];\n        }\n\n        return ids;\n      },\n\n      /*\n        object.childrenIds = ([childrenIds...])\n          - sets the associated children (via id)\n      */\n      set(ids) {\n        let tempChildren;\n\n        if (ids === null) {\n          tempChildren = [];\n        } else if (ids !== undefined) {\n          assert(\n            Array.isArray(ids),\n            `You must pass an array in when setting ${foreignKey} on ${this}`\n          );\n\n          if (association.isPolymorphic) {\n            assert(\n              ids.every((el) => {\n                return (\n                  typeof el === \"object\" &&\n                  typeof el.type !== undefined &&\n                  typeof el.id !== undefined\n                );\n              }),\n              `You must pass in an array of polymorphic identifiers (objects of shape { type, id }) when setting ${foreignKey} on ${this}`\n            );\n\n            let models = ids.map(({ type, id }) => {\n              return association.schema[\n                association.schema.toCollectionName(type)\n              ].find(id);\n            });\n            tempChildren = new PolymorphicCollection(models);\n          } else {\n            tempChildren = association.schema[\n              association.schema.toCollectionName(association.modelName)\n            ].find(ids);\n          }\n        }\n\n        this[key] = tempChildren;\n      },\n    });\n\n    Object.defineProperty(modelPrototype, key, {\n      /*\n        object.children\n          - returns an array of associated children\n      */\n      get() {\n        this._tempAssociations = this._tempAssociations || {};\n        let collection = null;\n\n        if (this._tempAssociations[key]) {\n          collection = this._tempAssociations[key];\n        } else {\n          if (association.isPolymorphic) {\n            if (this[foreignKey]) {\n              let polymorphicIds = this[foreignKey];\n              let models = polymorphicIds.map(({ type, id }) => {\n                return association.schema[\n                  association.schema.toCollectionName(type)\n                ].find(id);\n              });\n\n              collection = new PolymorphicCollection(models);\n            } else {\n              collection = new PolymorphicCollection(association.modelName);\n            }\n          } else {\n            if (this[foreignKey]) {\n              collection = association.schema[\n                association.schema.toCollectionName(association.modelName)\n              ].find(this[foreignKey]);\n            } else {\n              collection = new Collection(association.modelName);\n            }\n          }\n\n          this._tempAssociations[key] = collection;\n        }\n\n        return collection;\n      },\n\n      /*\n        object.children = [model1, model2, ...]\n          - sets the associated children (via array of models or Collection)\n      */\n      set(models) {\n        if (\n          models instanceof Collection ||\n          models instanceof PolymorphicCollection\n        ) {\n          models = models.models;\n        }\n\n        models = models ? compact(models) : [];\n        this._tempAssociations = this._tempAssociations || {};\n\n        let collection;\n        if (association.isPolymorphic) {\n          collection = new PolymorphicCollection(models);\n        } else {\n          collection = new Collection(association.modelName, models);\n        }\n        this._tempAssociations[key] = collection;\n\n        models.forEach((model) => {\n          if (model.hasInverseFor(association)) {\n            let inverse = model.inverseFor(association);\n\n            model.associate(this, inverse);\n          }\n        });\n      },\n    });\n\n    /*\n      object.newChild\n        - creates a new unsaved associated child\n    */\n    modelPrototype[\n      `new${capitalize(\n        camelize(this._container.inflector.singularize(association.name))\n      )}`\n    ] = function (...args) {\n      let modelName, attrs;\n      if (association.isPolymorphic) {\n        modelName = args[0];\n        attrs = args[1];\n      } else {\n        modelName = association.modelName;\n        attrs = args[0];\n      }\n\n      let child = association.schema[\n        association.schema.toCollectionName(modelName)\n      ].new(attrs);\n      let children = this[key].models;\n\n      children.push(child);\n      this[key] = children;\n\n      return child;\n    };\n\n    /*\n      object.createChild\n        - creates a new saved associated child, and immediately persists both models\n\n      TODO: forgot why this[key].add(child) doesn't work, most likely\n      because these external APIs trigger saving cascades. Should probably\n      have an internal method like this[key]._add.\n    */\n    modelPrototype[\n      `create${capitalize(\n        camelize(this._container.inflector.singularize(association.name))\n      )}`\n    ] = function (...args) {\n      let modelName, attrs;\n      if (association.isPolymorphic) {\n        modelName = args[0];\n        attrs = args[1];\n      } else {\n        modelName = association.modelName;\n        attrs = args[0];\n      }\n\n      let child = association.schema[\n        association.schema.toCollectionName(modelName)\n      ].create(attrs);\n      let children = this[key].models;\n\n      children.push(child);\n      this[key] = children;\n\n      this.save();\n\n      return child.reload();\n    };\n  }\n\n  /**\n   *\n   *\n   * @public\n   */\n  disassociateAllDependentsFromTarget(model) {\n    let owner = this.ownerModelName;\n    let fk;\n\n    if (this.isPolymorphic) {\n      fk = { type: model.modelName, id: model.id };\n    } else {\n      fk = model.id;\n    }\n\n    let dependents = this.schema[this.schema.toCollectionName(owner)].where(\n      (potentialOwner) => {\n        let currentIds = potentialOwner[this.getForeignKey()];\n\n        // Need this check because currentIds could be null\n        return (\n          currentIds &&\n          currentIds.find((id) => {\n            if (typeof id === \"object\") {\n              return id.type === fk.type && id.id === fk.id;\n            } else {\n              return id === fk;\n            }\n          })\n        );\n      }\n    );\n\n    dependents.models.forEach((dependent) => {\n      dependent.disassociate(model, this);\n      dependent.save();\n    });\n  }\n}\n","import assert from \"../assert\";\nimport { camelize, dasherize } from \"../utils/inflector\";\nimport HasMany from \"../orm/associations/has-many\";\n\nconst pathModelClassCache = {};\n\n/**\n  @hide\n*/\nexport default class BaseRouteHandler {\n  getModelClassFromPath(fullPath) {\n    if (!fullPath) {\n      return;\n    }\n\n    if (typeof pathModelClassCache[fullPath] !== \"string\") {\n      let path = fullPath.split(\"/\");\n      let lastPath;\n\n      for (let i = path.length - 1; i >= 0; i--) {\n        const segment = path[i];\n        if (segment.length && segment[0] !== \":\") {\n          lastPath = segment;\n          break;\n        }\n      }\n\n      pathModelClassCache[fullPath] = dasherize(\n        camelize(this._container.inflector.singularize(lastPath))\n      );\n    }\n\n    return pathModelClassCache[fullPath];\n  }\n\n  _getIdForRequest(request, jsonApiDoc) {\n    let id;\n    if (request && request.params && request.params.id) {\n      id = request.params.id;\n    } else if (jsonApiDoc && jsonApiDoc.data && jsonApiDoc.data.id) {\n      id = jsonApiDoc.data.id;\n    }\n    return id;\n  }\n\n  _getJsonApiDocForRequest(request, modelName) {\n    let body;\n    if (request && request.requestBody) {\n      body = JSON.parse(request.requestBody);\n    }\n    return this.serializerOrRegistry.normalize(body, modelName);\n  }\n\n  _getAttrsForRequest(request, modelName) {\n    let json = this._getJsonApiDocForRequest(request, modelName);\n    let id = this._getIdForRequest(request, json);\n    let attrs = {};\n\n    assert(\n      json.data &&\n        (json.data.attributes || json.data.type || json.data.relationships),\n      `You're using a shorthand or #normalizedRequestAttrs, but your serializer's normalize function did not return a valid JSON:API document. Consult the docs for the normalize hook on the Serializer class.`\n    );\n\n    if (json.data.attributes) {\n      attrs = Object.keys(json.data.attributes).reduce((sum, key) => {\n        sum[camelize(key)] = json.data.attributes[key];\n        return sum;\n      }, {});\n    }\n\n    if (json.data.relationships) {\n      Object.keys(json.data.relationships).forEach((relationshipName) => {\n        let relationship = json.data.relationships[relationshipName];\n        let modelClass = this.schema.modelClassFor(modelName);\n        let association = modelClass.associationFor(camelize(relationshipName));\n        let valueForRelationship;\n\n        assert(\n          association,\n          `You're passing the relationship '${relationshipName}' to the '${modelName}' model via a ${request.method} to '${request.url}', but you did not define the '${relationshipName}' association on the '${modelName}' model.`\n        );\n\n        if (association.isPolymorphic) {\n          valueForRelationship = relationship.data;\n        } else if (association instanceof HasMany) {\n          valueForRelationship =\n            relationship.data && relationship.data.map((rel) => rel.id);\n        } else {\n          valueForRelationship = relationship.data && relationship.data.id;\n        }\n\n        attrs[association.identifier] = valueForRelationship;\n      }, {});\n    }\n\n    if (id) {\n      attrs.id = id;\n    }\n\n    return attrs;\n  }\n\n  _getAttrsForFormRequest({ requestBody }) {\n    let attrs;\n    let urlEncodedParts = [];\n\n    assert(\n      requestBody && typeof requestBody === \"string\",\n      `You're using the helper method #normalizedFormData, but the request body is empty or not a valid url encoded string.`\n    );\n\n    urlEncodedParts = requestBody.split(\"&\");\n\n    attrs = urlEncodedParts.reduce((a, urlEncodedPart) => {\n      let [key, value] = urlEncodedPart.split(\"=\");\n      a[key] = decodeURIComponent(value.replace(/\\+/g, \" \"));\n      return a;\n    }, {});\n\n    return attrs;\n  }\n}\n","import BaseRouteHandler from \"./base\";\nimport assert from \"../assert\";\nimport { dasherize } from \"../utils/inflector\";\n\n/**\n * @hide\n */\nexport default class FunctionRouteHandler extends BaseRouteHandler {\n  constructor(schema, serializerOrRegistry, userFunction, path, server) {\n    super(server);\n    this.schema = schema;\n    this.serializerOrRegistry = serializerOrRegistry;\n    this.userFunction = userFunction;\n    this.path = path;\n  }\n\n  handle(request) {\n    return this.userFunction(this.schema, request);\n  }\n\n  setRequest(request) {\n    this.request = request;\n  }\n\n  serialize(response, serializerType) {\n    let serializer;\n\n    if (serializerType) {\n      serializer = this.serializerOrRegistry.serializerFor(serializerType, {\n        explicit: true,\n      });\n    } else {\n      serializer = this.serializerOrRegistry;\n    }\n\n    return serializer.serialize(response, this.request);\n  }\n\n  normalizedRequestAttrs(modelName = null) {\n    let {\n      path,\n      request,\n      request: { requestHeaders },\n    } = this;\n    let attrs;\n\n    let lowerCaseHeaders = {};\n    for (let header in requestHeaders) {\n      lowerCaseHeaders[header.toLowerCase()] = requestHeaders[header];\n    }\n    if (/x-www-form-urlencoded/.test(lowerCaseHeaders[\"content-type\"])) {\n      attrs = this._getAttrsForFormRequest(request);\n    } else {\n      if (modelName) {\n        assert(\n          dasherize(modelName) === modelName,\n          `You called normalizedRequestAttrs('${modelName}'), but normalizedRequestAttrs was intended to be used with the dasherized version of the model type. Please change this to normalizedRequestAttrs('${dasherize(\n            modelName\n          )}').`\n        );\n      } else {\n        modelName = this.getModelClassFromPath(path);\n      }\n\n      assert(\n        this.schema.hasModelForModelName(modelName),\n        `You're using a shorthand or the #normalizedRequestAttrs helper but the detected model of '${modelName}' does not exist. You might need to pass in the correct modelName as the first argument to #normalizedRequestAttrs.`\n      );\n\n      attrs = this._getAttrsForRequest(request, modelName);\n    }\n\n    return attrs;\n  }\n}\n","/**\n * @hide\n */\nexport default class ObjectRouteHandler {\n  constructor(schema, serializerOrRegistry, object) {\n    this.schema = schema;\n    this.serializerOrRegistry = serializerOrRegistry;\n    this.object = object;\n  }\n\n  handle(/* request */) {\n    return this.object;\n  }\n}\n","import BaseRouteHandler from \"../base\";\n\n/**\n  @hide\n*/\nexport default class BaseShorthandRouteHandler extends BaseRouteHandler {\n  constructor(schema, serializerOrRegistry, shorthand, path, options = {}) {\n    super();\n    shorthand = shorthand || this.getModelClassFromPath(path);\n    this.schema = schema;\n    this.serializerOrRegistry = serializerOrRegistry;\n    this.shorthand = shorthand;\n    this.options = options;\n\n    let type = Array.isArray(shorthand) ? \"array\" : typeof shorthand;\n    if (type === \"string\") {\n      let modelClass = this.schema[this.schema.toCollectionName(shorthand)];\n      this.handle = (request) => {\n        return this.handleStringShorthand(request, modelClass);\n      };\n    } else if (type === \"array\") {\n      let modelClasses = shorthand.map(\n        (modelName) => this.schema[this.schema.toCollectionName(modelName)]\n      );\n      this.handle = (request) => {\n        return this.handleArrayShorthand(request, modelClasses);\n      };\n    }\n  }\n\n  // handleStringShorthand() {\n  //\n  // }\n  //\n  // handleArrayShorthand() {\n  //\n  // }\n}\n","import assert from \"../../assert\";\nimport BaseShorthandRouteHandler from \"./base\";\nimport Response from \"../../response\";\nimport { camelize } from \"../../utils/inflector\";\n\n/**\n * @hide\n */\nexport default class GetShorthandRouteHandler extends BaseShorthandRouteHandler {\n  /*\n    Retrieve a model/collection from the db.\n\n    Examples:\n      this.get('/contacts', 'contact');\n      this.get('/contacts/:id', 'contact');\n  */\n  handleStringShorthand(request, modelClass) {\n    let modelName = this.shorthand;\n    let camelizedModelName = camelize(modelName);\n\n    assert(\n      modelClass,\n      `The route handler for ${request.url} is trying to access the ${camelizedModelName} model, but that model doesn't exist.`\n    );\n\n    let id = this._getIdForRequest(request);\n    if (id) {\n      let model = modelClass.find(id);\n      if (!model) {\n        return new Response(404);\n      } else {\n        return model;\n      }\n    } else if (this.options.coalesce) {\n      let ids = this.serializerOrRegistry.getCoalescedIds(\n        request,\n        camelizedModelName\n      );\n      if (ids) {\n        return modelClass.find(ids);\n      }\n    }\n    return modelClass.all();\n  }\n\n  /*\n    Retrieve an array of collections from the db.\n\n    Ex: this.get('/home', ['contacts', 'pictures']);\n  */\n  handleArrayShorthand(request, modelClasses) {\n    let keys = this.shorthand;\n    let id = this._getIdForRequest(request);\n\n    /*\n    If the first key is singular and we have an id param in\n    the request, we're dealing with the version of the shorthand\n    that has a parent model and several has-many relationships.\n    We throw an error, because the serializer is the appropriate\n    place for this now.\n    */\n    assert(\n      !id || this._container.inflector.singularize(keys[0]) !== keys[0],\n      `It looks like you're using the \"Single record with\n      related records\" version of the array shorthand, in addition to opting\n      in to the model layer. This shorthand was made when there was no\n      serializer layer. Now that you're using models, please ensure your\n      relationships are defined, and create a serializer for the parent\n      model, adding the relationships there.`\n    );\n\n    return modelClasses.map((modelClass) => modelClass.all());\n  }\n}\n","import assert from \"../../assert\";\nimport BaseShorthandRouteHandler from \"./base\";\nimport { camelize } from \"../../utils/inflector\";\n\n/**\n * @hide\n */\nexport default class PostShorthandRouteHandler extends BaseShorthandRouteHandler {\n  /*\n    Push a new model of type *camelizedModelName* to the db.\n\n    For example, this will push a 'user':\n      this.post('/contacts', 'user');\n  */\n\n  handleStringShorthand(request, modelClass) {\n    let modelName = this.shorthand;\n    let camelizedModelName = camelize(modelName);\n    assert(\n      modelClass,\n      `The route handler for ${request.url} is trying to access the ${camelizedModelName} model, but that model doesn't exist.`\n    );\n\n    let attrs = this._getAttrsForRequest(\n      request,\n      modelClass.camelizedModelName\n    );\n    return modelClass.create(attrs);\n  }\n}\n","import assert from \"../../assert\";\nimport BaseShorthandRouteHandler from \"./base\";\nimport { camelize } from \"../../utils/inflector\";\nimport Response from \"../../response\";\n\n/**\n * @hide\n */\nexport default class PutShorthandRouteHandler extends BaseShorthandRouteHandler {\n  /*\n    Update an object from the db, specifying the type.\n\n      this.put('/contacts/:id', 'user');\n  */\n  handleStringShorthand(request, modelClass) {\n    let modelName = this.shorthand;\n    let camelizedModelName = camelize(modelName);\n\n    assert(\n      modelClass,\n      `The route handler for ${request.url} is trying to access the ${camelizedModelName} model, but that model doesn't exist.`\n    );\n\n    let id = this._getIdForRequest(request);\n\n    let model = modelClass.find(id);\n    if (!model) {\n      return new Response(404);\n    }\n\n    let attrs = this._getAttrsForRequest(\n      request,\n      modelClass.camelizedModelName\n    );\n\n    return model.update(attrs);\n  }\n}\n","import assert from \"../../assert\";\nimport BaseShorthandRouteHandler from \"./base\";\nimport { camelize } from \"../../utils/inflector\";\nimport Response from \"../../response\";\n\n/**\n * @hide\n */\nexport default class DeleteShorthandRouteHandler extends BaseShorthandRouteHandler {\n  /*\n    Remove the model from the db of type *camelizedModelName*.\n\n    This would remove the user with id :id:\n      Ex: this.del('/contacts/:id', 'user');\n  */\n  handleStringShorthand(request, modelClass) {\n    let modelName = this.shorthand;\n    let camelizedModelName = camelize(modelName);\n    assert(\n      modelClass,\n      `The route handler for ${request.url} is trying to access the ${camelizedModelName} model, but that model doesn't exist.`\n    );\n\n    let id = this._getIdForRequest(request);\n    let model = modelClass.find(id);\n    if (!model) {\n      return new Response(404);\n    }\n\n    model.destroy();\n  }\n\n  /*\n    Remove the model and child related models from the db.\n\n    This would remove the contact with id `:id`, as well\n    as this contact's addresses and phone numbers.\n      Ex: this.del('/contacts/:id', ['contact', 'addresses', 'numbers');\n  */\n  handleArrayShorthand(request, modelClasses) {\n    let id = this._getIdForRequest(request);\n\n    let parent = modelClasses[0].find(id);\n    let childTypes = modelClasses\n      .slice(1)\n      .map((modelClass) =>\n        this._container.inflector.pluralize(modelClass.camelizedModelName)\n      );\n\n    // Delete related children\n    childTypes.forEach((type) => parent[type].destroy());\n    parent.destroy();\n  }\n}\n","import assert from \"../../assert\";\nimport BaseShorthandRouteHandler from \"./base\";\nimport Response from \"../../response\";\nimport { camelize } from \"../../utils/inflector\";\n\n/**\n * @hide\n */\nexport default class HeadShorthandRouteHandler extends BaseShorthandRouteHandler {\n  /*\n    Retrieve a model/collection from the db.\n\n    Examples:\n      this.head('/contacts', 'contact');\n      this.head('/contacts/:id', 'contact');\n  */\n  handleStringShorthand(request, modelClass) {\n    let modelName = this.shorthand;\n    let camelizedModelName = camelize(modelName);\n\n    assert(\n      modelClass,\n      `The route handler for ${request.url} is trying to access the ${camelizedModelName} model, but that model doesn't exist.`\n    );\n\n    let id = this._getIdForRequest(request);\n    if (id) {\n      let model = modelClass.find(id);\n      if (!model) {\n        return new Response(404);\n      } else {\n        return new Response(204);\n      }\n    } else if (\n      this.options.coalesce &&\n      request.queryParams &&\n      request.queryParams.ids\n    ) {\n      let model = modelClass.find(request.queryParams.ids);\n\n      if (!model) {\n        return new Response(404);\n      } else {\n        return new Response(204);\n      }\n    } else {\n      return new Response(204);\n    }\n  }\n}\n","import { MirageError } from \"./assert\";\nimport Response from \"./response\";\nimport FunctionHandler from \"./route-handlers/function\";\nimport ObjectHandler from \"./route-handlers/object\";\nimport GetShorthandHandler from \"./route-handlers/shorthands/get\";\nimport PostShorthandHandler from \"./route-handlers/shorthands/post\";\nimport PutShorthandHandler from \"./route-handlers/shorthands/put\";\nimport DeleteShorthandHandler from \"./route-handlers/shorthands/delete\";\nimport HeadShorthandHandler from \"./route-handlers/shorthands/head\";\n\nconst DEFAULT_CODES = { get: 200, put: 204, post: 201, delete: 204 };\n\nfunction createHandler({\n  verb,\n  schema,\n  serializerOrRegistry,\n  path,\n  rawHandler,\n  options,\n}) {\n  let handler;\n  let args = [schema, serializerOrRegistry, rawHandler, path, options];\n  let type = typeof rawHandler;\n\n  if (type === \"function\") {\n    handler = new FunctionHandler(...args);\n  } else if (type === \"object\" && rawHandler) {\n    handler = new ObjectHandler(...args);\n  } else if (verb === \"get\") {\n    handler = new GetShorthandHandler(...args);\n  } else if (verb === \"post\") {\n    handler = new PostShorthandHandler(...args);\n  } else if (verb === \"put\" || verb === \"patch\") {\n    handler = new PutShorthandHandler(...args);\n  } else if (verb === \"delete\") {\n    handler = new DeleteShorthandHandler(...args);\n  } else if (verb === \"head\") {\n    handler = new HeadShorthandHandler(...args);\n  }\n  return handler;\n}\n\n/**\n * @hide\n */\nexport default class RouteHandler {\n  constructor({\n    schema,\n    verb,\n    rawHandler,\n    customizedCode,\n    options,\n    path,\n    serializerOrRegistry,\n  }) {\n    this.verb = verb;\n    this.customizedCode = customizedCode;\n    this.serializerOrRegistry = serializerOrRegistry;\n    this.handler = createHandler({\n      verb,\n      schema,\n      path,\n      serializerOrRegistry,\n      rawHandler,\n      options,\n    });\n  }\n\n  handle(request) {\n    return this._getMirageResponseForRequest(request)\n      .then((mirageResponse) => this.serialize(mirageResponse, request))\n      .then((serializedMirageResponse) => {\n        return serializedMirageResponse.toRackResponse();\n      });\n  }\n\n  _getMirageResponseForRequest(request) {\n    let result;\n    try {\n      /*\n       We need to do this for the #serialize convenience method. Probably is\n       a better way.\n     */\n      if (this.handler instanceof FunctionHandler) {\n        this.handler.setRequest(request);\n      }\n\n      result = this.handler.handle(request);\n    } catch (e) {\n      if (e instanceof MirageError) {\n        result = new Response(500, {}, e);\n      } else {\n        let message = e.message || e;\n\n        result = new Response(\n          500,\n          {},\n          {\n            message,\n            stack: `Mirage: Your ${request.method} handler for the url ${\n              request.url\n            } threw an error:\\n\\n${e.stack || e}`,\n          }\n        );\n      }\n    }\n\n    return this._toMirageResponse(result);\n  }\n\n  _toMirageResponse(result) {\n    let mirageResponse;\n\n    return new Promise((resolve, reject) => {\n      Promise.resolve(result)\n        .then((response) => {\n          if (response instanceof Response) {\n            mirageResponse = result;\n          } else {\n            let code = this._getCodeForResponse(response);\n            mirageResponse = new Response(code, {}, response);\n          }\n          resolve(mirageResponse);\n        })\n        .catch(reject);\n    });\n  }\n\n  _getCodeForResponse(response) {\n    let code;\n    if (this.customizedCode) {\n      code = this.customizedCode;\n    } else {\n      code = DEFAULT_CODES[this.verb];\n      // Returning any data for a 204 is invalid\n      if (code === 204 && response !== undefined && response !== \"\") {\n        code = 200;\n      }\n    }\n    return code;\n  }\n\n  serialize(mirageResponse, request) {\n    mirageResponse.data = this.serializerOrRegistry.serialize(\n      mirageResponse.data,\n      request\n    );\n\n    return mirageResponse;\n  }\n}\n","import has from \"lodash.has\";\n\n/**\n  @hide\n*/\nexport default function extend(protoProps, staticProps) {\n  class Child extends this {\n    constructor(...args) {\n      super(...args);\n      // The constructor function for the new subclass is optionally defined by you\n      // in your `extend` definition\n      if (protoProps && has(protoProps, \"constructor\")) {\n        protoProps.constructor.call(this, ...args);\n      }\n    }\n  }\n\n  // Add static properties to the constructor function, if supplied.\n\n  Object.assign(Child, this, staticProps);\n\n  // Add prototype properties (instance properties) to the subclass,\n  // if supplied.\n  if (protoProps) {\n    Object.assign(Child.prototype, protoProps);\n  }\n\n  return Child;\n}\n","import BelongsTo from \"./associations/belongs-to\";\nimport HasMany from \"./associations/has-many\";\nimport extend from \"../utils/extend\";\nimport assert from \"../assert\";\nimport Collection from \"./collection\";\nimport PolymorphicCollection from \"./polymorphic-collection\";\nimport values from \"lodash.values\";\nimport compact from \"lodash.compact\";\n\n/**\n  Models wrap your database, and allow you to define relationships.\n\n  **Class vs. instance methods**\n\n  The methods documented below apply to _instances_ of models, but you'll typically use the `Schema` to access the model _class_, which can be used to find or create instances.\n\n  You can find the Class methods documented under the `Schema` API docs.\n\n  **Accessing properties and relationships**\n\n  You can access properites (fields) and relationships directly off of models.\n\n  ```js\n  user.name;    // 'Sam'\n  user.team;    // Team model\n  user.teamId;  // Team id (foreign key)\n  ```\n\n  Mirage Models are schemaless in their attributes, but their relationship schema is known.\n\n  For example,\n\n  ```js\n  let user = schema.users.create();\n  user.attrs  // { }\n  user.name   // undefined\n\n  let user = schema.users.create({ name: 'Sam' });\n  user.attrs  // { name: 'Sam' }\n  user.name   // 'Sam'\n  ```\n\n  However, if a `user` has a `posts` relationships defined,\n\n  ```js\n  let user = schema.users.create();\n  user.posts  // returns an empty Posts Collection\n  ```\n\n  @class Model\n  @constructor\n  @public\n */\nclass Model {\n  // TODO: schema and modelName now set statically at registration, need to remove\n  /*\n    Notes:\n\n  - We need to pass in modelName, because models are created with\n    .extend and anonymous functions, so you cannot use\n    reflection to find the name of the constructor.\n  */\n  constructor(schema, modelName, attrs, fks) {\n    assert(schema, \"A model requires a schema\");\n    assert(modelName, \"A model requires a modelName\");\n\n    this._schema = schema;\n    this.modelName = modelName;\n    this.fks = fks || [];\n\n    /**\n      Returns the attributes of your model.\n\n      ```js\n      let post = schema.blogPosts.find(1);\n      post.attrs; // {id: 1, title: 'Lorem Ipsum', publishedAt: '2012-01-01 10:00:00'}\n      ```\n\n      Note that you can also access individual attributes directly off a model, e.g. `post.title`.\n\n      @property attrs\n      @public\n    */\n    this.attrs = {};\n\n    attrs = attrs || {};\n\n    // Ensure fks are there\n    this.fks.forEach((fk) => {\n      this.attrs[fk] = attrs[fk] !== undefined ? attrs[fk] : null;\n    });\n\n    Object.keys(attrs).forEach((name) => {\n      const value = attrs[name];\n\n      this._validateAttr(name, value);\n      this._setupAttr(name, value);\n      this._setupRelationship(name, value);\n    });\n\n    return this;\n  }\n\n  /**\n    Create or saves the model.\n\n    ```js\n    let post = blogPosts.new({ title: 'Lorem ipsum' });\n    post.id; // null\n\n    post.save();\n    post.id; // 1\n\n    post.title = 'Hipster ipsum'; // db has not been updated\n    post.save();                  // ...now the db is updated\n    ```\n\n    @method save\n    @return this\n    @public\n   */\n  save() {\n    let collection = this._schema.toInternalCollectionName(this.modelName);\n\n    if (this.isNew()) {\n      // Update the attrs with the db response\n      this.attrs = this._schema.db[collection].insert(this.attrs);\n\n      // Ensure the id getter/setter is set\n      this._definePlainAttribute(\"id\");\n    } else {\n      this._schema.isSaving[this.toString()] = true;\n      this._schema.db[collection].update(this.attrs.id, this.attrs);\n    }\n\n    this._saveAssociations();\n\n    this._schema.isSaving[this.toString()] = false;\n    return this;\n  }\n\n  /**\n    Updates the record in the db.\n\n    ```js\n    let post = blogPosts.find(1);\n    post.update('title', 'Hipster ipsum'); // the db was updated\n    post.update({\n      title: 'Lorem ipsum',\n      created_at: 'before it was cool'\n    });\n    ```\n\n    @method update\n    @param {String} key\n    @param {String} val\n    @return this\n    @public\n   */\n  update(key, val) {\n    let attrs;\n    if (key == null) {\n      return this;\n    }\n\n    if (typeof key === \"object\") {\n      attrs = key;\n    } else {\n      (attrs = {})[key] = val;\n    }\n\n    Object.keys(attrs).forEach(function (attr) {\n      if (\n        !this.associationKeys.has(attr) &&\n        !this.associationIdKeys.has(attr)\n      ) {\n        this._definePlainAttribute(attr);\n      }\n      this[attr] = attrs[attr];\n    }, this);\n\n    this.save();\n\n    return this;\n  }\n\n  /**\n    Destroys the db record.\n\n    ```js\n    let post = blogPosts.find(1);\n    post.destroy(); // removed from the db\n    ```\n\n    @method destroy\n    @public\n   */\n  destroy() {\n    if (this.isSaved()) {\n      this._disassociateFromDependents();\n\n      let collection = this._schema.toInternalCollectionName(this.modelName);\n      this._schema.db[collection].remove(this.attrs.id);\n    }\n  }\n\n  /**\n    Boolean, true if the model has not been persisted yet to the db.\n\n    ```js\n    let post = blogPosts.new({title: 'Lorem ipsum'});\n    post.isNew(); // true\n    post.id;      // null\n\n    post.save();  // true\n    post.isNew(); // false\n    post.id;      // 1\n    ```\n\n    @method isNew\n    @return {Boolean}\n    @public\n   */\n  isNew() {\n    let hasDbRecord = false;\n    let hasId = this.attrs.id !== undefined && this.attrs.id !== null;\n\n    if (hasId) {\n      let collectionName = this._schema.toInternalCollectionName(\n        this.modelName\n      );\n      let record = this._schema.db[collectionName].find(this.attrs.id);\n\n      if (record) {\n        hasDbRecord = true;\n      }\n    }\n\n    return !hasDbRecord;\n  }\n\n  /**\n    Boolean, opposite of `isNew`\n\n    @method isSaved\n    @return {Boolean}\n    @public\n   */\n  isSaved() {\n    return !this.isNew();\n  }\n\n  /**\n    Reload a model's data from the database.\n\n    ```js\n    let post = blogPosts.find(1);\n    post.attrs;     // {id: 1, title: 'Lorem ipsum'}\n\n    post.title = 'Hipster ipsum';\n    post.title;     // 'Hipster ipsum';\n\n    post.reload();  // true\n    post.title;     // 'Lorem ipsum'\n    ```\n\n    @method reload\n    @return this\n    @public\n   */\n  reload() {\n    if (this.id) {\n      let collection = this._schema.toInternalCollectionName(this.modelName);\n      let attrs = this._schema.db[collection].find(this.id);\n\n      Object.keys(attrs)\n        .filter(function (attr) {\n          return attr !== \"id\";\n        })\n        .forEach(function (attr) {\n          this.attrs[attr] = attrs[attr];\n        }, this);\n    }\n\n    // Clear temp associations\n    this._tempAssociations = {};\n\n    return this;\n  }\n\n  toJSON() {\n    return this.attrs;\n  }\n\n  /**\n    Returns a hash of this model's associations.\n\n    ```js\n    let server = new Server({\n      models: {\n        user: Model,\n        post: Model.extend({\n          user: belongsTo(),\n          comments: hasMany()\n        }),\n        comment: Model\n      },\n\n      seeds(server) {\n        let peter = server.create(\"user\", { name: \"Peter\" });\n        server.create(\"post\", { user: peter });\n      }\n    });\n\n    let post = server.schema.posts.find(1)\n    post.associations\n\n    // {\n    //   user: BelongsToAssociation,\n    //   comments: HasManyAssociation\n    // }\n    ```\n\n    Check out the docs on the Association class to see what fields are available for each association.\n\n    @method associations\n    @type {Object}\n    @public\n   */\n  get associations() {\n    return this._schema.associationsFor(this.modelName);\n  }\n\n  /**\n    Returns the association for the given key\n\n    @method associationFor\n    @param key\n    @public\n    @hide\n   */\n  associationFor(key) {\n    return this.associations[key];\n  }\n\n  /**\n    Returns this model's inverse association for the given\n    model-type-association pair, if it exists.\n\n    Example:\n\n         post: Model.extend({\n           comments: hasMany()\n         }),\n         comments: Model.extend({\n           post: belongsTo()\n         })\n\n     post.inversefor(commentsPostAssociation) would return the\n     `post.comments` association object.\n\n     Originally we had association.inverse() but that became impossible with\n     the addition of polymorphic models. Consider the following:\n\n         post: Model.extend({\n           comments: hasMany()\n         }),\n         picture: Model.extend({\n           comments: hasMany()\n         }),\n         comments: Model.extend({\n           commentable: belongsTo({ polymorphic: true })\n         })\n\n     `commentable.inverse()` is ambiguous - does it return\n     `post.comments` or `picture.comments`? Instead we need to ask each model\n     if it has an inverse for a given association. post.inverseFor(commentable)\n     is no longer ambiguous.\n\n    @method hasInverseFor\n    @param {String} modelName The model name of the class we're scanning\n    @param {ORM/Association} association\n    @return {ORM/Association}\n    @public\n    @hide\n   */\n  inverseFor(association) {\n    return (\n      this._explicitInverseFor(association) ||\n      this._implicitInverseFor(association)\n    );\n  }\n\n  /**\n    Finds the inverse for an association that explicity defines it's inverse\n\n    @private\n    @hide\n  */\n  _explicitInverseFor(association) {\n    this._checkForMultipleExplicitInverses(association);\n\n    let associations = this._schema.associationsFor(this.modelName);\n    let inverse = association.opts.inverse;\n    let candidate = inverse ? associations[inverse] : null;\n    let matchingPolymorphic = candidate && candidate.isPolymorphic;\n    let matchingInverse =\n      candidate && candidate.modelName === association.ownerModelName;\n    let candidateInverse = candidate && candidate.opts.inverse;\n\n    if (candidateInverse && candidate.opts.inverse !== association.name) {\n      assert(\n        false,\n        `You specified an inverse of ${inverse} for ${association.name}, but it does not match ${candidate.modelName} ${candidate.name}'s inverse`\n      );\n    }\n\n    return matchingPolymorphic || matchingInverse ? candidate : null;\n  }\n\n  /**\n    Ensures multiple explicit inverses don't exist on the current model\n    for the given association.\n\n    TODO: move this to compile-time check\n\n    @private\n    @hide\n  */\n  _checkForMultipleExplicitInverses(association) {\n    let associations = this._schema.associationsFor(this.modelName);\n    let matchingExplicitInverses = Object.keys(associations).filter((key) => {\n      let candidate = associations[key];\n      let modelMatches = association.ownerModelName === candidate.modelName;\n      let inverseKeyMatches = association.name === candidate.opts.inverse;\n\n      return modelMatches && inverseKeyMatches;\n    });\n    assert(\n      matchingExplicitInverses.length <= 1,\n      `The ${this.modelName} model has defined multiple explicit inverse associations for the ${association.ownerModelName}.${association.name} association.`\n    );\n  }\n\n  /**\n    Finds if there is an inverse for an association that does not\n    explicitly define one.\n\n    @private\n    @hide\n  */\n  _implicitInverseFor(association) {\n    let associations = this._schema.associationsFor(this.modelName);\n    let modelName = association.ownerModelName;\n\n    return values(associations)\n      .filter((candidate) => candidate.modelName === modelName)\n      .reduce((inverse, candidate) => {\n        let candidateInverse = candidate.opts.inverse;\n        let candidateIsImplicitInverse = candidateInverse === undefined;\n        let candidateIsExplicitInverse = candidateInverse === association.name;\n\n        let candidateMatches =\n          candidateIsImplicitInverse || candidateIsExplicitInverse;\n\n        if (candidateMatches) {\n          // Need to move this check to compile-time init\n          assert(\n            !inverse,\n            `The ${this.modelName} model has multiple possible inverse associations for the ${association.ownerModelName}.${association.name} association.`\n          );\n          inverse = candidate;\n        }\n\n        return inverse;\n      }, null);\n  }\n\n  /**\n    Returns whether this model has an inverse association for the given\n    model-type-association pair.\n\n    @method hasInverseFor\n    @param {String} modelName\n    @param {ORM/Association} association\n    @return {Boolean}\n    @public\n    @hide\n   */\n  hasInverseFor(association) {\n    return !!this.inverseFor(association);\n  }\n\n  /**\n    Used to check if models match each other. If models are saved, we check model type\n    and id, since they could have other non-persisted properties that are different.\n\n    @public\n    @hide\n  */\n  alreadyAssociatedWith(model, association) {\n    let associatedModelOrCollection = this[association.name];\n\n    if (associatedModelOrCollection && model) {\n      if (associatedModelOrCollection instanceof Model) {\n        if (associatedModelOrCollection.isSaved() && model.isSaved()) {\n          return associatedModelOrCollection.toString() === model.toString();\n        } else {\n          return associatedModelOrCollection === model;\n        }\n      } else {\n        return associatedModelOrCollection.includes(model);\n      }\n    }\n  }\n\n  associate(model, association) {\n    if (this.alreadyAssociatedWith(model, association)) {\n      return;\n    }\n\n    let { name } = association;\n\n    if (association instanceof HasMany) {\n      if (!this[name].includes(model)) {\n        this[name].add(model);\n      }\n    } else {\n      this[name] = model;\n    }\n  }\n\n  disassociate(model, association) {\n    let fk = association.getForeignKey();\n\n    if (association instanceof HasMany) {\n      let i;\n      if (association.isPolymorphic) {\n        let found = this[fk].find(\n          ({ type, id }) => type === model.modelName && id === model.id\n        );\n        i = found && this[fk].indexOf(found);\n      } else {\n        i = this[fk].map((key) => key.toString()).indexOf(model.id.toString());\n      }\n\n      if (i > -1) {\n        this.attrs[fk].splice(i, 1);\n      }\n    } else {\n      this.attrs[fk] = null;\n    }\n  }\n\n  /**\n    @hide\n  */\n  get isSaving() {\n    return this._schema.isSaving[this.toString()];\n  }\n\n  // Private\n  /**\n    model.attrs represents the persistable attributes, i.e. your db\n    table fields.\n    @method _setupAttr\n    @param attr\n    @param value\n    @private\n    @hide\n   */\n  _setupAttr(attr, value) {\n    const isAssociation =\n      this.associationKeys.has(attr) || this.associationIdKeys.has(attr);\n\n    if (!isAssociation) {\n      this.attrs[attr] = value;\n      // define plain getter/setters for non-association keys\n      this._definePlainAttribute(attr);\n    }\n  }\n\n  /**\n    Define getter/setter for a plain attribute\n    @method _definePlainAttribute\n    @param attr\n    @private\n    @hide\n   */\n  _definePlainAttribute(attr) {\n    // Ensure the property hasn't already been defined\n    let existingProperty = Object.getOwnPropertyDescriptor(this, attr);\n    if (existingProperty && existingProperty.get) {\n      return;\n    }\n\n    // Ensure the attribute is on the attrs hash\n    if (!Object.prototype.hasOwnProperty.call(this.attrs, attr)) {\n      this.attrs[attr] = null;\n    }\n\n    // Define the getter/setter\n    Object.defineProperty(this, attr, {\n      get() {\n        return this.attrs[attr];\n      },\n      set(val) {\n        this.attrs[attr] = val;\n        return this;\n      },\n    });\n  }\n\n  /**\n    Foreign keys get set on attrs directly (to avoid potential recursion), but\n    model references use the setter.\n   *\n    We validate foreign keys during instantiation.\n   *\n    @method _setupRelationship\n    @param attr\n    @param value\n    @private\n    @hide\n   */\n  _setupRelationship(attr, value) {\n    const isFk = this.associationIdKeys.has(attr) || this.fks.includes(attr);\n    const isAssociation = this.associationKeys.has(attr);\n\n    if (isFk) {\n      if (value !== undefined && value !== null) {\n        this._validateForeignKeyExistsInDatabase(attr, value);\n      }\n      this.attrs[attr] = value;\n    }\n    if (isAssociation) {\n      this[attr] = value;\n    }\n  }\n\n  /**\n    @method _validateAttr\n    @private\n    @hide\n   */\n  _validateAttr(key, value) {\n    // Verify attr passed in for associations is actually an association\n    {\n      if (this.associationKeys.has(key)) {\n        let association = this.associationFor(key);\n        let isNull = value === null;\n\n        if (association instanceof HasMany) {\n          let isCollection =\n            value instanceof Collection ||\n            value instanceof PolymorphicCollection;\n          let isArrayOfModels =\n            Array.isArray(value) &&\n            value.every((item) => item instanceof Model);\n\n          assert(\n            isCollection || isArrayOfModels || isNull,\n            `You're trying to create a ${this.modelName} model and you passed in \"${value}\" under the ${key} key, but that key is a HasMany relationship. You must pass in a Collection, PolymorphicCollection, array of Models, or null.`\n          );\n        } else if (association instanceof BelongsTo) {\n          assert(\n            value instanceof Model || isNull,\n            `You're trying to create a ${this.modelName} model and you passed in \"${value}\" under the ${key} key, but that key is a BelongsTo relationship. You must pass in a Model or null.`\n          );\n        }\n      }\n    }\n\n    // Verify attrs passed in for association foreign keys are actually fks\n    {\n      if (this.associationIdKeys.has(key)) {\n        if (key.endsWith(\"Ids\")) {\n          let isArray = Array.isArray(value);\n          let isNull = value === null;\n          assert(\n            isArray || isNull,\n            `You're trying to create a ${this.modelName} model and you passed in \"${value}\" under the ${key} key, but that key is a foreign key for a HasMany relationship. You must pass in an array of ids or null.`\n          );\n        }\n      }\n    }\n\n    // Verify no undefined associations are passed in\n    {\n      let isModelOrCollection =\n        value instanceof Model ||\n        value instanceof Collection ||\n        value instanceof PolymorphicCollection;\n      let isArrayOfModels =\n        Array.isArray(value) &&\n        value.length &&\n        value.every((item) => item instanceof Model);\n\n      if (isModelOrCollection || isArrayOfModels) {\n        let modelOrCollection = value;\n\n        assert(\n          this.associationKeys.has(key),\n          `You're trying to create a ${\n            this.modelName\n          } model and you passed in a ${modelOrCollection.toString()} under the ${key} key, but you haven't defined that key as an association on your model.`\n        );\n      }\n    }\n  }\n\n  /**\n    Originally we validated this via association.setId method, but it triggered\n    recursion. That method is designed for updating an existing model's ID so\n    this method is needed during instantiation.\n   *\n    @method _validateForeignKeyExistsInDatabase\n    @private\n    @hide\n   */\n  _validateForeignKeyExistsInDatabase(foreignKeyName, foreignKeys) {\n    if (Array.isArray(foreignKeys)) {\n      let association = this.hasManyAssociationFks[foreignKeyName];\n\n      let found;\n      if (association.isPolymorphic) {\n        found = foreignKeys.map(({ type, id }) => {\n          return this._schema.db[\n            this._schema.toInternalCollectionName(type)\n          ].find(id);\n        });\n        found = compact(found);\n      } else {\n        found = this._schema.db[\n          this._schema.toInternalCollectionName(association.modelName)\n        ].find(foreignKeys);\n      }\n\n      let foreignKeyLabel = association.isPolymorphic\n        ? foreignKeys.map((fk) => `${fk.type}:${fk.id}`).join(\",\")\n        : foreignKeys;\n      assert(\n        found.length === foreignKeys.length,\n        `You're instantiating a ${this.modelName} that has a ${foreignKeyName} of ${foreignKeyLabel}, but some of those records don't exist in the database.`\n      );\n    } else {\n      let association = this.belongsToAssociationFks[foreignKeyName];\n\n      let found;\n      if (association.isPolymorphic) {\n        found = this._schema.db[\n          this._schema.toInternalCollectionName(foreignKeys.type)\n        ].find(foreignKeys.id);\n      } else {\n        found = this._schema.db[\n          this._schema.toInternalCollectionName(association.modelName)\n        ].find(foreignKeys);\n      }\n\n      let foreignKeyLabel = association.isPolymorphic\n        ? `${foreignKeys.type}:${foreignKeys.id}`\n        : foreignKeys;\n      assert(\n        found,\n        `You're instantiating a ${this.modelName} that has a ${foreignKeyName} of ${foreignKeyLabel}, but that record doesn't exist in the database.`\n      );\n    }\n  }\n\n  /**\n    Update associated children when saving a collection\n   *\n    @method _saveAssociations\n    @private\n    @hide\n   */\n  _saveAssociations() {\n    this._saveBelongsToAssociations();\n    this._saveHasManyAssociations();\n  }\n\n  _saveBelongsToAssociations() {\n    values(this.belongsToAssociations).forEach((association) => {\n      this._disassociateFromOldInverses(association);\n      this._saveNewAssociates(association);\n      this._associateWithNewInverses(association);\n    });\n  }\n\n  _saveHasManyAssociations() {\n    values(this.hasManyAssociations).forEach((association) => {\n      this._disassociateFromOldInverses(association);\n      this._saveNewAssociates(association);\n      this._associateWithNewInverses(association);\n    });\n  }\n\n  _disassociateFromOldInverses(association) {\n    if (association instanceof HasMany) {\n      this._disassociateFromHasManyInverses(association);\n    } else if (association instanceof BelongsTo) {\n      this._disassociateFromBelongsToInverse(association);\n    }\n  }\n\n  // Disassociate currently persisted models that are no longer associated\n  _disassociateFromHasManyInverses(association) {\n    let fk = association.getForeignKey();\n    let tempAssociation =\n      this._tempAssociations && this._tempAssociations[association.name];\n    let associateIds = this.attrs[fk];\n\n    if (tempAssociation && associateIds) {\n      let models;\n      if (association.isPolymorphic) {\n        models = associateIds.map(({ type, id }) => {\n          return this._schema[this._schema.toCollectionName(type)].find(id);\n        });\n      } else {\n        // TODO: prob should initialize hasMany fks with []\n        models = this._schema[\n          this._schema.toCollectionName(association.modelName)\n        ].find(associateIds || []).models;\n      }\n\n      models\n        .filter(\n          (associate) =>\n            // filter out models that are already being saved\n            !associate.isSaving &&\n            // filter out models that will still be associated\n            !tempAssociation.includes(associate) &&\n            associate.hasInverseFor(association)\n        )\n        .forEach((associate) => {\n          let inverse = associate.inverseFor(association);\n\n          associate.disassociate(this, inverse);\n          associate.save();\n        });\n    }\n  }\n\n  /*\n    Disassociate currently persisted models that are no longer associated.\n\n    Example:\n\n      post: Model.extend({\n        comments: hasMany()\n      }),\n\n      comment: Model.extend({\n        post: belongsTo()\n      })\n\n    Assume `this` is comment:1. When saving, if comment:1 is no longer\n    associated with post:1, we need to remove comment:1 from post:1.comments.\n    In this example `association` would be `comment.post`.\n  */\n  _disassociateFromBelongsToInverse(association) {\n    let fk = association.getForeignKey();\n    let tempAssociation =\n      this._tempAssociations && this._tempAssociations[association.name];\n    let associateId = this.attrs[fk];\n\n    if (tempAssociation !== undefined && associateId) {\n      let associate;\n      if (association.isPolymorphic) {\n        associate = this._schema[\n          this._schema.toCollectionName(associateId.type)\n        ].find(associateId.id);\n      } else {\n        associate = this._schema[\n          this._schema.toCollectionName(association.modelName)\n        ].find(associateId);\n      }\n\n      if (associate.hasInverseFor(association)) {\n        let inverse = associate.inverseFor(association);\n\n        associate.disassociate(this, inverse);\n        associate._updateInDb(associate.attrs);\n      }\n    }\n  }\n\n  // Find all other models that depend on me and update their foreign keys\n  _disassociateFromDependents() {\n    this._schema\n      .dependentAssociationsFor(this.modelName)\n      .forEach((association) => {\n        association.disassociateAllDependentsFromTarget(this);\n      });\n  }\n\n  _saveNewAssociates(association) {\n    let fk = association.getForeignKey();\n    let tempAssociate =\n      this._tempAssociations && this._tempAssociations[association.name];\n\n    if (tempAssociate !== undefined) {\n      this.__isSavingNewChildren = true;\n      delete this._tempAssociations[association.name];\n\n      if (tempAssociate instanceof Collection) {\n        tempAssociate.models\n          .filter((model) => !model.isSaving)\n          .forEach((child) => {\n            child.save();\n          });\n\n        this._updateInDb({\n          [fk]: tempAssociate.models.map((child) => child.id),\n        });\n      } else if (tempAssociate instanceof PolymorphicCollection) {\n        tempAssociate.models\n          .filter((model) => !model.isSaving)\n          .forEach((child) => {\n            child.save();\n          });\n\n        this._updateInDb({\n          [fk]: tempAssociate.models.map((child) => {\n            return { type: child.modelName, id: child.id };\n          }),\n        });\n      } else {\n        // Clearing the association\n        if (tempAssociate === null) {\n          this._updateInDb({ [fk]: null });\n\n          // Self-referential\n        } else if (this.equals(tempAssociate)) {\n          this._updateInDb({ [fk]: this.id });\n\n          // Non-self-referential\n        } else if (!tempAssociate.isSaving) {\n          // Save the tempAssociate and update the local reference\n          tempAssociate.save();\n          this._syncTempAssociations(tempAssociate);\n\n          let fkValue;\n          if (association.isPolymorphic) {\n            fkValue = { id: tempAssociate.id, type: tempAssociate.modelName };\n          } else {\n            fkValue = tempAssociate.id;\n          }\n\n          this._updateInDb({ [fk]: fkValue });\n        }\n      }\n\n      this.__isSavingNewChildren = false;\n    }\n  }\n\n  /*\n    Step 3 in saving associations.\n\n    Example:\n\n      // initial state\n      post.author = steinbeck;\n\n      // new state\n      post.author = twain;\n\n       1. Disassociate from old inverse (remove post from steinbeck.posts)\n       2. Save new associates (if twain.isNew, save twain)\n    -> 3. Associate with new inverse (add post to twain.posts)\n  */\n  _associateWithNewInverses(association) {\n    if (!this.__isSavingNewChildren) {\n      let modelOrCollection = this[association.name];\n\n      if (modelOrCollection instanceof Model) {\n        this._associateModelWithInverse(modelOrCollection, association);\n      } else if (\n        modelOrCollection instanceof Collection ||\n        modelOrCollection instanceof PolymorphicCollection\n      ) {\n        modelOrCollection.models.forEach((model) => {\n          this._associateModelWithInverse(model, association);\n        });\n      }\n\n      delete this._tempAssociations[association.name];\n    }\n  }\n\n  _associateModelWithInverse(model, association) {\n    if (model.hasInverseFor(association)) {\n      let inverse = model.inverseFor(association);\n      let inverseFk = inverse.getForeignKey();\n\n      let ownerId = this.id;\n      if (inverse instanceof BelongsTo) {\n        let newId;\n        if (inverse.isPolymorphic) {\n          newId = { type: this.modelName, id: ownerId };\n        } else {\n          newId = ownerId;\n        }\n        this._schema.db[\n          this._schema.toInternalCollectionName(model.modelName)\n        ].update(model.id, { [inverseFk]: newId });\n      } else {\n        let inverseCollection = this._schema.db[\n          this._schema.toInternalCollectionName(model.modelName)\n        ];\n        let currentIdsForInverse =\n          inverseCollection.find(model.id)[inverse.getForeignKey()] || [];\n        let newIdsForInverse = Object.assign([], currentIdsForInverse);\n        let newId, alreadyAssociatedWith;\n\n        if (inverse.isPolymorphic) {\n          newId = { type: this.modelName, id: ownerId };\n          alreadyAssociatedWith = newIdsForInverse.some(\n            (key) => key.type == this.modelName && key.id == ownerId\n          );\n        } else {\n          newId = ownerId;\n          alreadyAssociatedWith = newIdsForInverse.includes(ownerId);\n        }\n\n        if (!alreadyAssociatedWith) {\n          newIdsForInverse.push(newId);\n        }\n\n        inverseCollection.update(model.id, { [inverseFk]: newIdsForInverse });\n      }\n    }\n  }\n\n  // Used to update data directly, since #save and #update can retrigger saves,\n  // which can cause cycles with associations.\n  _updateInDb(attrs) {\n    this.attrs = this._schema.db[\n      this._schema.toInternalCollectionName(this.modelName)\n    ].update(this.attrs.id, attrs);\n  }\n\n  /*\n  Super gnarly: after we save this tempAssociate, we we need to through\n  all other tempAssociates for a reference to this same model, and\n  update it. Otherwise those other references are stale, which could\n  cause a bug when they are subsequently saved.\n\n  This only works for belongsTo right now, should add hasMany logic to it.\n\n  See issue #1613: https://github.com/samselikoff/ember-cli-mirage/pull/1613\n  */\n  _syncTempAssociations(tempAssociate) {\n    Object.keys(this._tempAssociations).forEach((key) => {\n      if (\n        this._tempAssociations[key] &&\n        this._tempAssociations[key].toString() === tempAssociate.toString()\n      ) {\n        this._tempAssociations[key] = tempAssociate;\n      }\n    });\n  }\n\n  /**\n    Simple string representation of the model and id.\n\n    ```js\n    let post = blogPosts.find(1);\n    post.toString(); // \"model:blogPost:1\"\n    ```\n\n    @method toString\n    @return {String}\n    @public\n  */\n  toString() {\n    let idLabel = this.id ? `(${this.id})` : \"\";\n\n    return `model:${this.modelName}${idLabel}`;\n  }\n\n  /**\n    Checks the equality of this model and the passed-in model\n   *\n    @method equals\n    @return boolean\n    @public\n    @hide\n   */\n  equals(model) {\n    return this.toString() === model.toString();\n  }\n}\n\nModel.extend = extend;\nModel.findBelongsToAssociation = function (associationType) {\n  return this.prototype.belongsToAssociations[associationType];\n};\n\nexport default Model;\n","import Model from \"./orm/model\";\nimport Collection from \"./orm/collection\";\nimport PolymorphicCollection from \"./orm/polymorphic-collection\";\nimport extend from \"./utils/extend\";\nimport { camelize } from \"./utils/inflector\";\nimport assert from \"./assert\";\nimport isFunction from \"lodash.isfunction\";\nimport isEmpty from \"lodash.isempty\";\nimport get from \"lodash.get\";\nimport flatten from \"lodash.flatten\";\nimport compact from \"lodash.compact\";\nimport uniqBy from \"lodash.uniqby\";\n\n/**\n  Serializers are responsible for formatting your route handler's response.\n\n  The application serializer will apply to every response. To make specific customizations, define per-model serializers.\n\n  ```js\n  import { Server, RestSerializer } from 'miragejs';\n\n  new Server({\n    serializers: {\n      application: RestSerializer,\n      user: RestSerializer.extend({\n        // user-specific customizations\n      })\n    }\n  })\n  ```\n\n  Any Model or Collection returned from a route handler will pass through the serializer layer. Highest priority will be given to a model-specific serializer, then the application serializer, then the default serializer.\n\n  Mirage ships with three named serializers:\n\n  - **JSONAPISerializer**, to simulate JSON:API compliant API servers:\n\n    ```js\n    import { Server, JSONAPISerializer } from 'miragejs';\n\n    new Server({\n      serializers: {\n        application: JSONAPISerializer\n      }\n    })\n    ```\n\n  - **ActiveModelSerializer**, to mock Rails APIs that use AMS-style responses:\n\n    ```js\n    import { Server, ActiveModelSerializer } from 'miragejs';\n\n    new Server({\n      serializers: {\n        application: JSONAPISerializer\n      }\n    })\n    ```\n\n  - **RestSerializer**, a good starting point for many generic REST APIs:\n\n    ```js\n    import { Server, RestSerializer } from 'miragejs';\n\n    new Server({\n      serializers: {\n        application: JSONAPISerializer\n      }\n    })\n    ```\n\n  Additionally, Mirage has a basic Serializer class which you can customize using the hooks documented below:\n\n  ```js\n  import { Server, Serializer } from 'miragejs';\n\n  new Server({\n    serializers: {\n      application: JSONAPISerializer\n    }\n  })\n  ```\n\n  When writing model-specific serializers, remember to extend from your application serializer so shared logic is used by your model-specific classes:\n\n  ```js\n  import { Server, Serializer } from 'miragejs';\n\n  const ApplicationSerializer = Serializer.extend()\n\n  new Server({\n    serializers: {\n      application: ApplicationSerializer,\n      blogPost: ApplicationSerializer.extend({\n        include: ['comments']\n      })\n    }\n  })\n  ```\n\n  @class Serializer\n  @constructor\n  @public\n*/\nclass Serializer {\n  constructor(registry, type, request = {}) {\n    this.registry = registry;\n    this.type = type;\n    this.request = request;\n\n    /**\n      Use this property on a model serializer to whitelist attributes that will be used in your JSON payload.\n\n      For example, if you had a `blog-post` model in your database that looked like\n\n      ```\n      {\n        id: 1,\n        title: 'Lorem ipsum',\n        createdAt: '2014-01-01 10:00:00',\n        updatedAt: '2014-01-03 11:42:12'\n      }\n      ```\n\n      and you just wanted `id` and `title`, you could write\n\n      ```js\n      Serializer.extend({\n        attrs: ['id', 'title']\n      });\n      ```\n\n      and the payload would look like\n\n      ```\n      {\n        id: 1,\n        title: 'Lorem ipsum'\n      }\n      ```\n\n      @property attrs\n      @public\n    */\n    this.attrs = this.attrs || undefined; // this is just here so I can add the doc comment. Better way?\n\n    /**\n      Use this property on a model serializer to specify related models you'd like to include in your JSON payload. (These can be considered default server-side includes.)\n\n      For example, if you had an `author` with many `blog-post`s and you wanted to sideload these, specify so in the `include` key:\n\n      ```js\n      new Server({\n        models: {\n          author: Model.extend({\n            blogPosts: hasMany()\n          })\n        },\n        serializers: {\n          author: Serializer.extend({\n            include: ['blogPosts']\n          });\n        }\n      })\n      ```\n\n      Now a response to a request for an author would look like this:\n\n      ```\n      GET /authors/1\n\n      {\n        author: {\n          id: 1,\n          name: 'Link',\n          blogPostIds: [1, 2]\n        },\n        blogPosts: [\n          {id: 1, authorId: 1, title: 'Lorem'},\n          {id: 2, authorId: 1, title: 'Ipsum'}\n        ]\n      }\n      ```\n\n      You can also define `include` as a function so it can be determined dynamically.\n      \n      For example, you could conditionally include a relationship based on an `include` query parameter:\n\n      ```js\n      // Include blog posts for a GET to /authors/1?include=blogPosts\n      \n      Serializer.extend({\n        include: function(request) {\n          if (request.queryParams.include === \"blogPosts\") {\n            return ['blogPosts'];\n          } else {\n            return [];\n          }\n        }\n      });\n      ```\n\n      **Query param includes for JSONAPISerializer**\n\n      The JSONAPISerializer supports the use of `include` query parameter to return compound documents out of the box.\n\n      For example, if your app makes the following request\n\n      ```\n      GET /api/authors?include=blogPosts\n      ```\n\n      the `JSONAPISerializer` will inspect the query params of the request, see that the blogPosts relationship is present, and then proceed as if this relationship was specified directly in the include: [] array on the serializer itself.\n\n      Note that, in accordance with the spec, Mirage gives precedence to an ?include query param over a default include: [] array that you might have specified directly on the serializer. Default includes will still be in effect, however, if a request does not have an ?include query param.\n\n      Also note that default includes specified with the `include: []` array can only take a single model; they cannot take dot-separated paths to nested relationships.\n\n      If you'd like to set a default dot-separated (nested) include path for a resource, you have to do it at the route level by setting a default value for `request.queryParams`:\n\n      ```js\n      this.get('/users', function(schema, request) => {\n        request.queryParams = request.queryParams || {};\n        if (!request.queryParams.include) {\n          request.queryParams.include = 'blog-posts.comments';\n        }\n\n        // rest of route handler logic\n      });\n      ```\n\n      @property include\n      @public\n    */\n    this.include = this.include || []; // this is just here so I can add the doc comment. Better way?\n\n    /**\n      Set whether your JSON response should have a root key in it.\n\n      *Doesn't apply to JSONAPISerializer.*\n\n      Defaults to true, so a request for an author looks like:\n\n      ```\n      GET /authors/1\n\n      {\n        author: {\n          id: 1,\n          name: 'Link'\n        }\n      }\n      ```\n\n      Setting `root` to false disables this:\n\n      ```js\n      Serializer.extend({\n        root: false\n      });\n      ```\n\n      Now the response looks like:\n\n      ```\n      GET /authors/1\n\n      {\n        id: 1,\n        name: 'Link'\n      }\n      ```\n\n      @property root\n      @public\n    */\n    this.root = this.root || undefined; // this is just here so I can add the doc comment. Better way?\n\n    /**\n      Set whether related models should be embedded or sideloaded.\n\n      *Doesn't apply to JSONAPISerializer.*\n\n      By default this false, so relationships are sideloaded:\n\n      ```\n      GET /authors/1\n\n      {\n        author: {\n          id: 1,\n          name: 'Link',\n          blogPostIds: [1, 2]\n        },\n        blogPosts: [\n          { id: 1, authorId: 1, title: 'Lorem' },\n          { id: 2, authorId: 1, title: 'Ipsum' }\n        ]\n      }\n      ```\n\n      Setting `embed` to true will embed related records:\n\n      ```js\n      Serializer.extend({\n        embed: true\n      });\n      ```\n\n      Now the response looks like:\n\n      ```\n      GET /authors/1\n\n      {\n        author: {\n          id: 1,\n          name: 'Link',\n          blogPosts: [\n            { id: 1, authorId: 1, title: 'Lorem' },\n            { id: 2, authorId: 1, title: 'Ipsum' }\n          ]\n        }\n      }\n      ```\n    */\n    this.embed = this.embed || undefined; // this is just here so I can add the doc comment. Better way?\n\n    /**\n      Use this to define how your serializer handles serializing relationship keys. It can take one of three values:\n\n      - `included`, which is the default, will serialize the ids of a relationship if that relationship is included (sideloaded) along with the model or collection in the response\n      - `always` will always serialize the ids of all relationships for the model or collection in the response\n      - `never` will never serialize the ids of relationships for the model or collection in the response\n\n      @property serializeIds\n      @public\n    */\n    this.serializeIds = this.serializeIds || undefined; // this is just here so I can add the doc comment. Better way?\n  }\n\n  /**\n    Override this method to implement your own custom serialize function. *response* is whatever was returned from your route handler, and *request* is the Pretender request object.\n\n    Returns a plain JavaScript object or array, which Mirage uses as the response data to your app's XHR request.\n\n    You can also override this method, call super, and manipulate the data before Mirage responds with it. This is a great place to add metadata, or for one-off operations that don't fit neatly into any of Mirage's other abstractions:\n\n    ```js\n    serialize(object, request) {\n      // This is how to call super, as Mirage borrows [Backbone's implementation of extend](http://backbonejs.org/#Model-extend)\n      let json = Serializer.prototype.serialize.apply(this, arguments);\n\n      // Add metadata, sort parts of the response, etc.\n\n      return json;\n    }\n    ```\n\n    @param primaryResource\n    @param request\n    @return { Object } the json response\n   */\n  serialize(primaryResource /* , request */) {\n    this.primaryResource = primaryResource;\n\n    return this.buildPayload(primaryResource);\n  }\n\n  /**\n    This method is used by the POST and PUT shorthands. These shorthands expect a valid JSON:API document as part of the request, so that they know how to create or update the appropriate resouce. The *normalize* method allows you to transform your request body into a JSON:API document, which lets you take advantage of the shorthands when you otherwise may not be able to.\n\n    Note that this method is a noop if you're using JSON:API already, since request payloads sent along with POST and PUT requests will already be in the correct format.\n\n    Take a look at the included `ActiveModelSerializer`'s normalize method for an example.\n\n    @method normalize\n    @param json\n    @public\n   */\n  normalize(json) {\n    return json;\n  }\n\n  buildPayload(primaryResource, toInclude, didSerialize, json) {\n    if (!primaryResource && isEmpty(toInclude)) {\n      return json;\n    } else if (primaryResource) {\n      let [resourceHash, newIncludes] = this.getHashForPrimaryResource(\n        primaryResource\n      );\n      let newDidSerialize = this.isCollection(primaryResource)\n        ? primaryResource.models\n        : [primaryResource];\n\n      return this.buildPayload(\n        undefined,\n        newIncludes,\n        newDidSerialize,\n        resourceHash\n      );\n    } else {\n      let nextIncludedResource = toInclude.shift();\n      let [resourceHash, newIncludes] = this.getHashForIncludedResource(\n        nextIncludedResource\n      );\n\n      let newToInclude = newIncludes\n        .filter((resource) => {\n          return !didSerialize\n            .map((m) => m.toString())\n            .includes(resource.toString());\n        })\n        .concat(toInclude);\n      let newDidSerialize = (this.isCollection(nextIncludedResource)\n        ? nextIncludedResource.models\n        : [nextIncludedResource]\n      ).concat(didSerialize);\n      let newJson = this.mergePayloads(json, resourceHash);\n\n      return this.buildPayload(\n        undefined,\n        newToInclude,\n        newDidSerialize,\n        newJson\n      );\n    }\n  }\n\n  getHashForPrimaryResource(resource) {\n    let [hash, addToIncludes] = this.getHashForResource(resource);\n    let hashWithRoot;\n\n    if (this.root) {\n      assert(\n        !(resource instanceof PolymorphicCollection),\n        `The base Serializer class cannot serialize a top-level PolymorphicCollection when root is true, since PolymorphicCollections have no type.`\n      );\n\n      let serializer = this.serializerFor(resource.modelName);\n      let rootKey = serializer.keyForResource(resource);\n      hashWithRoot = { [rootKey]: hash };\n    } else {\n      hashWithRoot = hash;\n    }\n\n    return [hashWithRoot, addToIncludes];\n  }\n\n  getHashForIncludedResource(resource) {\n    let hashWithRoot, addToIncludes;\n\n    if (resource instanceof PolymorphicCollection) {\n      hashWithRoot = {};\n      addToIncludes = resource.models;\n    } else {\n      let serializer = this.serializerFor(resource.modelName);\n      let [hash, newModels] = serializer.getHashForResource(resource);\n\n      // Included resources always have a root, and are always pushed to an array.\n      let rootKey = serializer.keyForRelationship(resource.modelName);\n      hashWithRoot = Array.isArray(hash)\n        ? { [rootKey]: hash }\n        : { [rootKey]: [hash] };\n      addToIncludes = newModels;\n    }\n\n    return [hashWithRoot, addToIncludes];\n  }\n\n  getHashForResource(\n    resource,\n    removeForeignKeys = false,\n    didSerialize = {},\n    lookupSerializer = false\n  ) {\n    let hash, serializer;\n\n    if (!lookupSerializer) {\n      serializer = this; // this is used for embedded responses\n    }\n\n    // PolymorphicCollection lacks a modelName, but is dealt with in the map\n    // by looking up the serializer on a per-model basis\n    if (lookupSerializer && resource.modelName) {\n      serializer = this.serializerFor(resource.modelName);\n    }\n\n    if (this.isModel(resource)) {\n      hash = serializer._hashForModel(\n        resource,\n        removeForeignKeys,\n        didSerialize\n      );\n    } else {\n      hash = resource.models.map((m) => {\n        let modelSerializer = serializer;\n\n        if (!modelSerializer) {\n          // Can't get here if lookupSerializer is false, so look it up\n          modelSerializer = this.serializerFor(m.modelName);\n        }\n\n        return modelSerializer._hashForModel(\n          m,\n          removeForeignKeys,\n          didSerialize\n        );\n      });\n    }\n\n    if (this.embed) {\n      return [hash, []];\n    } else {\n      let addToIncludes = uniqBy(\n        compact(\n          flatten(\n            serializer.getKeysForIncluded().map((key) => {\n              if (this.isCollection(resource)) {\n                return resource.models.map((m) => m[key]);\n              } else {\n                return resource[key];\n              }\n            })\n          )\n        ),\n        (m) => m.toString()\n      );\n      return [hash, addToIncludes];\n    }\n  }\n\n  /*\n    Merges new resource hash into json. If json already has root key,\n    pushes value of resourceHash onto that key.\n\n    For example,\n\n        json = {\n          post: { id: 1, title: 'Lorem Ipsum', comment_ids: [1, 3] },\n          comments: [\n            { id: 1, text: 'foo' }\n          ]\n        };\n\n        resourceHash = {\n          comments: [\n            { id: 2, text: 'bar' }\n          ]\n        };\n\n    would yield\n\n        {\n          post: { id: 1, title: 'Lorem Ipsum', comment_ids: [1, 3] },\n          comments: [\n            { id: 1, text: 'foo' },\n            { id: 2, text: 'bar' }\n          ]\n        };\n\n  */\n  mergePayloads(json, resourceHash) {\n    let newJson;\n    let [resourceHashKey] = Object.keys(resourceHash);\n\n    if (json[resourceHashKey]) {\n      newJson = json;\n      newJson[resourceHashKey] = json[resourceHashKey].concat(\n        resourceHash[resourceHashKey]\n      );\n    } else {\n      newJson = Object.assign(json, resourceHash);\n    }\n\n    return newJson;\n  }\n\n  keyForResource(resource) {\n    let { modelName } = resource;\n    return this.isModel(resource)\n      ? this.keyForModel(modelName)\n      : this.keyForCollection(modelName);\n  }\n\n  /**\n    Used to define a custom key when serializing a primary model of modelName *modelName*. For example, the default Serializer will return something like the following:\n\n    ```\n    GET /blogPosts/1\n\n    {\n      blogPost: {\n        id: 1,\n        title: 'Lorem ipsum'\n      }\n    }\n    ```\n\n    If your API uses hyphenated keys, you could overwrite `keyForModel`:\n\n    ```js\n    // serializers/application.js\n    export default Serializer.extend({\n      keyForModel(modelName) {\n        return hyphenate(modelName);\n      }\n    });\n    ```\n\n    Now the response will look like\n\n    ```\n    {\n      'blog-post': {\n        id: 1,\n        title: 'Lorem ipsum'\n      }\n    }\n    ```\n\n    @method keyForModel\n    @param modelName\n    @public\n   */\n  keyForModel(modelName) {\n    return camelize(modelName);\n  }\n\n  /**\n    Used to customize the key when serializing a primary collection. By default this pluralizes the return value of `keyForModel`.\n\n    For example, by default the following request may look like:\n\n    ```\n    GET /blogPosts\n\n    {\n      blogPosts: [\n        {\n          id: 1,\n          title: 'Lorem ipsum'\n        },\n        ...\n      ]\n    }\n    ```\n\n    If your API hyphenates keys, you could overwrite `keyForCollection`:\n\n    ```js\n    // serializers/application.js\n    export default Serializer.extend({\n      keyForCollection(modelName) {\n        return this._container.inflector.pluralize(dasherize(modelName));\n      }\n    });\n    ```\n\n    Now the response would look like:\n\n    ```\n    {\n      'blog-posts': [\n        {\n          id: 1,\n          title: 'Lorem ipsum'\n        },\n        ...\n      ]\n    }\n    ```\n\n    @method keyForCollection\n    @param modelName\n    @public\n   */\n  keyForCollection(modelName) {\n    return this._container.inflector.pluralize(this.keyForModel(modelName));\n  }\n\n  _hashForModel(model, removeForeignKeys, didSerialize = {}) {\n    let attrs = this._attrsForModel(model);\n\n    if (removeForeignKeys) {\n      model.fks.forEach((fk) => {\n        delete attrs[fk];\n      });\n    }\n\n    if (this.embed) {\n      let newDidSerialize = Object.assign({}, didSerialize);\n      newDidSerialize[model.modelName] = newDidSerialize[model.modelName] || {};\n      newDidSerialize[model.modelName][model.id] = true;\n\n      this.getKeysForIncluded().forEach((key) => {\n        let associatedResource = model[key];\n        if (\n          associatedResource &&\n          !get(\n            newDidSerialize,\n            `${associatedResource.modelName}.${associatedResource.id}`\n          )\n        ) {\n          let [associatedResourceHash] = this.getHashForResource(\n            associatedResource,\n            true,\n            newDidSerialize,\n            true\n          );\n          let formattedKey = this.keyForEmbeddedRelationship(key);\n          attrs[formattedKey] = associatedResourceHash;\n\n          if (this.isModel(associatedResource)) {\n            let fk = `${camelize(key)}Id`;\n            delete attrs[fk];\n          }\n        }\n      });\n\n      return attrs;\n    } else {\n      return this._maybeAddAssociationIds(model, attrs);\n    }\n  }\n\n  /**\n    @method _attrsForModel\n    @param model\n    @private\n    @hide\n   */\n  _attrsForModel(model) {\n    let attrs = {};\n\n    if (this.attrs) {\n      attrs = this.attrs.reduce((memo, attr) => {\n        memo[attr] = model[attr];\n        return memo;\n      }, {});\n    } else {\n      attrs = Object.assign(attrs, model.attrs);\n    }\n\n    // Remove fks\n    model.fks.forEach((key) => delete attrs[key]);\n\n    return this._formatAttributeKeys(attrs);\n  }\n\n  /**\n    @method _maybeAddAssociationIds\n    @param model\n    @param attrs\n    @private\n    @hide\n   */\n  _maybeAddAssociationIds(model, attrs) {\n    let newHash = Object.assign({}, attrs);\n\n    if (this.serializeIds === \"always\") {\n      model.associationKeys.forEach((key) => {\n        let resource = model[key];\n        let association = model.associationFor(key);\n\n        if (this.isCollection(resource)) {\n          let formattedKey = this.keyForRelationshipIds(key);\n          newHash[formattedKey] =\n            model[`${this._container.inflector.singularize(key)}Ids`];\n        } else if (this.isModel(resource) && association.isPolymorphic) {\n          let formattedTypeKey = this.keyForPolymorphicForeignKeyType(key);\n          let formattedIdKey = this.keyForPolymorphicForeignKeyId(key);\n\n          newHash[formattedTypeKey] = model[`${key}Id`].type;\n          newHash[formattedIdKey] = model[`${key}Id`].id;\n        } else if (resource) {\n          let formattedKey = this.keyForForeignKey(key);\n          newHash[formattedKey] = model[`${key}Id`];\n        }\n      });\n    } else if (this.serializeIds === \"included\") {\n      this.getKeysForIncluded().forEach((key) => {\n        let resource = model[key];\n        let association = model.associationFor(key);\n\n        if (this.isCollection(resource)) {\n          let formattedKey = this.keyForRelationshipIds(key);\n\n          newHash[formattedKey] =\n            model[`${this._container.inflector.singularize(key)}Ids`];\n        } else if (this.isModel(resource) && association.isPolymorphic) {\n          let formattedTypeKey = this.keyForPolymorphicForeignKeyType(key);\n          let formattedIdKey = this.keyForPolymorphicForeignKeyId(key);\n\n          newHash[formattedTypeKey] = model[`${key}Id`].type;\n          newHash[formattedIdKey] = model[`${key}Id`].id;\n        } else if (this.isModel(resource)) {\n          let formattedKey = this.keyForForeignKey(key);\n\n          newHash[formattedKey] = model[`${key}Id`];\n        }\n      });\n    }\n\n    return newHash;\n  }\n\n  /**\n    Used to customize how a model's attribute is formatted in your JSON payload.\n\n    By default, model attributes are camelCase:\n\n    ```\n    GET /authors/1\n\n    {\n      author: {\n        firstName: 'Link',\n        lastName: 'The WoodElf'\n      }\n    }\n    ```\n\n    If your API expects snake case, you could write the following:\n\n    ```js\n    // serializers/application.js\n    export default Serializer.extend({\n      keyForAttribute(attr) {\n        return underscore(attr);\n      }\n    });\n    ```\n\n    Now the response would look like:\n\n    ```\n    {\n      author: {\n        first_name: 'Link',\n        last_name: 'The WoodElf'\n      }\n    }\n    ```\n\n    @method keyForAttribute\n    @param attr\n    @public\n   */\n  keyForAttribute(attr) {\n    return attr;\n  }\n\n  /**\n    Use this hook to format the key for collections related to this model. *modelName* is the named parameter for the relationship.\n\n    For example, if you're serializing an `author` that\n    sideloads many `blogPosts`, the default response will look like:\n\n    ```\n    {\n      author: {...},\n      blogPosts: [...]\n    }\n    ```\n\n    Overwrite `keyForRelationship` to format this key:\n\n    ```js\n    // serializers/application.js\n    export default Serializer.extend({\n      keyForRelationship(modelName) {\n        return underscore(modelName);\n      }\n    });\n    ```\n\n    Now the response will look like this:\n\n    ```\n    {\n      author: {...},\n      blog_posts: [...]\n    }\n    ```\n\n    @method keyForRelationship\n    @param modelName\n    @public\n   */\n  keyForRelationship(modelName) {\n    return camelize(this._container.inflector.pluralize(modelName));\n  }\n\n  /**\n    Like `keyForRelationship`, but for embedded relationships.\n\n    @method keyForEmbeddedRelationship\n    @param attributeName\n    @public\n   */\n  keyForEmbeddedRelationship(attributeName) {\n    return camelize(attributeName);\n  }\n\n  /**\n    Use this hook to format the key for the IDS of a `hasMany` relationship\n    in this model's JSON representation.\n\n    For example, if you're serializing an `author` that\n    sideloads many `blogPosts`, by default your `author` JSON would include a `blogPostIds` key:\n\n    ```\n    {\n      author: {\n        id: 1,\n        blogPostIds: [1, 2, 3]\n      },\n      blogPosts: [...]\n    }\n    ```\n\n    Overwrite `keyForRelationshipIds` to format this key:\n\n    ```js\n    // serializers/application.js\n    export default Serializer.extend({\n      keyForRelationshipIds(relationship) {\n        return underscore(relationship) + '_ids';\n      }\n    });\n    ```\n\n    Now the response will look like:\n\n    ```\n    {\n      author: {\n        id: 1,\n        blog_post_ids: [1, 2, 3]\n      },\n      blogPosts: [...]\n    }\n    ```\n\n    @method keyForRelationshipIds\n    @param modelName\n    @public\n   */\n  keyForRelationshipIds(relationshipName) {\n    return `${this._container.inflector.singularize(\n      camelize(relationshipName)\n    )}Ids`;\n  }\n\n  /**\n    Like `keyForRelationshipIds`, but for `belongsTo` relationships.\n\n    For example, if you're serializing a `blogPost` that sideloads one `author`,\n    your `blogPost` JSON would include a `authorId` key:\n\n    ```\n    {\n      blogPost: {\n        id: 1,\n        authorId: 1\n      },\n      author: ...\n    }\n    ```\n\n    Overwrite `keyForForeignKey` to format this key:\n\n    ```js\n    // serializers/application.js\n    export default Serializer.extend({\n      keyForForeignKey(relationshipName) {\n        return underscore(relationshipName) + '_id';\n      }\n    });\n    ```\n\n    Now the response will look like:\n\n    ```js\n    {\n      blogPost: {\n        id: 1,\n        author_id: 1\n      },\n      author: ...\n    }\n    ```\n\n    @method keyForForeignKey\n    @param relationshipName\n    @public\n   */\n  keyForForeignKey(relationshipName) {\n    return `${camelize(relationshipName)}Id`;\n  }\n\n  /**\n    Polymorphic relationships are represented with type-id pairs.\n\n    Given the following model\n\n    ```js\n    Model.extend({\n      commentable: belongsTo({ polymorphic: true })\n    });\n    ```\n\n    the default Serializer would produce\n\n    ```js\n    {\n      comment: {\n        id: 1,\n        commentableType: 'post',\n        commentableId: '1'\n      }\n    }\n    ```\n\n    This hook controls how the `id` field (`commentableId` in the above example)\n    is serialized. By default it camelizes the relationship and adds `Id` as a suffix.\n\n    @method keyForPolymorphicForeignKeyId\n    @param {String} relationshipName\n    @return {String}\n    @public\n  */\n  keyForPolymorphicForeignKeyId(relationshipName) {\n    return `${camelize(relationshipName)}Id`;\n  }\n\n  /**\n    Polymorphic relationships are represented with type-id pairs.\n\n    Given the following model\n\n    ```js\n    Model.extend({\n      commentable: belongsTo({ polymorphic: true })\n    });\n    ```\n\n    the default Serializer would produce\n\n    ```js\n    {\n      comment: {\n        id: 1,\n        commentableType: 'post',\n        commentableId: '1'\n      }\n    }\n    ```\n\n    This hook controls how the `type` field (`commentableType` in the above example)\n    is serialized. By default it camelizes the relationship and adds `Type` as a suffix.\n\n    @method keyForPolymorphicForeignKeyType\n    @param {String} relationshipName\n    @return {String}\n    @public\n  */\n  keyForPolymorphicForeignKeyType(relationshipName) {\n    return `${camelize(relationshipName)}Type`;\n  }\n\n  /**\n    @method isModel\n    @param object\n    @return {Boolean}\n    @public\n    @hide\n   */\n  isModel(object) {\n    return object instanceof Model;\n  }\n\n  /**\n    @method isCollection\n    @param object\n    @return {Boolean}\n    @public\n    @hide\n   */\n  isCollection(object) {\n    return (\n      object instanceof Collection || object instanceof PolymorphicCollection\n    );\n  }\n\n  /**\n    @method isModelOrCollection\n    @param object\n    @return {Boolean}\n    @public\n    @hide\n   */\n  isModelOrCollection(object) {\n    return this.isModel(object) || this.isCollection(object);\n  }\n\n  /**\n    @method serializerFor\n    @param type\n    @public\n    @hide\n   */\n  serializerFor(type) {\n    return this.registry.serializerFor(type);\n  }\n\n  getKeysForIncluded() {\n    return isFunction(this.include)\n      ? this.include(this.request, this.primaryResource)\n      : this.include;\n  }\n\n  /**\n    A reference to the schema instance.\n\n    Useful to reference registered schema information, for example in a Serializer's include hook to include all a resource's associations:\n\n    ```js\n    Serializer.extend({\n      include(request, resource) {\n        return Object.keys(this.schema.associationsFor(resource.modelName));\n      }\n    })\n    ```\n\n    @property\n    @type {Object}\n    @public\n  */\n  get schema() {\n    return this.registry.schema;\n  }\n\n  /**\n    @method _formatAttributeKeys\n    @param attrs\n    @private\n    @hide\n   */\n  _formatAttributeKeys(attrs) {\n    let formattedAttrs = {};\n\n    for (let key in attrs) {\n      let formattedKey = this.keyForAttribute(key);\n      formattedAttrs[formattedKey] = attrs[key];\n    }\n\n    return formattedAttrs;\n  }\n\n  getCoalescedIds(/* request */) {}\n}\n\n// Defaults\nSerializer.prototype.include = [];\nSerializer.prototype.root = true;\nSerializer.prototype.embed = false;\nSerializer.prototype.serializeIds = \"included\"; // can be 'included', 'always', or 'never'\n\nSerializer.extend = extend;\n\nexport default Serializer;\n","import Serializer from \"../serializer\";\nimport { dasherize, camelize } from \"../utils/inflector\";\nimport assert from \"../assert\";\nimport get from \"lodash.get\";\nimport flatten from \"lodash.flatten\";\nimport compact from \"lodash.compact\";\nimport uniqBy from \"lodash.uniqby\";\nimport isEmpty from \"lodash.isempty\";\n/**\n  The JSONAPISerializer. Subclass of Serializer.\n\n  @class JSONAPISerializer\n  @constructor\n  @public\n */\nclass JSONAPISerializer extends Serializer {\n  constructor() {\n    super(...arguments);\n\n    /**\n      By default, JSON:API's linkage data is only added for relationships that are being included in the current request.\n\n      That means given an `author` model with a `posts` relationship, a GET request to /authors/1 would return a JSON:API document with an empty `relationships` hash:\n\n      ```js\n      {\n        data: {\n          type: 'authors',\n          id: '1',\n          attributes: { ... }\n        }\n      }\n      ```\n\n      but a request to GET /authors/1?include=posts would have linkage data added (in addition to the included resources):\n\n      ```js\n      {\n        data: {\n          type: 'authors',\n          id: '1',\n          attributes: { ... },\n          relationships: {\n            data: [\n              { type: 'posts', id: '1' },\n              { type: 'posts', id: '2' },\n              { type: 'posts', id: '3' }\n            ]\n          }\n        },\n        included: [ ... ]\n      }\n      ```\n\n      To add the linkage data for all relationships, you could set `alwaysIncludeLinkageData` to `true`:\n\n      ```js\n      JSONAPISerializer.extend({\n        alwaysIncludeLinkageData: true\n      });\n      ```\n\n      Then, a GET to /authors/1 would respond with\n\n      ```js\n      {\n        data: {\n          type: 'authors',\n          id: '1',\n          attributes: { ... },\n          relationships: {\n            posts: {\n              data: [\n                { type: 'posts', id: '1' },\n                { type: 'posts', id: '2' },\n                { type: 'posts', id: '3' }\n              ]\n            }\n          }\n        }\n      }\n      ```\n\n      even though the related `posts` are not included in the same document.\n\n      You can also use the `links` method (on the Serializer base class) to add relationship links (which will always be added regardless of the relationship is being included document), or you could use `shouldIncludeLinkageData` for more granular control.\n\n      For more background on the behavior of this API, see [this blog post](http://www.ember-cli-mirage.com/blog/changing-mirages-default-linkage-data-behavior-1475).\n\n      @property alwaysIncludeLinkageData\n      @type {Boolean}\n      @public\n    */\n    this.alwaysIncludeLinkageData = this.alwaysIncludeLinkageData || undefined; // this is just here so I can add the doc comment. Better way?\n  }\n\n  // Don't think this is used?\n  keyForModel(modelName) {\n    return dasherize(modelName);\n  }\n\n  // Don't think this is used?\n  keyForCollection(modelName) {\n    return dasherize(modelName);\n  }\n\n  /**\n    Used to customize the key for an attribute. By default, compound attribute names are dasherized.\n\n    For example, the JSON:API document for a `post` model with a `commentCount` attribute would be:\n\n    ```js\n    {\n      data: {\n        id: 1,\n        type: 'posts',\n        attributes: {\n          'comment-count': 28\n        }\n      }\n    }\n    ```\n\n    @method keyForAttribute\n    @param {String} attr\n    @return {String}\n    @public\n  */\n  keyForAttribute(attr) {\n    return dasherize(attr);\n  }\n\n  /**\n    Used to customize the key for a relationships. By default, compound relationship names are dasherized.\n\n    For example, the JSON:API document for an `author` model with a `blogPosts` relationship would be:\n\n    ```js\n    {\n      data: {\n        id: 1,\n        type: 'author',\n        attributes: {\n          ...\n        },\n        relationships: {\n          'blog-posts': {\n            ...\n          }\n        }\n      }\n    }\n    ```\n\n    @method keyForRelationship\n    @param {String} key\n    @return {String}\n    @public\n  */\n  keyForRelationship(key) {\n    return dasherize(key);\n  }\n\n  /**\n    Use this hook to add top-level `links` data to JSON:API resource objects. The argument is the model being serialized.\n\n    ```js\n    // serializers/author.js\n    import { JSONAPISerializer } from 'miragejs';\n\n    export default JSONAPISerializer.extend({\n\n      links(author) {\n        return {\n          'posts': {\n            related: `/api/authors/${author.id}/posts`\n          }\n        };\n      }\n\n    });\n    ```\n\n    @method links\n    @param model\n  */\n  links() {}\n\n  getHashForPrimaryResource(resource) {\n    this._createRequestedIncludesGraph(resource);\n\n    let resourceHash = this.getHashForResource(resource);\n    let hashWithRoot = { data: resourceHash };\n    let addToIncludes = this.getAddToIncludesForResource(resource);\n\n    return [hashWithRoot, addToIncludes];\n  }\n\n  getHashForIncludedResource(resource) {\n    let serializer = this.serializerFor(resource.modelName);\n    let hash = serializer.getHashForResource(resource);\n    let hashWithRoot = { included: this.isModel(resource) ? [hash] : hash };\n    let addToIncludes = [];\n\n    if (!this.hasQueryParamIncludes()) {\n      addToIncludes = this.getAddToIncludesForResource(resource);\n    }\n\n    return [hashWithRoot, addToIncludes];\n  }\n\n  getHashForResource(resource) {\n    let hash;\n\n    if (this.isModel(resource)) {\n      hash = this.getResourceObjectForModel(resource);\n    } else {\n      hash = resource.models.map((m) => this.getResourceObjectForModel(m));\n    }\n\n    return hash;\n  }\n\n  /*\n    Returns a flat unique list of resources that need to be added to includes\n  */\n  getAddToIncludesForResource(resource) {\n    let relationshipPaths;\n\n    if (this.hasQueryParamIncludes()) {\n      relationshipPaths = this.request.queryParams.include.split(\",\");\n    } else {\n      let serializer = this.serializerFor(resource.modelName);\n      relationshipPaths = serializer.getKeysForIncluded();\n    }\n\n    return this.getAddToIncludesForResourceAndPaths(\n      resource,\n      relationshipPaths\n    );\n  }\n\n  getAddToIncludesForResourceAndPaths(resource, relationshipPaths) {\n    let includes = [];\n\n    relationshipPaths.forEach((path) => {\n      let relationshipNames = path.split(\".\");\n\n      let newIncludes = this.getIncludesForResourceAndPath(\n        resource,\n        ...relationshipNames\n      );\n      includes.push(newIncludes);\n    });\n\n    return uniqBy(compact(flatten(includes)), (m) => m.toString());\n  }\n\n  getIncludesForResourceAndPath(resource, ...names) {\n    let nameForCurrentResource = camelize(names.shift());\n    let includes = [];\n    let modelsToAdd = [];\n\n    if (this.isModel(resource)) {\n      let relationship = resource[nameForCurrentResource];\n\n      if (this.isModel(relationship)) {\n        modelsToAdd = [relationship];\n      } else if (this.isCollection(relationship)) {\n        modelsToAdd = relationship.models;\n      }\n    } else {\n      resource.models.forEach((model) => {\n        let relationship = model[nameForCurrentResource];\n\n        if (this.isModel(relationship)) {\n          modelsToAdd.push(relationship);\n        } else if (this.isCollection(relationship)) {\n          modelsToAdd = modelsToAdd.concat(relationship.models);\n        }\n      });\n    }\n\n    includes = includes.concat(modelsToAdd);\n\n    if (names.length) {\n      modelsToAdd.forEach((model) => {\n        includes = includes.concat(\n          this.getIncludesForResourceAndPath(model, ...names)\n        );\n      });\n    }\n\n    return includes;\n  }\n\n  getResourceObjectForModel(model) {\n    let attrs = this._attrsForModel(model, true);\n    delete attrs.id;\n\n    let hash = {\n      type: this.typeKeyForModel(model),\n      id: model.id,\n      attributes: attrs,\n    };\n\n    return this._maybeAddRelationshipsToResourceObjectForModel(hash, model);\n  }\n\n  _maybeAddRelationshipsToResourceObjectForModel(hash, model) {\n    const relationships = {};\n\n    model.associationKeys.forEach((key) => {\n      let relationship = model[key];\n      let relationshipKey = this.keyForRelationship(key);\n      let relationshipHash = {};\n\n      if (this.hasLinksForRelationship(model, key)) {\n        let serializer = this.serializerFor(model.modelName);\n        let links = serializer.links(model);\n        relationshipHash.links = links[key];\n      }\n\n      if (\n        this.alwaysIncludeLinkageData ||\n        this.shouldIncludeLinkageData(key, model) ||\n        this._relationshipIsIncludedForModel(key, model)\n      ) {\n        let data = null;\n        if (this.isModel(relationship)) {\n          data = {\n            type: this.typeKeyForModel(relationship),\n            id: relationship.id,\n          };\n        } else if (this.isCollection(relationship)) {\n          data = relationship.models.map((model) => {\n            return {\n              type: this.typeKeyForModel(model),\n              id: model.id,\n            };\n          });\n        }\n        relationshipHash.data = data;\n      }\n\n      if (!isEmpty(relationshipHash)) {\n        relationships[relationshipKey] = relationshipHash;\n      }\n    });\n\n    if (!isEmpty(relationships)) {\n      hash.relationships = relationships;\n    }\n\n    return hash;\n  }\n\n  hasLinksForRelationship(model, relationshipKey) {\n    let serializer = this.serializerFor(model.modelName);\n    let links = serializer.links && serializer.links(model);\n\n    return links && links[relationshipKey] != null;\n  }\n\n  /*\n    This code (and a lot of this serializer) need to be re-worked according to\n    the graph logic...\n  */\n  _relationshipIsIncludedForModel(relationshipKey, model) {\n    if (this.hasQueryParamIncludes()) {\n      let graph = this.request._includesGraph;\n      let graphKey = this._graphKeyForModel(model);\n\n      // Find the resource in the graph\n      let graphResource;\n\n      // Check primary data\n      if (graph.data[graphKey]) {\n        graphResource = graph.data[graphKey];\n\n        // Check includes\n      } else if (\n        graph.included[this._container.inflector.pluralize(model.modelName)]\n      ) {\n        graphResource =\n          graph.included[this._container.inflector.pluralize(model.modelName)][\n            graphKey\n          ];\n      }\n\n      // If the model's in the graph, check if relationshipKey should be included\n      return (\n        graphResource &&\n        graphResource.relationships &&\n        Object.prototype.hasOwnProperty.call(\n          graphResource.relationships,\n          dasherize(relationshipKey)\n        )\n      );\n    } else {\n      let relationshipPaths = this.getKeysForIncluded();\n\n      return relationshipPaths.includes(relationshipKey);\n    }\n  }\n\n  /*\n    This is needed for _relationshipIsIncludedForModel - see the note there for\n    more background.\n\n    If/when we can refactor this serializer, the logic in this method would\n    probably be the basis for the new overall json/graph creation.\n  */\n  _createRequestedIncludesGraph(primaryResource, secondaryResource = null) {\n    let graph = {\n      data: {},\n    };\n\n    if (this.isModel(primaryResource)) {\n      let primaryResourceKey = this._graphKeyForModel(primaryResource);\n      graph.data[primaryResourceKey] = {};\n\n      this._addPrimaryModelToRequestedIncludesGraph(graph, primaryResource);\n    } else if (this.isCollection(primaryResource)) {\n      primaryResource.models.forEach((model) => {\n        let primaryResourceKey = this._graphKeyForModel(model);\n        graph.data[primaryResourceKey] = {};\n\n        this._addPrimaryModelToRequestedIncludesGraph(graph, model);\n      });\n    }\n\n    // Hack :/ Need to think of a better palce to put this if\n    // refactoring json:api serializer.\n    this.request._includesGraph = graph;\n  }\n\n  _addPrimaryModelToRequestedIncludesGraph(graph, model) {\n    if (this.hasQueryParamIncludes()) {\n      let graphKey = this._graphKeyForModel(model);\n      let queryParamIncludes = this.getQueryParamIncludes();\n\n      queryParamIncludes\n        .split(\",\")\n        .filter((item) => !!item.trim())\n        .forEach((includesPath) => {\n          // includesPath is post.comments, for example\n          graph.data[graphKey].relationships =\n            graph.data[graphKey].relationships || {};\n\n          let relationshipKeys = includesPath.split(\".\").map(dasherize);\n          let relationshipKey = relationshipKeys[0];\n          let graphRelationshipKey = relationshipKey;\n          let normalizedRelationshipKey = camelize(relationshipKey);\n          let hasAssociation = model.associationKeys.has(\n            normalizedRelationshipKey\n          );\n\n          assert(\n            hasAssociation,\n            `You tried to include \"${relationshipKey}\" with ${model} but no association named \"${normalizedRelationshipKey}\" is defined on the model.`\n          );\n\n          let relationship = model[normalizedRelationshipKey];\n          let relationshipData;\n\n          if (this.isModel(relationship)) {\n            relationshipData = this._graphKeyForModel(relationship);\n          } else if (this.isCollection(relationship)) {\n            relationshipData = relationship.models.map(this._graphKeyForModel);\n          } else {\n            relationshipData = null;\n          }\n\n          graph.data[graphKey].relationships[\n            graphRelationshipKey\n          ] = relationshipData;\n\n          if (relationship) {\n            this._addResourceToRequestedIncludesGraph(\n              graph,\n              relationship,\n              relationshipKeys.slice(1)\n            );\n          }\n        });\n    }\n  }\n\n  _addResourceToRequestedIncludesGraph(graph, resource, relationshipNames) {\n    graph.included = graph.included || {};\n\n    let models = this.isCollection(resource) ? resource.models : [resource];\n\n    models.forEach((model) => {\n      let collectionName = this._container.inflector.pluralize(model.modelName);\n      graph.included[collectionName] = graph.included[collectionName] || {};\n\n      this._addModelToRequestedIncludesGraph(graph, model, relationshipNames);\n    });\n  }\n\n  _addModelToRequestedIncludesGraph(graph, model, relationshipNames) {\n    let collectionName = this._container.inflector.pluralize(model.modelName);\n    let resourceKey = this._graphKeyForModel(model);\n    graph.included[collectionName][resourceKey] =\n      graph.included[collectionName][resourceKey] || {};\n\n    if (relationshipNames.length) {\n      this._addResourceRelationshipsToRequestedIncludesGraph(\n        graph,\n        collectionName,\n        resourceKey,\n        model,\n        relationshipNames\n      );\n    }\n  }\n\n  /*\n    Lot of the same logic here from _addPrimaryModelToRequestedIncludesGraph, could refactor & share\n  */\n  _addResourceRelationshipsToRequestedIncludesGraph(\n    graph,\n    collectionName,\n    resourceKey,\n    model,\n    relationshipNames\n  ) {\n    graph.included[collectionName][resourceKey].relationships =\n      graph.included[collectionName][resourceKey].relationships || {};\n\n    let relationshipName = relationshipNames[0];\n    let relationship = model[camelize(relationshipName)];\n    let relationshipData;\n\n    if (this.isModel(relationship)) {\n      relationshipData = this._graphKeyForModel(relationship);\n    } else if (this.isCollection(relationship)) {\n      relationshipData = relationship.models.map(this._graphKeyForModel);\n    }\n    graph.included[collectionName][resourceKey].relationships[\n      relationshipName\n    ] = relationshipData;\n\n    if (relationship) {\n      this._addResourceToRequestedIncludesGraph(\n        graph,\n        relationship,\n        relationshipNames.slice(1)\n      );\n    }\n  }\n\n  _graphKeyForModel(model) {\n    return `${model.modelName}:${model.id}`;\n  }\n\n  getQueryParamIncludes() {\n    return get(this, \"request.queryParams.include\");\n  }\n\n  hasQueryParamIncludes() {\n    return !!this.getQueryParamIncludes();\n  }\n\n  /**\n    Used to customize the `type` field of the document. By default, pluralizes and dasherizes the model's `modelName`.\n\n    For example, the JSON:API document for a `blogPost` model would be:\n\n    ```js\n    {\n      data: {\n        id: 1,\n        type: 'blog-posts'\n      }\n    }\n    ```\n\n    @method typeKeyForModel\n    @param {Model} model\n    @return {String}\n    @public\n  */\n  typeKeyForModel(model) {\n    return dasherize(this._container.inflector.pluralize(model.modelName));\n  }\n\n  getCoalescedIds(request) {\n    let ids = request.queryParams && request.queryParams[\"filter[id]\"];\n    if (typeof ids === \"string\") {\n      return ids.split(\",\");\n    }\n    return ids;\n  }\n\n  /**\n    Allows for per-relationship inclusion of linkage data. Use this when `alwaysIncludeLinkageData` is not granular enough.\n\n    ```js\n    export default JSONAPISerializer.extend({\n      shouldIncludeLinkageData(relationshipKey, model) {\n        if (relationshipKey === 'author' || relationshipKey === 'ghostWriter') {\n          return true;\n        }\n        return false;\n      }\n    });\n    ```\n\n    @method shouldIncludeLinkageData\n    @param {String} relationshipKey\n    @param {Model} model\n    @return {Boolean}\n    @public\n  */\n  shouldIncludeLinkageData(relationshipKey, model) {\n    return false;\n  }\n}\n\nJSONAPISerializer.prototype.alwaysIncludeLinkageData = false;\n\nexport default JSONAPISerializer;\n","import Model from \"./orm/model\";\nimport Collection from \"./orm/collection\";\nimport PolymorphicCollection from \"./orm/polymorphic-collection\";\nimport Serializer from \"./serializer\";\nimport JsonApiSerializer from \"./serializers/json-api-serializer\";\nimport { camelize } from \"./utils/inflector\";\nimport assert from \"./assert\";\n\n/**\n * @hide\n */\nexport default class SerializerRegistry {\n  constructor(schema, serializerMap = {}, server) {\n    this.schema = schema;\n    this._serializerMap = serializerMap;\n  }\n\n  normalize(payload, modelName) {\n    return this.serializerFor(modelName).normalize(payload);\n  }\n\n  serialize(response, request) {\n    this.request = request;\n\n    if (this._isModelOrCollection(response)) {\n      let serializer = this.serializerFor(response.modelName);\n\n      return serializer.serialize(response, request);\n    } else if (Array.isArray(response) && response.some(this._isCollection)) {\n      return response.reduce((json, collection) => {\n        let serializer = this.serializerFor(collection.modelName);\n\n        if (serializer.embed) {\n          json[\n            this._container.inflector.pluralize(collection.modelName)\n          ] = serializer.serialize(collection, request);\n        } else {\n          json = Object.assign(json, serializer.serialize(collection, request));\n        }\n\n        return json;\n      }, {});\n    } else {\n      return response;\n    }\n  }\n\n  serializerFor(type, { explicit = false } = {}) {\n    let SerializerForResponse =\n      type && this._serializerMap && this._serializerMap[camelize(type)];\n\n    if (explicit) {\n      assert(\n        !!SerializerForResponse,\n        `You passed in ${type} as an explicit serializer type but that serializer doesn't exist.`\n      );\n    } else {\n      SerializerForResponse =\n        SerializerForResponse || this._serializerMap.application || Serializer;\n\n      assert(\n        !SerializerForResponse ||\n          SerializerForResponse.prototype.embed ||\n          SerializerForResponse.prototype.root ||\n          new SerializerForResponse() instanceof JsonApiSerializer,\n        \"You cannot have a serializer that sideloads (embed: false) and disables the root (root: false).\"\n      );\n    }\n\n    return new SerializerForResponse(this, type, this.request);\n  }\n\n  _isModel(object) {\n    return object instanceof Model;\n  }\n\n  _isCollection(object) {\n    return (\n      object instanceof Collection || object instanceof PolymorphicCollection\n    );\n  }\n\n  _isModelOrCollection(object) {\n    return this._isModel(object) || this._isCollection(object);\n  }\n\n  registerSerializers(newSerializerMaps) {\n    let currentSerializerMap = this._serializerMap || {};\n    this._serializerMap = Object.assign(\n      currentSerializerMap,\n      newSerializerMaps\n    );\n  }\n\n  getCoalescedIds(request, modelName) {\n    return this.serializerFor(modelName).getCoalescedIds(request);\n  }\n}\n","import { camelize, dasherize } from \"../utils/inflector\";\nimport Association from \"./associations/association\";\nimport Collection from \"./collection\";\nimport assert from \"../assert\";\nimport forIn from \"lodash.forin\";\n\nconst collectionNameCache = {};\nconst internalCollectionNameCache = {};\nconst modelNameCache = {};\n\n/**\n  The primary use of the `Schema` class is to use it to find Models and Collections via the `Model` class methods.\n\n  The `Schema` is most often accessed via the first parameter to a route handler:\n\n  ```js\n  this.get('posts', schema => {\n    return schema.posts.where({ isAdmin: false });\n  });\n  ```\n\n  It is also available from the `.schema` property of a `server` instance:\n\n  ```js\n  server.schema.users.create({ name: 'Yehuda' });\n  ```\n\n  To work with the Model or Collection returned from one of the methods below, refer to the instance methods in the API docs for the `Model` and `Collection` classes.\n\n  @class Schema\n  @constructor\n  @public\n */\nexport default class Schema {\n  constructor(db, modelsMap = {}) {\n    assert(db, \"A schema requires a db\");\n\n    /**\n      Returns Mirage's database. See the `Db` docs for the db's API.\n\n      @property db\n      @type {Object}\n      @public\n    */\n    this.db = db;\n    this._registry = {};\n    this._dependentAssociations = { polymorphic: [] };\n    this.registerModels(modelsMap);\n    this.isSaving = {}; // a hash of models that are being saved, used to avoid cycles\n  }\n\n  /**\n    @method registerModels\n    @param hash\n    @public\n    @hide\n   */\n  registerModels(hash = {}) {\n    forIn(hash, (model, key) => {\n      this.registerModel(key, hash[key]);\n    });\n  }\n\n  /**\n    @method registerModel\n    @param type\n    @param ModelClass\n    @public\n    @hide\n   */\n  registerModel(type, ModelClass) {\n    let camelizedModelName = camelize(type);\n    let modelName = dasherize(camelizedModelName);\n\n    // Avoid mutating original class, because we may want to reuse it across many tests\n    ModelClass = ModelClass.extend();\n\n    // Store model & fks in registry\n    // TODO: don't think this is needed anymore\n    this._registry[camelizedModelName] = this._registry[camelizedModelName] || {\n      class: null,\n      foreignKeys: [],\n    }; // we may have created this key before, if another model added fks to it\n    this._registry[camelizedModelName].class = ModelClass;\n\n    // TODO: set here, remove from model#constructor\n    ModelClass.prototype._schema = this;\n    ModelClass.prototype.modelName = modelName;\n    // Set up associations\n    ModelClass.prototype.hasManyAssociations = {}; // a registry of the model's hasMany associations. Key is key from model definition, value is association instance itself\n    ModelClass.prototype.hasManyAssociationFks = {}; // a lookup table to get the hasMany association by foreignKey\n    ModelClass.prototype.belongsToAssociations = {}; // a registry of the model's belongsTo associations. Key is key from model definition, value is association instance itself\n    ModelClass.prototype.belongsToAssociationFks = {}; // a lookup table to get the belongsTo association by foreignKey\n    ModelClass.prototype.associationKeys = new Set(); // ex: address.user, user.addresses\n    ModelClass.prototype.associationIdKeys = new Set(); // ex: address.user_id, user.address_ids\n    ModelClass.prototype.dependentAssociations = []; // a registry of associations that depend on this model, needed for deletion cleanup.\n\n    let fksAddedFromThisModel = {};\n    for (let associationProperty in ModelClass.prototype) {\n      if (ModelClass.prototype[associationProperty] instanceof Association) {\n        let association = ModelClass.prototype[associationProperty];\n        association.name = associationProperty;\n        association.modelName =\n          association.modelName || this.toModelName(associationProperty);\n        association.ownerModelName = modelName;\n        association.setSchema(this);\n\n        // Update the registry with this association's foreign keys. This is\n        // essentially our \"db migration\", since we must know about the fks.\n        let [fkHolder, fk] = association.getForeignKeyArray();\n\n        fksAddedFromThisModel[fkHolder] = fksAddedFromThisModel[fkHolder] || [];\n        assert(\n          !fksAddedFromThisModel[fkHolder].includes(fk),\n          `Your '${type}' model definition has multiple possible inverse relationships of type '${fkHolder}'. Please use explicit inverses.`\n        );\n        fksAddedFromThisModel[fkHolder].push(fk);\n\n        this._addForeignKeyToRegistry(fkHolder, fk);\n\n        // Augment the Model's class with any methods added by this association\n        association.addMethodsToModelClass(ModelClass, associationProperty);\n      }\n    }\n\n    // Create a db collection for this model, if doesn't exist\n    let collection = this.toCollectionName(modelName);\n    if (!this.db[collection]) {\n      this.db.createCollection(collection);\n    }\n\n    // Create the entity methods\n    this[collection] = {\n      camelizedModelName,\n      new: (attrs) => this.new(camelizedModelName, attrs),\n      create: (attrs) => this.create(camelizedModelName, attrs),\n      all: (attrs) => this.all(camelizedModelName, attrs),\n      find: (attrs) => this.find(camelizedModelName, attrs),\n      findBy: (attrs) => this.findBy(camelizedModelName, attrs),\n      findOrCreateBy: (attrs) => this.findOrCreateBy(camelizedModelName, attrs),\n      where: (attrs) => this.where(camelizedModelName, attrs),\n      none: (attrs) => this.none(camelizedModelName, attrs),\n      first: (attrs) => this.first(camelizedModelName, attrs),\n    };\n\n    return this;\n  }\n\n  /**\n    @method modelFor\n    @param type\n    @public\n    @hide\n   */\n  modelFor(type) {\n    return this._registry[type];\n  }\n\n  /**\n    Create a new unsaved model instance with attributes *attrs*.\n\n    ```js\n    let post = blogPosts.new({ title: 'Lorem ipsum' });\n    post.title;   // Lorem ipsum\n    post.id;      // null\n    post.isNew(); // true\n    ```\n\n    @method new\n    @param type\n    @param attrs\n    @public\n   */\n  new(type, attrs) {\n    return this._instantiateModel(dasherize(type), attrs);\n  }\n\n  /**\n    Create a new model instance with attributes *attrs*, and insert it into the database.\n\n    ```js\n    let post = blogPosts.create({title: 'Lorem ipsum'});\n    post.title;   // Lorem ipsum\n    post.id;      // 1\n    post.isNew(); // false\n    ```\n\n    @method create\n    @param type\n    @param attrs\n    @public\n   */\n  create(type, attrs) {\n    return this.new(type, attrs).save();\n  }\n\n  /**\n    Return all models in the database.\n\n    ```js\n    let posts = blogPosts.all();\n    // [post:1, post:2, ...]\n    ```\n\n    @method all\n    @param type\n    @public\n   */\n  all(type) {\n    let collection = this.collectionForType(type);\n\n    return this._hydrate(collection, dasherize(type));\n  }\n\n  /**\n    Return an empty collection of type `type`.\n\n    @method none\n    @param type\n    @public\n   */\n  none(type) {\n    return this._hydrate([], dasherize(type));\n  }\n\n  /**\n    Return one or many models in the database by id.\n\n    ```js\n    let post = blogPosts.find(1);\n    let posts = blogPosts.find([1, 3, 4]);\n    ```\n\n    @method find\n    @param type\n    @param ids\n    @public\n   */\n  find(type, ids) {\n    let collection = this.collectionForType(type);\n    let records = collection.find(ids);\n\n    if (Array.isArray(ids)) {\n      assert(\n        records.length === ids.length,\n        `Couldn't find all ${this._container.inflector.pluralize(\n          type\n        )} with ids: (${ids.join(\",\")}) (found ${\n          records.length\n        } results, but was looking for ${ids.length})`\n      );\n    }\n\n    return this._hydrate(records, dasherize(type));\n  }\n\n  /**\n    Returns the first model in the database that matches the key-value pairs in `attrs`. Note that a string comparison is used.\n\n    ```js\n    let post = blogPosts.findBy({ published: true });\n    let post = blogPosts.findBy({ authorId: 1, published: false });\n    let post = blogPosts.findBy({ author: janeSmith, featured: true });\n    ```\n\n    This will return `null` if the schema doesn't have any matching record.\n\n    @method findBy\n    @param type\n    @param attributeName\n    @public\n   */\n  findBy(type, query) {\n    let collection = this.collectionForType(type);\n    let record = collection.findBy(query);\n\n    return this._hydrate(record, dasherize(type));\n  }\n\n  /**\n    Returns the first model in the database that matches the key-value pairs in `attrs`, or creates a record with the attributes if one is not found.\n\n    ```js\n    // Find the first published blog post, or create a new one.\n    let post = blogPosts.findOrCreateBy({ published: true });\n    ```\n\n    @method findOrCreateBy\n    @param type\n    @param attributeName\n    @public\n   */\n  findOrCreateBy(type, attrs) {\n    let collection = this.collectionForType(type);\n    let record = collection.findBy(attrs);\n    let model;\n\n    if (!record) {\n      model = this.create(type, attrs);\n    } else {\n      model = this._hydrate(record, dasherize(type));\n    }\n\n    return model;\n  }\n\n  /**\n    Return an ORM/Collection, which represents an array of models from the database matching `query`.\n\n    If `query` is an object, its key-value pairs will be compared against records using string comparison.\n\n    `query` can also be a compare function.\n\n    ```js\n    let posts = blogPosts.where({ published: true });\n    let posts = blogPosts.where(post => post.published === true);\n    ```\n\n    @method where\n    @param type\n    @param query\n    @public\n   */\n  where(type, query) {\n    let collection = this.collectionForType(type);\n    let records = collection.where(query);\n\n    return this._hydrate(records, dasherize(type));\n  }\n\n  /**\n    Returns the first model in the database.\n\n    ```js\n    let post = blogPosts.first();\n    ```\n\n    N.B. This will return `null` if the schema doesn't contain any records.\n\n    @method first\n    @param type\n    @public\n   */\n  first(type) {\n    let collection = this.collectionForType(type);\n    let record = collection[0];\n\n    return this._hydrate(record, dasherize(type));\n  }\n\n  /**\n    @method modelClassFor\n    @param modelName\n    @public\n    @hide\n   */\n  modelClassFor(modelName) {\n    let model = this._registry[camelize(modelName)];\n\n    assert(model, `Model not registered: ${modelName}`);\n\n    return model.class.prototype;\n  }\n\n  /*\n    This method updates the dependentAssociations registry, which is used to\n    keep track of which models depend on a given association. It's used when\n    deleting models - their dependents need to be looked up and foreign keys\n    updated.\n\n    For example,\n\n        schema = {\n          post: Model.extend(),\n          comment: Model.extend({\n            post: belongsTo()\n          })\n        };\n\n        comment1.post = post1;\n        ...\n        post1.destroy()\n\n    Deleting this post should clear out comment1's foreign key.\n\n    Polymorphic associations can have _any_ other model as a dependent, so we\n    handle them separately.\n  */\n  addDependentAssociation(association, modelName) {\n    if (association.isPolymorphic) {\n      this._dependentAssociations.polymorphic.push(association);\n    } else {\n      this._dependentAssociations[modelName] =\n        this._dependentAssociations[modelName] || [];\n      this._dependentAssociations[modelName].push(association);\n    }\n  }\n\n  dependentAssociationsFor(modelName) {\n    let directDependents = this._dependentAssociations[modelName] || [];\n    let polymorphicAssociations = this._dependentAssociations.polymorphic || [];\n\n    return directDependents.concat(polymorphicAssociations);\n  }\n\n  /**\n    Returns an object containing the associations registered for the model of the given _modelName_.\n\n    For example, given this configuration\n    \n    ```js\n    import { Server, Model, hasMany, belongsTo } from 'miragejs'\n\n    let server = new Server({\n      models: {\n        user: Model,\n        article: Model.extend({\n          fineAuthor: belongsTo(\"user\"),\n          comments: hasMany()\n        }),\n        comment: Model\n      }\n    })\n    ```\n\n    each of the following would return empty objects\n\n    ```js\n    server.schema.associationsFor('user')\n    // {}\n    server.schema.associationsFor('comment')\n    // {}\n    ```\n\n    but the associations for the `article` would return\n\n    ```js\n    server.schema.associationsFor('article')\n\n    // {\n    //   fineAuthor: BelongsToAssociation,\n    //   comments: HasManyAssociation\n    // }\n    ```\n\n    Check out the docs on the Association class to see what fields are available for each association.\n\n    @method associationsFor\n    @param {String} modelName\n    @return {Object}\n    @public\n  */\n  associationsFor(modelName) {\n    let modelClass = this.modelClassFor(modelName);\n\n    return Object.assign(\n      {},\n      modelClass.belongsToAssociations,\n      modelClass.hasManyAssociations\n    );\n  }\n\n  hasModelForModelName(modelName) {\n    return this.modelFor(camelize(modelName));\n  }\n\n  /*\n    Private methods\n  */\n\n  /**\n    @method collectionForType\n    @param type\n    @private\n    @hide\n   */\n  collectionForType(type) {\n    let collection = this.toCollectionName(type);\n    assert(\n      this.db[collection],\n      `You're trying to find model(s) of type ${type} but this collection doesn't exist in the database.`\n    );\n\n    return this.db[collection];\n  }\n\n  toCollectionName(type) {\n    if (typeof collectionNameCache[type] !== \"string\") {\n      let modelName = dasherize(type);\n\n      const collectionName = camelize(\n        this._container.inflector.pluralize(modelName)\n      );\n\n      collectionNameCache[type] = collectionName;\n    }\n\n    return collectionNameCache[type];\n  }\n\n  // This is to get at the underlying Db collection. Poorly named... need to\n  // refactor to DbTable or something.\n  toInternalCollectionName(type) {\n    if (typeof internalCollectionNameCache[type] !== \"string\") {\n      const internalCollectionName = `_${this.toCollectionName(type)}`;\n\n      internalCollectionNameCache[type] = internalCollectionName;\n    }\n\n    return internalCollectionNameCache[type];\n  }\n\n  toModelName(type) {\n    if (typeof modelNameCache[type] !== \"string\") {\n      let dasherized = dasherize(type);\n\n      const modelName = this._container.inflector.singularize(dasherized);\n\n      modelNameCache[type] = modelName;\n    }\n\n    return modelNameCache[type];\n  }\n\n  /**\n    @method _addForeignKeyToRegistry\n    @param type\n    @param fk\n    @private\n    @hide\n   */\n  _addForeignKeyToRegistry(type, fk) {\n    this._registry[type] = this._registry[type] || {\n      class: null,\n      foreignKeys: [],\n    };\n\n    let fks = this._registry[type].foreignKeys;\n    if (!fks.includes(fk)) {\n      fks.push(fk);\n    }\n  }\n\n  /**\n    @method _instantiateModel\n    @param modelName\n    @param attrs\n    @private\n    @hide\n   */\n  _instantiateModel(modelName, attrs) {\n    let ModelClass = this._modelFor(modelName);\n    let fks = this._foreignKeysFor(modelName);\n\n    return new ModelClass(this, modelName, attrs, fks);\n  }\n\n  /**\n    @method _modelFor\n    @param modelName\n    @private\n    @hide\n   */\n  _modelFor(modelName) {\n    return this._registry[camelize(modelName)].class;\n  }\n\n  /**\n    @method _foreignKeysFor\n    @param modelName\n    @private\n    @hide\n   */\n  _foreignKeysFor(modelName) {\n    return this._registry[camelize(modelName)].foreignKeys;\n  }\n\n  /**\n    Takes a record and returns a model, or an array of records\n    and returns a collection.\n   *\n    @method _hydrate\n    @param records\n    @param modelName\n    @private\n    @hide\n   */\n  _hydrate(records, modelName) {\n    if (Array.isArray(records)) {\n      let models = records.map(function (record) {\n        return this._instantiateModel(modelName, record);\n      }, this);\n      return new Collection(modelName, models);\n    } else if (records) {\n      return this._instantiateModel(modelName, records);\n    } else {\n      return null;\n    }\n  }\n}\n","import { singularize, pluralize } from \"inflected\";\nimport Db from \"./db\";\nimport Association from \"./orm/associations/association\";\nimport RouteHandler from \"./route-handler\";\nimport BaseRouteHandler from \"./route-handlers/base\";\nimport Serializer from \"./serializer\";\nimport SerializerRegistry from \"./serializer-registry\";\nimport Schema from \"./orm/schema\";\n\nconst classes = {\n  Db,\n  Association,\n  RouteHandler,\n  BaseRouteHandler,\n  Serializer,\n  SerializerRegistry,\n  Schema,\n};\n\nlet defaultInflector = { singularize, pluralize };\n\n/**\n  Lightweight DI container for customizable objects that are needed by\n  deeply nested classes.\n\n  @class Container\n  @hide\n */\nclass Container {\n  constructor() {\n    this.inflector = defaultInflector;\n  }\n\n  register(key, value) {\n    this[key] = value;\n  }\n\n  create(className, ...args) {\n    let Class = classes[className];\n    Class.prototype._container = this;\n\n    return new Class(...args);\n  }\n}\n\n/**\n  These are side effects. We give each class a default container so it can be\n  easily unit tested.\n\n  We should remove these once we have test coverage and can refactor to a proper\n  DI system.\n*/\nlet defaultContainer = new Container();\n\nDb.prototype._container = defaultContainer;\nAssociation.prototype._container = defaultContainer;\nBaseRouteHandler.prototype._container = defaultContainer;\nRouteHandler.prototype._container = defaultContainer;\nSerializer.prototype._container = defaultContainer;\nSerializerRegistry.prototype._container = defaultContainer;\nSchema.prototype._container = defaultContainer;\n\nexport default Container;\n","/* eslint no-console: 0 */\n\nimport \"@miragejs/pretender-node-polyfill/before\";\nimport Pretender from \"pretender\";\nimport \"@miragejs/pretender-node-polyfill/after\";\nimport { camelize } from \"./utils/inflector\";\nimport isAssociation from \"./utils/is-association\";\nimport assert from \"./assert\";\nimport BelongsTo from \"./orm/associations/belongs-to\";\nimport Container from \"./container\";\nimport { singularize, pluralize } from \"inflected\";\nimport pick from \"lodash.pick\";\nimport assign from \"lodash.assign\";\nimport find from \"lodash.find\";\nimport isPlainObject from \"lodash.isplainobject\";\nimport isInteger from \"lodash.isinteger\";\n\nconst isPluralForModelCache = {};\n\n/**\n * Creates a new Pretender instance.\n *\n * @method createPretender\n * @param {Server} server\n * @return {Object} A new Pretender instance.\n * @public\n */\nfunction createPretender(server) {\n  if (typeof window !== \"undefined\") {\n    return new Pretender(\n      function () {\n        this.passthroughRequest = function (verb, path, request) {\n          if (server.shouldLog()) {\n            console.log(\n              `Mirage: Passthrough request for ${verb.toUpperCase()} ${\n                request.url\n              }`\n            );\n          }\n        };\n\n        this.handledRequest = function (verb, path, request) {\n          if (server.shouldLog()) {\n            console.groupCollapsed(\n              `Mirage: [${request.status}] ${verb.toUpperCase()} ${request.url}`\n            );\n            let { requestBody, responseText } = request;\n            let loggedRequest, loggedResponse;\n\n            try {\n              loggedRequest = JSON.parse(requestBody);\n            } catch (e) {\n              loggedRequest = requestBody;\n            }\n\n            try {\n              loggedResponse = JSON.parse(responseText);\n            } catch (e) {\n              loggedResponse = responseText;\n            }\n\n            console.groupCollapsed(\"Response\");\n            console.log(loggedResponse);\n            console.groupEnd();\n\n            console.groupCollapsed(\"Request (data)\");\n            console.log(loggedRequest);\n            console.groupEnd();\n\n            console.groupCollapsed(\"Request (raw)\");\n            console.log(request);\n            console.groupEnd();\n\n            console.groupEnd();\n          }\n        };\n\n        let originalCheckPassthrough = this.checkPassthrough;\n        this.checkPassthrough = function (request) {\n          let shouldPassthrough = server.passthroughChecks.some(\n            (passthroughCheck) => passthroughCheck(request)\n          );\n\n          if (shouldPassthrough) {\n            let url = request.url.includes(\"?\")\n              ? request.url.substr(0, request.url.indexOf(\"?\"))\n              : request.url;\n\n            this[request.method.toLowerCase()](url, this.passthrough);\n          }\n\n          return originalCheckPassthrough.apply(this, arguments);\n        };\n\n        this.unhandledRequest = function (verb, path) {\n          path = decodeURI(path);\n          assert(\n            `Your app tried to ${verb} '${path}', but there was no route defined to handle this request. Define a route for this endpoint in your routes() config. Did you forget to define a namespace?`\n          );\n        };\n      },\n      { trackRequests: server.shouldTrackRequests() }\n    );\n  }\n}\n\nconst defaultRouteOptions = {\n  coalesce: false,\n  timing: undefined,\n};\n\nconst defaultInflector = { singularize, pluralize };\n\n/**\n  @hide\n*/\nconst defaultPassthroughs = [\n  \"http://localhost:0/chromecheckurl\", // mobile chrome\n  \"http://localhost:30820/socket.io\", // electron\n  (request) => {\n    return /.+\\.hot-update.json$/.test(request.url);\n  },\n];\n\n/**\n  @hide\n*/\nexport { defaultPassthroughs };\n\n/**\n * Determine if the object contains a valid option.\n *\n * @method isOption\n * @param {Object} option An object with one option value pair.\n * @return {Boolean} True if option is a valid option, false otherwise.\n * @private\n */\nfunction isOption(option) {\n  if (!option || typeof option !== \"object\") {\n    return false;\n  }\n\n  let allOptions = Object.keys(defaultRouteOptions);\n  let optionKeys = Object.keys(option);\n  for (let i = 0; i < optionKeys.length; i++) {\n    let key = optionKeys[i];\n    if (allOptions.indexOf(key) > -1) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Extract arguments for a route.\n *\n * @method extractRouteArguments\n * @param {Array} args Of the form [options], [object, code], [function, code]\n * [shorthand, options], [shorthand, code, options]\n * @return {Array} [handler (i.e. the function, object or shorthand), code,\n * options].\n * @private\n */\nfunction extractRouteArguments(args) {\n  let [lastArg] = args.splice(-1);\n  if (isOption(lastArg)) {\n    lastArg = assign({}, defaultRouteOptions, lastArg);\n  } else {\n    args.push(lastArg);\n    lastArg = defaultRouteOptions;\n  }\n  let t = 2 - args.length;\n  while (t-- > 0) {\n    args.push(undefined);\n  }\n  args.push(lastArg);\n  return args;\n}\n\n/**\n * Creates a Server\n * @param {Object} options Server's configuration object\n * @param {String} options.urlPrefix The base URL for the routes. Example: `http://miragejs.com`.\n * @param {String} options.namespace The default namespace for the `Server`. Example: `/api/v1`.\n * @param {Number} options.timing Default latency for the routes to respond to a request.\n * @param {String} options.environment Defines the environment of the `Server`.\n * @param {Boolean} options.trackRequests Pretender `trackRequests`.\n * @param {Boolean} options.useDefaultPassthroughs True to use mirage provided passthroughs\n * @param {Boolean} options.logging Set to true or false to explicitly specify logging behavior.\n * @param {Function} options.seeds Called on the seed phase. Should be used to seed the database.\n * @param {Function} options.scenarios Alias for seeds.\n * @param {Function} options.routes Should be used to define server routes.\n * @param {Function} options.baseConfig Alias for routes.\n * @param {Object} options.inflector Default inflector (used for pluralization and singularization).\n * @param {Object} options.identityManagers Database identity managers.\n * @param {Object} options.models Server models\n * @param {Object} options.serializers Server serializers\n * @param {Object} options.factories Server factories\n * @param {Object} options.pretender Pretender instance\n */\nexport function createServer(options) {\n  return new Server(options);\n}\n\n/**\n  The Mirage server.\n\n  Note that `this` within your `routes` function refers to the server instance, which is the same instance that `server` refers to in your tests.\n\n  @class Server\n  @public\n*/\nexport default class Server {\n  /**\n   * Creates a Server\n   * @param {Object} options Server's configuration object\n   * @param {String} options.urlPrefix The base URL for the routes. Example: `http://miragejs.com`.\n   * @param {String} options.namespace The default namespace for the `Server`. Example: `/api/v1`.\n   * @param {Number} options.timing Default latency for the routes to respond to a request.\n   * @param {String} options.environment Defines the environment of the `Server`.\n   * @param {Boolean} options.trackRequests Pretender `trackRequests`.\n   * @param {Boolean} options.useDefaultPassthroughs True to use mirage provided passthroughs\n   * @param {Boolean} options.logging Set to true or false to explicitly specify logging behavior.\n   * @param {Function} options.seeds Called on the seed phase. Should be used to seed the database.\n   * @param {Function} options.scenarios Alias for seeds.\n   * @param {Function} options.routes Should be used to define server routes.\n   * @param {Function} options.baseConfig Alias for routes.\n   * @param {Object} options.inflector Default inflector (used for pluralization and singularization).\n   * @param {Object} options.identityManagers Database identity managers.\n   * @param {Object} options.models Server models\n   * @param {Object} options.serializers Server serializers\n   * @param {Object} options.factories Server factories\n   * @param {Object} options.pretender Pretender instance\n   */\n  constructor(options = {}) {\n    this._container = new Container();\n    this.config(options);\n\n    /**\n      Returns the Mirage Db instance.\n\n      @property db\n      @return Db\n    */\n    this.db = this.db || undefined;\n\n    /**\n      Returns the Mirage Schema (ORM) instance.\n\n      @property schema\n      @return Schema\n    */\n    this.schema = this.schema || undefined;\n  }\n\n  config(config = {}) {\n    this.passthroughChecks = this.passthroughChecks || [];\n\n    let didOverrideConfig =\n      config.environment &&\n      this.environment &&\n      this.environment !== config.environment;\n    assert(\n      !didOverrideConfig,\n      \"You cannot modify Mirage's environment once the server is created\"\n    );\n    this.environment = config.environment || this.environment || \"development\";\n\n    if (config.routes) {\n      assert(\n        !config.baseConfig,\n        \"The routes option is an alias for the baseConfig option. You can't pass both options into your server definition.\"\n      );\n      config.baseConfig = config.routes;\n    }\n\n    if (config.seeds) {\n      assert(\n        !config.scenarios,\n        \"The seeds option is an alias for the scenarios.default option. You can't pass both options into your server definition.\"\n      );\n      config.scenarios = { default: config.seeds };\n    }\n\n    this._config = config;\n\n    /**\n      Set the base namespace used for all routes defined with `get`, `post`, `put` or `del`.\n\n      For example,\n\n      ```js\n      new Server({\n        routes() {\n          this.namespace = '/api';\n\n          // this route will handle the URL '/api/contacts'\n          this.get('/contacts', 'contacts');\n        }\n      })\n      ```\n\n      Note that only routes defined after `this.namespace` are affected. This is useful if you have a few one-off routes that you don't want under your namespace:\n\n      ```js\n      new Server({\n        routes() {\n\n          // this route handles /auth\n          this.get('/auth', function() { ...});\n\n          this.namespace = '/api';\n          // this route will handle the URL '/api/contacts'\n          this.get('/contacts', 'contacts');\n        };\n      })\n      ```\n\n      If your app is loaded from the filesystem vs. a server (e.g. via Cordova or Electron vs. `localhost` or `https://yourhost.com/`), you will need to explicitly define a namespace. Likely values are `/` (if requests are made with relative paths) or `https://yourhost.com/api/...` (if requests are made to a defined server).\n\n      For a sample implementation leveraging a configured API host & namespace, check out [this issue comment](https://github.com/miragejs/ember-cli-mirage/issues/497#issuecomment-183458721).\n\n      @property namespace\n      @type String\n      @public\n    */\n    this.namespace = this.namespace || config.namespace || \"\";\n\n    /**\n      Mirage needs know the singular and plural versions of certain words for some of its APIs to work.\n\n      For example, whenever you define a model\n\n      ```js\n      new Server({\n        models: {\n          post: Model\n        }\n      })\n      ```\n\n      Mirage will pluralize the word \"post\" and use it to create a `db.posts` database collection.\n\n      To accomplish this, Mirage uses an object called an Inflector. An Inflector is an object with two methods, `singularize` and `pluralize`, that Mirage will call whenever it needs to inflect a word.\n\n      Mirage has a default inflector, so if you write\n\n      ```js\n      new Server()\n      ```\n\n      you'll be using the node [inflected](https://github.com/martinandert/inflected#readme) package. This can be customized if you have irregular words or need to change the defaults. You can wead more in [the guide on customizing inflections](/docs/advanced/customizing-inflections).\n\n      You typically should be able to make your customizations using the provided inflector. It's good to match any custom inflections your backend uses, as this will keep your Mirage code more consistent and simpler.\n\n      You can also override the inflector completely and provide your own `pluralize` and `singularize` methods:\n\n      ```js\n      new Server({\n        inflector: {\n          pluralize(word) {\n            // your logic\n          },\n          singularize(word) {\n            // your logic\n          }\n        }\n      })\n      ```\n    */\n    this.inflector = config.inflector || defaultInflector;\n    this._container.register(\"inflector\", this.inflector);\n\n    /**\n      Sets a string to prefix all route handler URLs with.\n\n      Useful if your app makes API requests to a different port.\n\n      ```js\n      new Server({\n        routes() {\n          this.urlPrefix = 'http://localhost:8080'\n        }\n      })\n      ```\n    */\n    this.urlPrefix = this.urlPrefix || config.urlPrefix || \"\";\n\n    /**\n      Set the number of milliseconds for the the Server's response time.\n\n      By default there's a 400ms delay during development, and 0 delay in testing (so your tests run fast).\n\n      ```js\n      new Server({\n        routes() {\n          this.timing = 400; // default\n        }\n      })\n      ```\n\n      To set the timing for individual routes, see the `timing` option for route handlers.\n\n      @property timing\n      @type Number\n      @public\n    */\n    this.timing = this.timing || config.timing || 400;\n\n    /**\n      Set to `true` or `false` to explicitly specify logging behavior.\n\n      By default, server responses are logged in non-testing environments. Logging is disabled by default in testing, so as not to clutter CI test runner output.\n\n      For example, to enable logging in tests, write the following:\n\n      ```js\n      test('I can view all users', function() {\n        server.logging = true;\n        server.create('user');\n\n        visit('/users');\n        // ...\n      });\n      ```\n\n      You can also write a custom log message using the [Pretender server's `handledRequest` hook](https://github.com/pretenderjs/pretender#handled-requests). (You can access the pretender server from your Mirage server via `server.pretender`.)\n\n      To override,\n\n      ```js\n      new Server({\n        routes() {\n          this.pretender.handledRequest = function(verb, path, request) {\n            let { responseText } = request;\n            // log request and response data\n          }\n        }\n      })\n      ```\n\n      @property logging\n      @return {Boolean}\n      @public\n    */\n    this.logging = this.logging !== undefined ? this.logging : undefined;\n\n    this.testConfig = this.testConfig || undefined;\n\n    this.trackRequests = config.trackRequests;\n\n    this._defineRouteHandlerHelpers();\n\n    if (this.db) {\n      this.db.registerIdentityManagers(config.identityManagers);\n    } else {\n      this.db = this._container.create(\n        \"Db\",\n        undefined,\n        config.identityManagers\n      );\n    }\n\n    if (this.schema) {\n      this.schema.registerModels(config.models);\n      this.serializerOrRegistry.registerSerializers(config.serializers || {});\n    } else {\n      this.schema = this._container.create(\"Schema\", this.db, config.models);\n      this.serializerOrRegistry = this._container.create(\n        \"SerializerRegistry\",\n        this.schema,\n        config.serializers\n      );\n    }\n\n    let hasFactories = this._hasModulesOfType(config, \"factories\");\n    let hasDefaultScenario =\n      config.scenarios &&\n      Object.prototype.hasOwnProperty.call(config.scenarios, \"default\");\n\n    let didOverridePretenderConfig =\n      config.trackRequests !== undefined && this.pretender;\n    assert(\n      !didOverridePretenderConfig,\n      \"You cannot modify Pretender's request tracking once the server is created\"\n    );\n\n    /**\n      Mirage uses [pretender.js](https://github.com/trek/pretender) as its xhttp interceptor. In your Mirage config, `this.pretender` refers to the actual Pretender instance, so any config options that work there will work here as well.\n\n      ```js\n      new Server({\n        routes() {\n          this.pretender.handledRequest = (verb, path, request) => {\n            console.log(`Your server responded to ${path}`);\n          }\n        }\n      })\n      ```\n\n      Refer to [Pretender's docs](https://github.com/pretenderjs/pretender) if you want to change any options on your Pretender instance.\n\n      @property pretender\n      @return {Object} The Pretender instance\n      @public\n    */\n    this.pretender =\n      this.pretender || config.pretender || createPretender(this);\n\n    if (config.baseConfig) {\n      this.loadConfig(config.baseConfig);\n    }\n\n    if (this.isTest()) {\n      if (config.testConfig) {\n        this.loadConfig(config.testConfig);\n      }\n\n      if (typeof window !== \"undefined\") {\n        window.server = this; // TODO: Better way to inject server into test env\n      }\n    }\n\n    if (this.isTest() && hasFactories) {\n      this.loadFactories(config.factories);\n    } else if (!this.isTest() && hasDefaultScenario) {\n      this.loadFactories(config.factories);\n      config.scenarios.default(this);\n    } else {\n      this.loadFixtures();\n    }\n\n    let useDefaultPassthroughs =\n      typeof config.useDefaultPassthroughs !== \"undefined\"\n        ? config.useDefaultPassthroughs\n        : true;\n    if (useDefaultPassthroughs) {\n      this._configureDefaultPassthroughs();\n    }\n  }\n\n  /**\n   * Determines if the current environment is the testing environment.\n   *\n   * @method isTest\n   * @return {Boolean} True if the environment is 'test', false otherwise.\n   * @public\n   * @hide\n   */\n  isTest() {\n    return this.environment === \"test\";\n  }\n\n  /**\n    Determines if the server should log.\n\n    @method shouldLog\n    @return The value of this.logging if defined, or false if in the testing environment,\n    true otherwise.\n    @public\n    @hide\n  */\n  shouldLog() {\n    return typeof this.logging !== \"undefined\" ? this.logging : !this.isTest();\n  }\n\n  /**\n   * Determines if the server should track requests.\n   *\n   * @method shouldTrackRequests\n   * @return The value of this.trackRequests if defined, false otherwise.\n   * @public\n   * @hide\n   */\n  shouldTrackRequests() {\n    return Boolean(this.trackRequests);\n  }\n\n  /**\n   * Load the configuration given, setting timing to 0 if in the test\n   * environment.\n   *\n   * @method loadConfig\n   * @param {Object} config The configuration to load.\n   * @public\n   * @hide\n   */\n  loadConfig(config) {\n    config.call(this);\n    this.timing = this.isTest() ? 0 : this.timing || 0;\n  }\n\n  /**\n    By default, if your app makes a request that is not defined in your server config, Mirage will throw an error. You can use `passthrough` to whitelist requests, and allow them to pass through your Mirage server to the actual network layer.\n\n    Note: Put all passthrough config at the bottom of your routes, to give your route handlers precedence.\n\n    To ignore paths on your current host (as well as configured `namespace`), use a leading `/`:\n\n    ```js\n    this.passthrough('/addresses');\n    ```\n\n    You can also pass a list of paths, or call `passthrough` multiple times:\n\n    ```js\n    this.passthrough('/addresses', '/contacts');\n    this.passthrough('/something');\n    this.passthrough('/else');\n    ```\n\n    These lines will allow all HTTP verbs to pass through. If you want only certain verbs to pass through, pass an array as the last argument with the specified verbs:\n\n    ```js\n    this.passthrough('/addresses', ['post']);\n    this.passthrough('/contacts', '/photos', ['get']);\n    ```\n\n    You can pass a function to `passthrough` to do a runtime check on whether or not the request should be handled by Mirage. If the function returns `true` Mirage will not handle the request and let it pass through.\n\n    ```js\n    this.passthrough(request => {\n      return request.queryParams.skipMirage;\n    });\n    ```\n\n    If you want all requests on the current domain to pass through, simply invoke the method with no arguments:\n\n    ```js\n    this.passthrough();\n    ```\n\n    Note again that the current namespace (i.e. any `namespace` property defined above this call) will be applied.\n\n    You can also allow other-origin hosts to passthrough. If you use a fully-qualified domain name, the `namespace` property will be ignored. Use two * wildcards to match all requests under a path:\n\n    ```js\n    this.passthrough('http://api.foo.bar/**');\n    this.passthrough('http://api.twitter.com/v1/cards/**');\n    ```\n\n    In versions of Pretender prior to 0.12, `passthrough` only worked with jQuery >= 2.x. As long as you're on Pretender@0.12 or higher, you should be all set.\n\n    @method passthrough\n    @param {String} [...paths] Any number of paths to whitelist\n    @param {Array} options Unused\n    @public\n  */\n  passthrough(...paths) {\n    // this only works in browser-like environments for now. in node users will have to configure\n    // their own interceptor if they are using one.\n    if (typeof window !== \"undefined\") {\n      let verbs = [\"get\", \"post\", \"put\", \"delete\", \"patch\", \"options\", \"head\"];\n      let lastArg = paths[paths.length - 1];\n\n      if (paths.length === 0) {\n        paths = [\"/**\", \"/\"];\n      } else if (Array.isArray(lastArg)) {\n        verbs = paths.pop();\n      }\n\n      paths.forEach((path) => {\n        if (typeof path === \"function\") {\n          this.passthroughChecks.push(path);\n        } else {\n          verbs.forEach((verb) => {\n            let fullPath = this._getFullPath(path);\n            this.pretender[verb](fullPath, this.pretender.passthrough);\n          });\n        }\n      });\n    }\n  }\n\n  /**\n    By default, `fixtures` will be loaded during testing if you don't have factories defined, and during development if you don't have `seeds` defined. You can use `loadFixtures()` to also load fixture files in either of these environments, in addition to using factories to seed your database.\n\n    `server.loadFixtures()` loads all the files, and `server.loadFixtures(file1, file2...)` loads selective fixture files.\n\n    For example, in a test you may want to start out with all your fixture data loaded:\n\n    ```js\n    test('I can view the photos', function() {\n      server.loadFixtures();\n      server.createList('photo', 10);\n\n      visit('/');\n\n      andThen(() => {\n        equal( find('img').length, 10 );\n      });\n    });\n    ```\n\n    or in development, you may want to load a few reference fixture files, and use factories to define the rest of your data:\n\n    ```js\n    new Server({\n      ...,\n      seeds(server) {\n        server.loadFixtures('countries', 'states');\n\n        let author = server.create('author');\n        server.createList('post', 10, {author_id: author.id});\n      }\n    })\n    ```\n\n    @method loadFixtures\n    @param {String} [...args] The name of the fixture to load.\n    @public\n  */\n  loadFixtures(...args) {\n    let { fixtures } = this._config;\n\n    if (args.length) {\n      let camelizedArgs = args.map(camelize);\n\n      let missingKeys = camelizedArgs.filter((key) => !fixtures[key]);\n      if (missingKeys.length) {\n        throw new Error(`Fixtures not found: ${missingKeys.join(\", \")}`);\n      }\n\n      fixtures = pick(fixtures, ...camelizedArgs);\n    }\n\n    this.db.loadData(fixtures);\n  }\n\n  /*\n    Factory methods\n  */\n\n  /**\n   * Load factories into Mirage's database.\n   *\n   * @method loadFactories\n   * @param {Object} factoryMap\n   * @public\n   * @hide\n   */\n  loadFactories(factoryMap = {}) {\n    // Store a reference to the factories\n    let currentFactoryMap = this._factoryMap || {};\n    this._factoryMap = assign(currentFactoryMap, factoryMap);\n\n    // Create a collection for each factory\n    Object.keys(factoryMap).forEach((type) => {\n      let collectionName = this.schema.toCollectionName(type);\n      this.db.createCollection(collectionName);\n    });\n  }\n\n  /**\n   * Get the factory for a given type.\n   *\n   * @method factoryFor\n   * @param {String} type\n   * @private\n   * @hide\n   */\n  factoryFor(type) {\n    let camelizedType = camelize(type);\n\n    if (this._factoryMap && this._factoryMap[camelizedType]) {\n      return this._factoryMap[camelizedType];\n    }\n  }\n\n  build(type, ...traitsAndOverrides) {\n    let traits = traitsAndOverrides.filter(\n      (arg) => arg && typeof arg === \"string\"\n    );\n    let overrides = find(traitsAndOverrides, (arg) => isPlainObject(arg));\n    let camelizedType = camelize(type);\n\n    // Store sequence for factory type as instance variable\n    this.factorySequences = this.factorySequences || {};\n    this.factorySequences[camelizedType] =\n      this.factorySequences[camelizedType] + 1 || 0;\n\n    let OriginalFactory = this.factoryFor(type);\n    if (OriginalFactory) {\n      OriginalFactory = OriginalFactory.extend({});\n      let attrs = OriginalFactory.attrs || {};\n      this._validateTraits(traits, OriginalFactory, type);\n      let mergedExtensions = this._mergeExtensions(attrs, traits, overrides);\n      this._mapAssociationsFromAttributes(type, attrs, overrides);\n      this._mapAssociationsFromAttributes(type, mergedExtensions);\n\n      let Factory = OriginalFactory.extend(mergedExtensions);\n      let factory = new Factory();\n\n      let sequence = this.factorySequences[camelizedType];\n      return factory.build(sequence);\n    } else {\n      return overrides;\n    }\n  }\n\n  buildList(type, amount, ...traitsAndOverrides) {\n    assert(\n      isInteger(amount),\n      `second argument has to be an integer, you passed: ${typeof amount}`\n    );\n\n    let list = [];\n\n    const buildArgs = [type, ...traitsAndOverrides];\n    for (let i = 0; i < amount; i++) {\n      list.push(this.build.apply(this, buildArgs));\n    }\n\n    return list;\n  }\n\n  /**\n    Generates a single model of type *type*, inserts it into the database (giving it an id), and returns the data that was\n    added.\n\n    ```js\n    test(\"I can view a contact's details\", function() {\n      let contact = server.create('contact');\n\n      visit('/contacts/' + contact.id);\n\n      andThen(() => {\n        equal( find('h1').text(), 'The contact is Link');\n      });\n    });\n    ```\n\n    You can override the attributes from the factory definition with a\n    hash passed in as the second parameter. For example, if we had this factory\n\n    ```js\n    export default Factory.extend({\n      name: 'Link'\n    });\n    ```\n\n    we could override the name like this:\n\n    ```js\n    test(\"I can view the contacts\", function() {\n      server.create('contact', {name: 'Zelda'});\n\n      visit('/');\n\n      andThen(() => {\n        equal( find('p').text(), 'Zelda' );\n      });\n    });\n    ```\n\n    @method create\n    @param type the singularized type of the model\n    @param traitsAndOverrides\n    @public\n  */\n  create(type, ...options) {\n    assert(\n      this._modelOrFactoryExistsForType(type),\n      `You called server.create('${type}') but no model or factory was found. Make sure you're passing in the singularized version of the model or factory name.`\n    );\n\n    // When there is a Model defined, we should return an instance\n    // of it instead of returning the bare attributes.\n    let traits = options.filter((arg) => arg && typeof arg === \"string\");\n    let overrides = find(options, (arg) => isPlainObject(arg));\n    let collectionFromCreateList = find(\n      options,\n      (arg) => arg && Array.isArray(arg)\n    );\n\n    let attrs = this.build(type, ...traits, overrides);\n    let modelOrRecord;\n\n    if (this.schema && this.schema[this.schema.toCollectionName(type)]) {\n      let modelClass = this.schema[this.schema.toCollectionName(type)];\n\n      modelOrRecord = modelClass.create(attrs);\n    } else {\n      let collection, collectionName;\n\n      if (collectionFromCreateList) {\n        collection = collectionFromCreateList;\n      } else {\n        collectionName = this.schema\n          ? this.schema.toInternalCollectionName(type)\n          : `_${this.inflector.pluralize(type)}`;\n        collection = this.db[collectionName];\n      }\n\n      assert(\n        collection,\n        `You called server.create('${type}') but no model or factory was found.`\n      );\n      modelOrRecord = collection.insert(attrs);\n    }\n\n    let OriginalFactory = this.factoryFor(type);\n    if (OriginalFactory) {\n      OriginalFactory.extractAfterCreateCallbacks({ traits }).forEach(\n        (afterCreate) => {\n          afterCreate(modelOrRecord, this);\n        }\n      );\n    }\n\n    return modelOrRecord;\n  }\n\n  /**\n    Creates *amount* models of type *type*, optionally overriding the attributes from the factory with *attrs*.\n\n    Returns the array of records that were added to the database.\n\n    Here's an example from a test:\n\n    ```js\n    test(\"I can view the contacts\", function() {\n      server.createList('contact', 5);\n      let youngContacts = server.createList('contact', 5, {age: 15});\n\n      visit('/');\n\n      andThen(function() {\n        equal(currentRouteName(), 'index');\n        equal( find('p').length, 10 );\n      });\n    });\n    ```\n\n    And one from setting up your development database:\n\n    ```js\n    new Server({\n      seeds(server) {\n        let contact = server.create('contact')\n\n        server.createList('address', 5, { contact })\n      }\n    })\n    ```\n\n    @method createList\n    @param type\n    @param amount\n    @param traitsAndOverrides\n    @public\n  */\n  createList(type, amount, ...traitsAndOverrides) {\n    assert(\n      this._modelOrFactoryExistsForType(type),\n      `You called server.createList('${type}') but no model or factory was found. Make sure you're passing in the singularized version of the model or factory name.`\n    );\n    assert(\n      isInteger(amount),\n      `second argument has to be an integer, you passed: ${typeof amount}`\n    );\n\n    let list = [];\n    let collectionName = this.schema\n      ? this.schema.toInternalCollectionName(type)\n      : `_${this.inflector.pluralize(type)}`;\n    let collection = this.db[collectionName];\n\n    const createArguments = [type, ...traitsAndOverrides, collection];\n\n    for (let i = 0; i < amount; i++) {\n      list.push(this.create.apply(this, createArguments));\n    }\n\n    return list;\n  }\n\n  /**\n    Shutdown the server and stop intercepting network requests.\n\n    @method shutdown\n    @public\n  */\n  shutdown() {\n    if (typeof window !== \"undefined\") {\n      this.pretender.shutdown();\n    }\n\n    if (typeof window !== \"undefined\" && this.environment === \"test\") {\n      window.server = undefined;\n    }\n  }\n\n  resource(resourceName, { only, except, path } = {}) {\n    resourceName = this.inflector.pluralize(resourceName);\n    path = path || `/${resourceName}`;\n    only = only || [];\n    except = except || [];\n\n    if (only.length > 0 && except.length > 0) {\n      throw \"cannot use both :only and :except options\";\n    }\n\n    let actionsMethodsAndsPathsMappings = {\n      index: { methods: [\"get\"], path: `${path}` },\n      show: { methods: [\"get\"], path: `${path}/:id` },\n      create: { methods: [\"post\"], path: `${path}` },\n      update: { methods: [\"put\", \"patch\"], path: `${path}/:id` },\n      delete: { methods: [\"del\"], path: `${path}/:id` },\n    };\n\n    let allActions = Object.keys(actionsMethodsAndsPathsMappings);\n    let actions =\n      (only.length > 0 && only) ||\n      (except.length > 0 &&\n        allActions.filter((action) => except.indexOf(action) === -1)) ||\n      allActions;\n\n    actions.forEach((action) => {\n      let methodsWithPath = actionsMethodsAndsPathsMappings[action];\n\n      methodsWithPath.methods.forEach((method) => {\n        return path === resourceName\n          ? this[method](methodsWithPath.path)\n          : this[method](methodsWithPath.path, resourceName);\n      });\n    });\n  }\n\n  /**\n   *\n   * @private\n   * @hide\n   */\n  _defineRouteHandlerHelpers() {\n    [\n      [\"get\"],\n      [\"post\"],\n      [\"put\"],\n      [\"delete\", \"del\"],\n      [\"patch\"],\n      [\"head\"],\n      [\"options\"],\n    ].forEach(([verb, alias]) => {\n      this[verb] = (path, ...args) => {\n        let [rawHandler, customizedCode, options] = extractRouteArguments(args);\n        return this._registerRouteHandler(\n          verb,\n          path,\n          rawHandler,\n          customizedCode,\n          options\n        );\n      };\n\n      if (alias) {\n        this[alias] = this[verb];\n      }\n    });\n  }\n\n  _serialize(body) {\n    if (typeof body === \"string\") {\n      return body;\n    } else {\n      return JSON.stringify(body);\n    }\n  }\n\n  _registerRouteHandler(verb, path, rawHandler, customizedCode, options) {\n    let routeHandler = this._container.create(\"RouteHandler\", {\n      schema: this.schema,\n      verb,\n      rawHandler,\n      customizedCode,\n      options,\n      path,\n      serializerOrRegistry: this.serializerOrRegistry,\n    });\n\n    let fullPath = this._getFullPath(path);\n    let timing =\n      options.timing !== undefined ? options.timing : () => this.timing;\n\n    if (this.pretender) {\n      return this.pretender[verb](\n        fullPath,\n        (request) => {\n          return routeHandler.handle(request).then((mirageResponse) => {\n            let [code, headers, response] = mirageResponse;\n\n            return [code, headers, this._serialize(response)];\n          });\n        },\n        timing\n      );\n    }\n  }\n\n  /**\n   *\n   * @private\n   * @hide\n   */\n  _hasModulesOfType(modules, type) {\n    let modulesOfType = modules[type];\n    return modulesOfType ? Object.keys(modulesOfType).length > 0 : false;\n  }\n\n  /**\n   * Builds a full path for Pretender to monitor based on the `path` and\n   * configured options (`urlPrefix` and `namespace`).\n   *\n   * @private\n   * @hide\n   */\n  _getFullPath(path) {\n    path = path[0] === \"/\" ? path.slice(1) : path;\n    let fullPath = \"\";\n    let urlPrefix = this.urlPrefix ? this.urlPrefix.trim() : \"\";\n    let namespace = \"\";\n\n    // if there is a urlPrefix and a namespace\n    if (this.urlPrefix && this.namespace) {\n      if (\n        this.namespace[0] === \"/\" &&\n        this.namespace[this.namespace.length - 1] === \"/\"\n      ) {\n        namespace = this.namespace\n          .substring(0, this.namespace.length - 1)\n          .substring(1);\n      }\n\n      if (\n        this.namespace[0] === \"/\" &&\n        this.namespace[this.namespace.length - 1] !== \"/\"\n      ) {\n        namespace = this.namespace.substring(1);\n      }\n\n      if (\n        this.namespace[0] !== \"/\" &&\n        this.namespace[this.namespace.length - 1] === \"/\"\n      ) {\n        namespace = this.namespace.substring(0, this.namespace.length - 1);\n      }\n\n      if (\n        this.namespace[0] !== \"/\" &&\n        this.namespace[this.namespace.length - 1] !== \"/\"\n      ) {\n        namespace = this.namespace;\n      }\n    }\n\n    // if there is a namespace and no urlPrefix\n    if (this.namespace && !this.urlPrefix) {\n      if (\n        this.namespace[0] === \"/\" &&\n        this.namespace[this.namespace.length - 1] === \"/\"\n      ) {\n        namespace = this.namespace.substring(0, this.namespace.length - 1);\n      }\n\n      if (\n        this.namespace[0] === \"/\" &&\n        this.namespace[this.namespace.length - 1] !== \"/\"\n      ) {\n        namespace = this.namespace;\n      }\n\n      if (\n        this.namespace[0] !== \"/\" &&\n        this.namespace[this.namespace.length - 1] === \"/\"\n      ) {\n        let namespaceSub = this.namespace.substring(\n          0,\n          this.namespace.length - 1\n        );\n        namespace = `/${namespaceSub}`;\n      }\n\n      if (\n        this.namespace[0] !== \"/\" &&\n        this.namespace[this.namespace.length - 1] !== \"/\"\n      ) {\n        namespace = `/${this.namespace}`;\n      }\n    }\n\n    // if no namespace\n    if (!this.namespace) {\n      namespace = \"\";\n    }\n\n    // check to see if path is a FQDN. if so, ignore any urlPrefix/namespace that was set\n    if (/^https?:\\/\\//.test(path)) {\n      fullPath += path;\n    } else {\n      // otherwise, if there is a urlPrefix, use that as the beginning of the path\n      if (urlPrefix.length) {\n        fullPath +=\n          urlPrefix[urlPrefix.length - 1] === \"/\" ? urlPrefix : `${urlPrefix}/`;\n      }\n\n      // add the namespace to the path\n      fullPath += namespace;\n\n      // add a trailing slash to the path if it doesn't already contain one\n      if (fullPath[fullPath.length - 1] !== \"/\") {\n        fullPath += \"/\";\n      }\n\n      // finally add the configured path\n      fullPath += path;\n\n      // if we're making a same-origin request, ensure a / is prepended and\n      // dedup any double slashes\n      if (!/^https?:\\/\\//.test(fullPath)) {\n        fullPath = `/${fullPath}`;\n        fullPath = fullPath.replace(/\\/+/g, \"/\");\n      }\n    }\n\n    return fullPath;\n  }\n\n  /**\n   *\n   * @private\n   * @hide\n   */\n  _configureDefaultPassthroughs() {\n    defaultPassthroughs.forEach((passthroughUrl) => {\n      this.passthrough(passthroughUrl);\n    });\n  }\n\n  /**\n   *\n   * @private\n   * @hide\n   */\n  _typeIsPluralForModel(typeOrCollectionName) {\n    if (typeof isPluralForModelCache[typeOrCollectionName] !== \"boolean\") {\n      let modelOrFactoryExists = this._modelOrFactoryExistsForTypeOrCollectionName(\n        typeOrCollectionName\n      );\n      let isPlural =\n        typeOrCollectionName === this.inflector.pluralize(typeOrCollectionName);\n      let isUncountable =\n        this.inflector.singularize(typeOrCollectionName) ===\n        this.inflector.pluralize(typeOrCollectionName);\n\n      const isPluralForModel =\n        isPlural && !isUncountable && modelOrFactoryExists;\n\n      isPluralForModelCache[typeOrCollectionName] = isPluralForModel;\n    }\n\n    return isPluralForModelCache[typeOrCollectionName];\n  }\n\n  /**\n   *\n   * @private\n   * @hide\n   */\n  _modelOrFactoryExistsForType(type) {\n    let modelExists = this.schema && this.schema.modelFor(camelize(type));\n    let dbCollectionExists = this.db[\n      this.schema.toInternalCollectionName(type)\n    ];\n\n    return (\n      (modelExists || dbCollectionExists) && !this._typeIsPluralForModel(type)\n    );\n  }\n\n  /**\n   *\n   * @private\n   * @hide\n   */\n  _modelOrFactoryExistsForTypeOrCollectionName(typeOrCollectionName) {\n    let modelExists =\n      this.schema && this.schema.modelFor(camelize(typeOrCollectionName));\n    let dbCollectionExists = this.db[\n      this.schema.toInternalCollectionName(typeOrCollectionName)\n    ];\n\n    return modelExists || dbCollectionExists;\n  }\n\n  /**\n   *\n   * @private\n   * @hide\n   */\n  _validateTraits(traits, factory, type) {\n    traits.forEach((traitName) => {\n      if (!factory.isTrait(traitName)) {\n        throw new Error(\n          `'${traitName}' trait is not registered in '${type}' factory`\n        );\n      }\n    });\n  }\n\n  /**\n   *\n   * @private\n   * @hide\n   */\n  _mergeExtensions(attrs, traits, overrides) {\n    let allExtensions = traits.map((traitName) => {\n      return attrs[traitName].extension;\n    });\n    allExtensions.push(overrides || {});\n    return allExtensions.reduce((accum, extension) => {\n      return assign(accum, extension);\n    }, {});\n  }\n\n  /**\n   *\n   * @private\n   * @hide\n   */\n  _mapAssociationsFromAttributes(modelName, attributes, overrides = {}) {\n    Object.keys(attributes || {})\n      .filter((attr) => {\n        return isAssociation(attributes[attr]);\n      })\n      .forEach((attr) => {\n        let modelClass = this.schema.modelClassFor(modelName);\n        let association = modelClass.associationFor(attr);\n\n        assert(\n          association && association instanceof BelongsTo,\n          `You're using the \\`association\\` factory helper on the '${attr}' attribute of your ${modelName} factory, but that attribute is not a \\`belongsTo\\` association.`\n        );\n\n        let isSelfReferentialBelongsTo =\n          association &&\n          association instanceof BelongsTo &&\n          association.modelName === modelName;\n\n        assert(\n          !isSelfReferentialBelongsTo,\n          `You're using the association() helper on your ${modelName} factory for ${attr}, which is a belongsTo self-referential relationship. You can't do this as it will lead to infinite recursion. You can move the helper inside of a trait and use it selectively.`\n        );\n\n        let isPolymorphic =\n          association && association.opts && association.opts.polymorphic;\n\n        assert(\n          !isPolymorphic,\n          `You're using the association() helper on your ${modelName} factory for ${attr}, which is a polymorphic relationship. This is not currently supported.`\n        );\n\n        let factoryAssociation = attributes[attr];\n        let foreignKey = `${camelize(attr)}Id`;\n        if (!overrides[attr]) {\n          attributes[foreignKey] = this.create(\n            association.modelName,\n            ...factoryAssociation.traitsAndOverrides\n          ).id;\n        }\n        delete attributes[attr];\n      });\n  }\n}\n","import Serializer from \"../serializer\";\nimport { underscore, dasherize, camelize } from \"../utils/inflector\";\n\nexport default Serializer.extend({\n  serializeIds: \"always\",\n  normalizeIds: true,\n\n  keyForModel(type) {\n    return underscore(type);\n  },\n\n  keyForAttribute(attr) {\n    return underscore(attr);\n  },\n\n  keyForRelationship(type) {\n    return this._container.inflector.pluralize(underscore(type));\n  },\n\n  keyForEmbeddedRelationship(attributeName) {\n    return underscore(attributeName);\n  },\n\n  keyForRelationshipIds(type) {\n    return `${underscore(this._container.inflector.singularize(type))}_ids`;\n  },\n\n  keyForForeignKey(relationshipName) {\n    return `${underscore(relationshipName)}_id`;\n  },\n\n  keyForPolymorphicForeignKeyId(relationshipName) {\n    return `${underscore(relationshipName)}_id`;\n  },\n\n  keyForPolymorphicForeignKeyType(relationshipName) {\n    return `${underscore(relationshipName)}_type`;\n  },\n\n  normalize(payload) {\n    let type = Object.keys(payload)[0];\n    let attrs = payload[type];\n    let modelName = camelize(type);\n    let modelClass = this.schema.modelClassFor(modelName);\n    let { belongsToAssociations, hasManyAssociations } = modelClass;\n    let belongsToKeys = Object.keys(belongsToAssociations);\n    let hasManyKeys = Object.keys(hasManyAssociations);\n\n    let jsonApiPayload = {\n      data: {\n        type: this._container.inflector.pluralize(type),\n        attributes: {},\n      },\n    };\n    if (attrs.id) {\n      jsonApiPayload.data.id = attrs.id;\n    }\n\n    let relationships = {};\n\n    Object.keys(attrs).forEach((key) => {\n      if (key !== \"id\") {\n        if (this.normalizeIds) {\n          if (belongsToKeys.includes(key)) {\n            let association = belongsToAssociations[key];\n            let associationModel = association.modelName;\n            relationships[dasherize(key)] = {\n              data: {\n                type: associationModel,\n                id: attrs[key],\n              },\n            };\n          } else if (hasManyKeys.includes(key)) {\n            let association = hasManyAssociations[key];\n            let associationModel = association.modelName;\n            let data = attrs[key].map((id) => {\n              return {\n                type: associationModel,\n                id,\n              };\n            });\n            relationships[dasherize(key)] = { data };\n          } else {\n            jsonApiPayload.data.attributes[dasherize(key)] = attrs[key];\n          }\n        } else {\n          jsonApiPayload.data.attributes[dasherize(key)] = attrs[key];\n        }\n      }\n    });\n    if (Object.keys(relationships).length) {\n      jsonApiPayload.data.relationships = relationships;\n    }\n\n    return jsonApiPayload;\n  },\n\n  getCoalescedIds(request) {\n    return request.queryParams && request.queryParams.ids;\n  },\n});\n","import ActiveModelSerializer from \"./active-model-serializer\";\nimport { camelize } from \"../utils/inflector\";\n\nexport default ActiveModelSerializer.extend({\n  serializeIds: \"always\",\n\n  keyForModel(type) {\n    return camelize(type);\n  },\n\n  keyForAttribute(attr) {\n    return camelize(attr);\n  },\n\n  keyForRelationship(type) {\n    return camelize(this._container.inflector.pluralize(type));\n  },\n\n  keyForEmbeddedRelationship(attributeName) {\n    return camelize(attributeName);\n  },\n\n  keyForRelationshipIds(type) {\n    return camelize(this._container.inflector.pluralize(type));\n  },\n\n  keyForForeignKey(relationshipName) {\n    return camelize(this._container.inflector.singularize(relationshipName));\n  },\n\n  getCoalescedIds(request) {\n    return request.queryParams && request.queryParams.ids;\n  },\n});\n","/**\n  UUID generator\n\n  @hide\n*/\nexport default function () {\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n    let r = (Math.random() * 16) | 0;\n    let v = c === \"x\" ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n","import Factory from \"./factory\";\nimport IdentityManager from \"./identity-manager\";\nimport association from \"./association\";\nimport trait from \"./trait\";\nimport Response from \"./response\";\nimport Server, { createServer, defaultPassthroughs } from \"./server\";\nimport Model from \"./orm/model\";\nimport Collection from \"./orm/collection\";\nimport Serializer from \"./serializer\";\nimport ActiveModelSerializer from \"./serializers/active-model-serializer\";\nimport JSONAPISerializer from \"./serializers/json-api-serializer\";\nimport RestSerializer from \"./serializers/rest-serializer\";\nimport HasMany from \"./orm/associations/has-many\";\nimport BelongsTo from \"./orm/associations/belongs-to\";\n\n/*\n  These are solely for ember-cli-mirage, a \"privileged consumer\", and should be\n  removed once those import paths are dropped.\n*/\nimport _assert from \"./assert\";\nimport _DbCollection from \"./db-collection\";\nimport _Db from \"./db\";\nimport _RouteHandler from \"./route-handler\";\nimport _SerializerRegistry from \"./serializer-registry\";\nimport _ormAssociationsAssociation from \"./orm/associations/association\";\nimport _ormAssociationsBelongsTo from \"./orm/associations/belongs-to\";\nimport _ormAssociationsHasMany from \"./orm/associations/has-many\";\nimport _ormPolymorphicCollection from \"./orm/polymorphic-collection\";\nimport _ormSchema from \"./orm/schema\";\nimport _routeHandlersShorthandsBase from \"./route-handlers/shorthands/base\";\nimport _routeHandlersShorthandsDelete from \"./route-handlers/shorthands/delete\";\nimport _routeHandlersShorthandsGet from \"./route-handlers/shorthands/get\";\nimport _routeHandlersShorthandsHead from \"./route-handlers/shorthands/head\";\nimport _routeHandlersShorthandsPost from \"./route-handlers/shorthands/post\";\nimport _routeHandlersShorthandsPut from \"./route-handlers/shorthands/put\";\nimport _routeHandlersBase from \"./route-handlers/base\";\nimport _routeHandlersFunction from \"./route-handlers/function\";\nimport _routeHandlersObject from \"./route-handlers/object\";\nimport _utilsExtend from \"./utils/extend\";\nimport {\n  camelize as _utilsInflectorCamelize,\n  dasherize as _utilsInflectorDasherize,\n  underscore as _utilsInflectorUnderscore,\n  capitalize as _utilsInflectorCapitalize,\n} from \"./utils/inflector\";\nimport _utilsIsAssociation from \"./utils/is-association\";\nimport _utilsReferenceSort from \"./utils/reference-sort\";\nimport _utilsUuid from \"./utils/uuid\";\n\n/**\n  @hide\n*/\nfunction hasMany(...args) {\n  return new HasMany(...args);\n}\n\n/**\n  @hide\n*/\nfunction belongsTo(...args) {\n  return new BelongsTo(...args);\n}\n\nexport {\n  association,\n  trait,\n  Model,\n  Collection,\n  Serializer,\n  ActiveModelSerializer,\n  JSONAPISerializer,\n  RestSerializer,\n  hasMany,\n  belongsTo,\n  defaultPassthroughs,\n  createServer,\n  Server,\n  Factory,\n  IdentityManager,\n  Response,\n  _assert,\n  _DbCollection,\n  _Db,\n  _RouteHandler,\n  _SerializerRegistry,\n  _ormAssociationsAssociation,\n  _ormAssociationsBelongsTo,\n  _ormAssociationsHasMany,\n  _ormPolymorphicCollection,\n  _ormSchema,\n  _routeHandlersShorthandsBase,\n  _routeHandlersShorthandsDelete,\n  _routeHandlersShorthandsGet,\n  _routeHandlersShorthandsHead,\n  _routeHandlersShorthandsPost,\n  _routeHandlersShorthandsPut,\n  _routeHandlersBase,\n  _routeHandlersFunction,\n  _routeHandlersObject,\n  _utilsExtend,\n  _utilsInflectorCamelize,\n  _utilsInflectorDasherize,\n  _utilsInflectorUnderscore,\n  _utilsInflectorCapitalize,\n  _utilsIsAssociation,\n  _utilsReferenceSort,\n  _utilsUuid,\n};\n\nexport default {\n  Factory,\n  Response,\n  hasMany,\n  belongsTo,\n};\n"]},"metadata":{},"sourceType":"module"}